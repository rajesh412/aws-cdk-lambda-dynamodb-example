"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("./util");
/**
 * A class used to maintain a set of rename directives
 */
class Renames {
    constructor(renameTable, defaultRename) {
        this.renameTable = renameTable;
        this.defaultRename = defaultRename;
    }
    /**
     * Check the selected stacks against the renames, to see that they make sense
     *
     * We explicitly don't check that renamed stacks are in the passed set, so
     * that people may use a default rename table  even when only selecting
     * subsets of stacks.
     *
     * We DO check that if there's a default rename (simple syntax) they
     * only selected one stack.
     */
    validateSelectedStacks(stacks) {
        if (this.hasDefaultRename && stacks.length > 1) {
            throw new Error("When selecting multiple stacks, you must use the 'ORIGINALNAME:RENAME' pattern for renames.");
        }
    }
    /**
     * Whether this rename has a single rename that renames any stack
     */
    get hasDefaultRename() {
        return this.defaultRename != null;
    }
    /**
     * Return the target name for a given stack name
     *
     * Returns either the renamed name or the original name.
     */
    finalName(name) {
        const rename = this.lookupRename(name);
        if (rename != null) {
            return rename;
        }
        return name;
    }
    lookupRename(name) {
        if (this.hasDefaultRename) {
            return this.defaultRename;
        }
        return this.renameTable[name];
    }
}
exports.Renames = Renames;
/**
 * Parse a rename expression string and construct a Renames object from it
 *
 * The rename expression looks like:
 *
 *  [OLD:]NEW[,OLD:NEW[,...]]
 *
 * If there is more than one rename, every entry must have an OLD name.
 */
function parseRenames(renameExpr) {
    if (renameExpr == null || renameExpr.trim().length === 0) {
        return new Renames({});
    }
    const clauses = renameExpr.split(',');
    if (clauses.length === 1 && clauses[0].indexOf(':') === -1) {
        return new Renames({}, clauses[0]);
    }
    const table = util.makeObject(clauses
        .map(s => s.trim())
        .filter(s => s.length > 0)
        .map(clause => clause.split(':', 2)));
    return new Renames(table);
}
exports.parseRenames = parseRenames;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuYW1lcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlbmFtZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrQkFBZ0M7QUFJaEM7O0dBRUc7QUFDSCxNQUFhLE9BQU87SUFDbEIsWUFBNkIsV0FBd0IsRUFBbUIsYUFBc0I7UUFBakUsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFBbUIsa0JBQWEsR0FBYixhQUFhLENBQVM7SUFDOUYsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNJLHNCQUFzQixDQUFDLE1BQWdDO1FBQzVELElBQUksSUFBSSxDQUFDLGdCQUFnQixJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlDLE1BQU0sSUFBSSxLQUFLLENBQUMsNkZBQTZGLENBQUMsQ0FBQztTQUNoSDtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsZ0JBQWdCO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUM7SUFDcEMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxTQUFTLENBQUMsSUFBWTtRQUMzQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXZDLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtZQUNsQixPQUFPLE1BQU0sQ0FBQztTQUNmO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQVk7UUFDL0IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO1NBQzNCO1FBQ0QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Q0FFRjtBQWpERCwwQkFpREM7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILFNBQWdCLFlBQVksQ0FBQyxVQUE0QjtJQUN2RCxJQUFJLFVBQVUsSUFBSSxJQUFJLElBQUksVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFBRSxPQUFPLElBQUksT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQUU7SUFFckYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDMUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEM7SUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87U0FDbEMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ2xCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ3pCLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBcUIsQ0FBQyxDQUFDLENBQUM7SUFFNUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBZEQsb0NBY0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3hhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmV4cG9ydCB0eXBlIFJlbmFtZVRhYmxlID0ge1trZXk6IHN0cmluZ106IHN0cmluZ307XG5cbi8qKlxuICogQSBjbGFzcyB1c2VkIHRvIG1haW50YWluIGEgc2V0IG9mIHJlbmFtZSBkaXJlY3RpdmVzXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5hbWVzIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSByZW5hbWVUYWJsZTogUmVuYW1lVGFibGUsIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdFJlbmFtZT86IHN0cmluZykge1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHRoZSBzZWxlY3RlZCBzdGFja3MgYWdhaW5zdCB0aGUgcmVuYW1lcywgdG8gc2VlIHRoYXQgdGhleSBtYWtlIHNlbnNlXG4gICAqXG4gICAqIFdlIGV4cGxpY2l0bHkgZG9uJ3QgY2hlY2sgdGhhdCByZW5hbWVkIHN0YWNrcyBhcmUgaW4gdGhlIHBhc3NlZCBzZXQsIHNvXG4gICAqIHRoYXQgcGVvcGxlIG1heSB1c2UgYSBkZWZhdWx0IHJlbmFtZSB0YWJsZSAgZXZlbiB3aGVuIG9ubHkgc2VsZWN0aW5nXG4gICAqIHN1YnNldHMgb2Ygc3RhY2tzLlxuICAgKlxuICAgKiBXZSBETyBjaGVjayB0aGF0IGlmIHRoZXJlJ3MgYSBkZWZhdWx0IHJlbmFtZSAoc2ltcGxlIHN5bnRheCkgdGhleVxuICAgKiBvbmx5IHNlbGVjdGVkIG9uZSBzdGFjay5cbiAgICovXG4gIHB1YmxpYyB2YWxpZGF0ZVNlbGVjdGVkU3RhY2tzKHN0YWNrczogY3hhcGkuU3ludGhlc2l6ZWRTdGFja1tdKSB7XG4gICAgaWYgKHRoaXMuaGFzRGVmYXVsdFJlbmFtZSAmJiBzdGFja3MubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBzZWxlY3RpbmcgbXVsdGlwbGUgc3RhY2tzLCB5b3UgbXVzdCB1c2UgdGhlICdPUklHSU5BTE5BTUU6UkVOQU1FJyBwYXR0ZXJuIGZvciByZW5hbWVzLlwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIHJlbmFtZSBoYXMgYSBzaW5nbGUgcmVuYW1lIHRoYXQgcmVuYW1lcyBhbnkgc3RhY2tcbiAgICovXG4gIHB1YmxpYyBnZXQgaGFzRGVmYXVsdFJlbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0UmVuYW1lICE9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSB0YXJnZXQgbmFtZSBmb3IgYSBnaXZlbiBzdGFjayBuYW1lXG4gICAqXG4gICAqIFJldHVybnMgZWl0aGVyIHRoZSByZW5hbWVkIG5hbWUgb3IgdGhlIG9yaWdpbmFsIG5hbWUuXG4gICAqL1xuICBwdWJsaWMgZmluYWxOYW1lKG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgcmVuYW1lID0gdGhpcy5sb29rdXBSZW5hbWUobmFtZSk7XG5cbiAgICBpZiAocmVuYW1lICE9IG51bGwpIHtcbiAgICAgIHJldHVybiByZW5hbWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hbWU7XG4gIH1cblxuICBwcml2YXRlIGxvb2t1cFJlbmFtZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmhhc0RlZmF1bHRSZW5hbWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRSZW5hbWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJlbmFtZVRhYmxlW25hbWVdO1xuICB9XG5cbn1cblxuLyoqXG4gKiBQYXJzZSBhIHJlbmFtZSBleHByZXNzaW9uIHN0cmluZyBhbmQgY29uc3RydWN0IGEgUmVuYW1lcyBvYmplY3QgZnJvbSBpdFxuICpcbiAqIFRoZSByZW5hbWUgZXhwcmVzc2lvbiBsb29rcyBsaWtlOlxuICpcbiAqICBbT0xEOl1ORVdbLE9MRDpORVdbLC4uLl1dXG4gKlxuICogSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSByZW5hbWUsIGV2ZXJ5IGVudHJ5IG11c3QgaGF2ZSBhbiBPTEQgbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUmVuYW1lcyhyZW5hbWVFeHByOiBzdHJpbmd8dW5kZWZpbmVkKTogUmVuYW1lcyB7XG4gIGlmIChyZW5hbWVFeHByID09IG51bGwgfHwgcmVuYW1lRXhwci50cmltKCkubGVuZ3RoID09PSAwKSB7IHJldHVybiBuZXcgUmVuYW1lcyh7fSk7IH1cblxuICBjb25zdCBjbGF1c2VzID0gcmVuYW1lRXhwci5zcGxpdCgnLCcpO1xuICBpZiAoY2xhdXNlcy5sZW5ndGggPT09IDEgJiYgY2xhdXNlc1swXS5pbmRleE9mKCc6JykgPT09IC0xKSB7XG4gICAgcmV0dXJuIG5ldyBSZW5hbWVzKHt9LCBjbGF1c2VzWzBdKTtcbiAgfVxuXG4gIGNvbnN0IHRhYmxlID0gdXRpbC5tYWtlT2JqZWN0KGNsYXVzZXNcbiAgICAubWFwKHMgPT4gcy50cmltKCkpXG4gICAgLmZpbHRlcihzID0+IHMubGVuZ3RoID4gMClcbiAgICAubWFwKGNsYXVzZSA9PiBjbGF1c2Uuc3BsaXQoJzonLCAyKSBhcyBbc3RyaW5nLCBzdHJpbmddKSk7XG5cbiAgcmV0dXJuIG5ldyBSZW5hbWVzKHRhYmxlKTtcbn1cbiJdfQ==