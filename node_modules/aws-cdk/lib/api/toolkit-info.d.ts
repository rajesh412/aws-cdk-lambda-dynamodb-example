import cxapi = require('@aws-cdk/cx-api');
import { SDK } from './util/sdk';
export interface UploadProps {
    s3KeyPrefix?: string;
    s3KeySuffix?: string;
    contentType?: string;
}
export interface Uploaded {
    filename: string;
    key: string;
    changed: boolean;
}
export declare class ToolkitInfo {
    private readonly props;
    readonly sdk: SDK;
    /**
     * A cache of previous uploads done in this session
     */
    private readonly previousUploads;
    constructor(props: {
        sdk: SDK;
        bucketName: string;
        bucketEndpoint: string;
        environment: cxapi.Environment;
    });
    readonly bucketUrl: string;
    readonly bucketName: string;
    /**
     * Uploads a data blob to S3 under the specified key prefix.
     * Uses md5 hash to render the full key and skips upload if an object
     * already exists by this key.
     */
    uploadIfChanged(data: any, props: UploadProps): Promise<Uploaded>;
    /**
     * Prepare an ECR repository for uploading to using Docker
     */
    prepareEcrRepository(id: string, imageTag: string): Promise<EcrRepositoryInfo>;
}
export declare type EcrRepositoryInfo = CompleteEcrRepositoryInfo | UploadableEcrRepositoryInfo;
export interface CompleteEcrRepositoryInfo {
    repositoryUri: string;
    repositoryName: string;
    alreadyExists: true;
}
export interface UploadableEcrRepositoryInfo {
    repositoryUri: string;
    repositoryName: string;
    alreadyExists: false;
    username: string;
    password: string;
    endpoint: string;
}
export declare function loadToolkitInfo(environment: cxapi.Environment, sdk: SDK, stackName: string): Promise<ToolkitInfo | undefined>;
