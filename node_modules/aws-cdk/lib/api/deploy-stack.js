"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const uuid = require("uuid");
const assets_1 = require("../assets");
const logging_1 = require("../logging");
const serialize_1 = require("../serialize");
const credentials_1 = require("./aws-auth/credentials");
const cloudformation_1 = require("./util/cloudformation");
const stack_activity_monitor_1 = require("./util/cloudformation/stack-activity-monitor");
const stack_status_1 = require("./util/cloudformation/stack-status");
const LARGE_TEMPLATE_SIZE_KB = 50;
async function deployStack(options) {
    if (!options.stack.environment) {
        throw new Error(`The stack ${options.stack.name} does not have an environment`);
    }
    const params = await assets_1.prepareAssets(options.stack, options.toolkitInfo);
    const deployName = options.deployName || options.stack.name;
    const executionId = uuid.v4();
    const cfn = await options.sdk.cloudFormation(options.stack.environment, credentials_1.Mode.ForWriting);
    const bodyParameter = await makeBodyParameter(options.stack, options.toolkitInfo);
    if (await cloudformation_1.stackFailedCreating(cfn, deployName)) {
        logging_1.debug(`Found existing stack ${deployName} that had previously failed creation. Deleting it before attempting to re-create it.`);
        await cfn.deleteStack({ StackName: deployName }).promise();
        const deletedStack = await cloudformation_1.waitForStack(cfn, deployName, false);
        if (deletedStack && deletedStack.StackStatus !== 'DELETE_COMPLETE') {
            throw new Error(`Failed deleting stack ${deployName} that had previously failed creation (current state: ${deletedStack.StackStatus})`);
        }
    }
    const update = await cloudformation_1.stackExists(cfn, deployName);
    const changeSetName = `CDK-${executionId}`;
    logging_1.debug(`Attempting to create ChangeSet ${changeSetName} to ${update ? 'update' : 'create'} stack ${deployName}`);
    logging_1.print(`%s: creating CloudFormation changeset...`, colors.bold(deployName));
    const changeSet = await cfn.createChangeSet({
        StackName: deployName,
        ChangeSetName: changeSetName,
        ChangeSetType: update ? 'UPDATE' : 'CREATE',
        Description: `CDK Changeset for execution ${executionId}`,
        TemplateBody: bodyParameter.TemplateBody,
        TemplateURL: bodyParameter.TemplateURL,
        Parameters: params,
        RoleARN: options.roleArn,
        Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM']
    }).promise();
    logging_1.debug('Initiated creation of changeset: %s; waiting for it to finish creating...', changeSet.Id);
    const changeSetDescription = await cloudformation_1.waitForChangeSet(cfn, deployName, changeSetName);
    if (!changeSetDescription || !changeSetDescription.Changes || changeSetDescription.Changes.length === 0) {
        logging_1.debug('No changes are to be performed on %s, assuming success.', deployName);
        await cfn.deleteChangeSet({ StackName: deployName, ChangeSetName: changeSetName }).promise();
        return { noOp: true, outputs: await getStackOutputs(cfn, deployName), stackArn: changeSet.StackId };
    }
    logging_1.debug('Initiating execution of changeset %s on stack %s', changeSetName, deployName);
    await cfn.executeChangeSet({ StackName: deployName, ChangeSetName: changeSetName }).promise();
    // tslint:disable-next-line:max-line-length
    const monitor = options.quiet ? undefined : new stack_activity_monitor_1.StackActivityMonitor(cfn, deployName, options.stack, changeSetDescription.Changes.length).start();
    logging_1.debug('Execution of changeset %s on stack %s has started; waiting for the update to complete...', changeSetName, deployName);
    await cloudformation_1.waitForStack(cfn, deployName);
    if (monitor) {
        await monitor.stop();
    }
    logging_1.debug('Stack %s has completed updating', deployName);
    return { noOp: false, outputs: await getStackOutputs(cfn, deployName), stackArn: changeSet.StackId };
}
exports.deployStack = deployStack;
async function getStackOutputs(cfn, stackName) {
    const description = await cloudformation_1.describeStack(cfn, stackName);
    const result = {};
    if (description && description.Outputs) {
        description.Outputs.forEach(output => {
            result[output.OutputKey] = output.OutputValue;
        });
    }
    return result;
}
/**
 * Prepares the body parameter for +CreateChangeSet+, putting the generated CloudFormation template in the toolkit-provided
 * S3 bucket if present, otherwise using in-line template argument. If no +ToolkitInfo+ is provided and the template is
 * larger than 50,200 bytes, an +Error+ will be raised.
 *
 * @param stack     the synthesized stack that provides the CloudFormation template
 * @param sdk     an AWS SDK to use when interacting with S3
 * @param toolkitInfo information about the toolkit stack
 */
async function makeBodyParameter(stack, toolkitInfo) {
    const templateJson = serialize_1.toYAML(stack.template);
    if (toolkitInfo) {
        const s3KeyPrefix = `cdk/${stack.name}/`;
        const s3KeySuffix = '.yml';
        const { key } = await toolkitInfo.uploadIfChanged(templateJson, {
            s3KeyPrefix, s3KeySuffix, contentType: 'application/x-yaml'
        });
        const templateURL = `${toolkitInfo.bucketUrl}/${key}`;
        logging_1.debug('Stored template in S3 at:', templateURL);
        return { TemplateURL: templateURL };
    }
    else if (templateJson.length > LARGE_TEMPLATE_SIZE_KB * 1024) {
        logging_1.error(`The template for stack "${stack.name}" is ${Math.round(templateJson.length / 1024)}KiB. ` +
            `Templates larger than ${LARGE_TEMPLATE_SIZE_KB}KiB must be uploaded to S3.\n` +
            'Run the following command in order to setup an S3 bucket in this environment, and then re-deploy:\n\n', colors.blue(`\t$ cdk bootstrap ${stack.environment.name}\n`));
        throw new Error(`Template too large to deploy ("cdk bootstrap" is required)`);
    }
    else {
        return { TemplateBody: templateJson };
    }
}
async function destroyStack(options) {
    if (!options.stack.environment) {
        throw new Error(`The stack ${options.stack.name} does not have an environment`);
    }
    const deployName = options.deployName || options.stack.name;
    const cfn = await options.sdk.cloudFormation(options.stack.environment, credentials_1.Mode.ForWriting);
    if (!await cloudformation_1.stackExists(cfn, deployName)) {
        return;
    }
    const monitor = options.quiet ? undefined : new stack_activity_monitor_1.StackActivityMonitor(cfn, deployName, options.stack).start();
    await cfn.deleteStack({ StackName: deployName, RoleARN: options.roleArn }).promise().catch(e => { throw e; });
    const destroyedStack = await cloudformation_1.waitForStack(cfn, deployName, false);
    if (monitor) {
        await monitor.stop();
    }
    if (destroyedStack && destroyedStack.StackStatus !== 'DELETE_COMPLETE') {
        const status = stack_status_1.StackStatus.fromStackDescription(destroyedStack);
        throw new Error(`Failed to destroy ${deployName}: ${status}`);
    }
    return;
}
exports.destroyStack = destroyStack;
//# sourceMappingURL=data:application/json;base64,