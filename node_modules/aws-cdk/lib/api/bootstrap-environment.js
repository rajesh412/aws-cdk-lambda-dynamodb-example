"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const deploy_stack_1 = require("./deploy-stack");
// tslint:disable:max-line-length
exports.BUCKET_NAME_OUTPUT = 'BucketName';
exports.BUCKET_DOMAIN_NAME_OUTPUT = 'BucketDomainName';
async function bootstrapEnvironment(environment, aws, toolkitStackName, roleArn) {
    const synthesizedStack = {
        environment,
        metadata: {},
        template: {
            Description: "The CDK Toolkit Stack. It cas created by `cdk bootstrap` and manages resources necessary for managing your Cloud Applications with AWS CDK.",
            Resources: {
                StagingBucket: {
                    Type: "AWS::S3::Bucket",
                    Properties: {
                        AccessControl: "Private",
                        BucketEncryption: { ServerSideEncryptionConfiguration: [{ ServerSideEncryptionByDefault: { SSEAlgorithm: "aws:kms" } }] }
                    }
                }
            },
            Outputs: {
                [exports.BUCKET_NAME_OUTPUT]: {
                    Description: "The name of the S3 bucket owned by the CDK toolkit stack",
                    Value: { Ref: "StagingBucket" },
                    Export: { Name: "CDKToolkit:BucketName" }
                },
                [exports.BUCKET_DOMAIN_NAME_OUTPUT]: {
                    Description: "The domain name of the S3 bucket owned by the CDK toolkit stack",
                    Value: { "Fn::GetAtt": ["StagingBucket", "DomainName"] },
                    Export: { Name: "CDKToolkit:BucketDomainName" }
                }
            }
        },
        name: toolkitStackName,
    };
    return await deploy_stack_1.deployStack({ stack: synthesizedStack, sdk: aws, roleArn });
}
exports.bootstrapEnvironment = bootstrapEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsaURBQWdFO0FBR2hFLGlDQUFpQztBQUVwQixRQUFBLGtCQUFrQixHQUFHLFlBQVksQ0FBQztBQUNsQyxRQUFBLHlCQUF5QixHQUFHLGtCQUFrQixDQUFDO0FBRXJELEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxXQUF3QixFQUFFLEdBQVEsRUFBRSxnQkFBd0IsRUFBRSxPQUEyQjtJQUNsSSxNQUFNLGdCQUFnQixHQUFxQjtRQUN6QyxXQUFXO1FBQ1gsUUFBUSxFQUFFLEVBQUc7UUFDYixRQUFRLEVBQUU7WUFDUixXQUFXLEVBQUUsNklBQTZJO1lBQzFKLFNBQVMsRUFBRTtnQkFDVCxhQUFhLEVBQUU7b0JBQ2YsSUFBSSxFQUFFLGlCQUFpQjtvQkFDdkIsVUFBVSxFQUFFO3dCQUNWLGFBQWEsRUFBRSxTQUFTO3dCQUN4QixnQkFBZ0IsRUFBRSxFQUFFLGlDQUFpQyxFQUFFLENBQUUsRUFBRSw2QkFBNkIsRUFBRSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFFLEVBQUU7cUJBQzVIO2lCQUNBO2FBQ0Y7WUFDRCxPQUFPLEVBQUU7Z0JBQ1AsQ0FBQywwQkFBa0IsQ0FBQyxFQUFFO29CQUN0QixXQUFXLEVBQUUsMERBQTBEO29CQUN2RSxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFO29CQUMvQixNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUU7aUJBQ3hDO2dCQUNELENBQUMsaUNBQXlCLENBQUMsRUFBRTtvQkFDN0IsV0FBVyxFQUFFLGlFQUFpRTtvQkFDOUUsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUUsZUFBZSxFQUFFLFlBQVksQ0FBRSxFQUFFO29CQUMxRCxNQUFNLEVBQUUsRUFBRSxJQUFJLEVBQUUsNkJBQTZCLEVBQUU7aUJBQzlDO2FBQ0Y7U0FDRjtRQUNELElBQUksRUFBRSxnQkFBZ0I7S0FDdkIsQ0FBQztJQUNGLE9BQU8sTUFBTSwwQkFBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUMzRSxDQUFDO0FBL0JELG9EQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudmlyb25tZW50LCBTeW50aGVzaXplZFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IGRlcGxveVN0YWNrLCBEZXBsb3lTdGFja1Jlc3VsdCB9IGZyb20gJy4vZGVwbG95LXN0YWNrJztcbmltcG9ydCB7IFNESyB9IGZyb20gJy4vdXRpbC9zZGsnO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZTptYXgtbGluZS1sZW5ndGhcblxuZXhwb3J0IGNvbnN0IEJVQ0tFVF9OQU1FX09VVFBVVCA9ICdCdWNrZXROYW1lJztcbmV4cG9ydCBjb25zdCBCVUNLRVRfRE9NQUlOX05BTUVfT1VUUFVUID0gJ0J1Y2tldERvbWFpbk5hbWUnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwRW52aXJvbm1lbnQoZW52aXJvbm1lbnQ6IEVudmlyb25tZW50LCBhd3M6IFNESywgdG9vbGtpdFN0YWNrTmFtZTogc3RyaW5nLCByb2xlQXJuOiBzdHJpbmcgfCB1bmRlZmluZWQpOiBQcm9taXNlPERlcGxveVN0YWNrUmVzdWx0PiB7XG4gIGNvbnN0IHN5bnRoZXNpemVkU3RhY2s6IFN5bnRoZXNpemVkU3RhY2sgPSB7XG4gICAgZW52aXJvbm1lbnQsXG4gICAgbWV0YWRhdGE6IHsgfSxcbiAgICB0ZW1wbGF0ZToge1xuICAgICAgRGVzY3JpcHRpb246IFwiVGhlIENESyBUb29sa2l0IFN0YWNrLiBJdCBjYXMgY3JlYXRlZCBieSBgY2RrIGJvb3RzdHJhcGAgYW5kIG1hbmFnZXMgcmVzb3VyY2VzIG5lY2Vzc2FyeSBmb3IgbWFuYWdpbmcgeW91ciBDbG91ZCBBcHBsaWNhdGlvbnMgd2l0aCBBV1MgQ0RLLlwiLFxuICAgICAgUmVzb3VyY2VzOiB7XG4gICAgICAgIFN0YWdpbmdCdWNrZXQ6IHtcbiAgICAgICAgVHlwZTogXCJBV1M6OlMzOjpCdWNrZXRcIixcbiAgICAgICAgUHJvcGVydGllczoge1xuICAgICAgICAgIEFjY2Vzc0NvbnRyb2w6IFwiUHJpdmF0ZVwiLFxuICAgICAgICAgIEJ1Y2tldEVuY3J5cHRpb246IHsgU2VydmVyU2lkZUVuY3J5cHRpb25Db25maWd1cmF0aW9uOiBbIHsgU2VydmVyU2lkZUVuY3J5cHRpb25CeURlZmF1bHQ6IHsgU1NFQWxnb3JpdGhtOiBcImF3czprbXNcIiB9IH0gXSB9XG4gICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIE91dHB1dHM6IHtcbiAgICAgICAgW0JVQ0tFVF9OQU1FX09VVFBVVF06IHtcbiAgICAgICAgRGVzY3JpcHRpb246IFwiVGhlIG5hbWUgb2YgdGhlIFMzIGJ1Y2tldCBvd25lZCBieSB0aGUgQ0RLIHRvb2xraXQgc3RhY2tcIixcbiAgICAgICAgVmFsdWU6IHsgUmVmOiBcIlN0YWdpbmdCdWNrZXRcIiB9LFxuICAgICAgICBFeHBvcnQ6IHsgTmFtZTogXCJDREtUb29sa2l0OkJ1Y2tldE5hbWVcIiB9XG4gICAgICAgIH0sXG4gICAgICAgIFtCVUNLRVRfRE9NQUlOX05BTUVfT1VUUFVUXToge1xuICAgICAgICBEZXNjcmlwdGlvbjogXCJUaGUgZG9tYWluIG5hbWUgb2YgdGhlIFMzIGJ1Y2tldCBvd25lZCBieSB0aGUgQ0RLIHRvb2xraXQgc3RhY2tcIixcbiAgICAgICAgVmFsdWU6IHsgXCJGbjo6R2V0QXR0XCI6IFsgXCJTdGFnaW5nQnVja2V0XCIsIFwiRG9tYWluTmFtZVwiIF0gfSxcbiAgICAgICAgRXhwb3J0OiB7IE5hbWU6IFwiQ0RLVG9vbGtpdDpCdWNrZXREb21haW5OYW1lXCIgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBuYW1lOiB0b29sa2l0U3RhY2tOYW1lLFxuICB9O1xuICByZXR1cm4gYXdhaXQgZGVwbG95U3RhY2soeyBzdGFjazogc3ludGhlc2l6ZWRTdGFjaywgc2RrOiBhd3MsIHJvbGVBcm4gfSk7XG59XG4iXX0=