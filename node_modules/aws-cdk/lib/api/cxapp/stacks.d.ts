import cxapi = require('@aws-cdk/cx-api');
import yargs = require('yargs');
import { Configuration } from '../../settings';
import { SDK } from '../util/sdk';
/**
 * Routines to get stacks from an app
 *
 * In a class because it shares some global state
 */
export declare class AppStacks {
    private readonly argv;
    private readonly configuration;
    private readonly aws;
    /**
     * Since app execution basically always synthesizes all the stacks,
     * we can invoke it once and cache the response for subsequent calls.
     */
    private cachedResponse?;
    constructor(argv: yargs.Arguments, configuration: Configuration, aws: SDK);
    /**
     * List all stacks in the CX and return the selected ones
     *
     * It's an error if there are no stacks to select, or if one of the requested parameters
     * refers to a nonexistant stack.
     */
    selectStacks(...selectors: string[]): Promise<cxapi.SynthesizedStack[]>;
    listStacks(): Promise<cxapi.SynthesizedStack[]>;
    /**
     * Synthesize a single stack
     */
    synthesizeStack(stackName: string): Promise<cxapi.SynthesizedStack>;
    /**
     * Synthesize a set of stacks
     */
    synthesizeStacks(): Promise<cxapi.SynthesizeResponse>;
    /**
     * Extracts 'aws:cdk:warning|info|error' metadata entries from the stack synthesis
     */
    private processMessages;
    private printMessage;
}
/**
 * Combine the names of a set of stacks using a comma
 */
export declare function listStackNames(stacks: cxapi.SynthesizedStack[]): string;
