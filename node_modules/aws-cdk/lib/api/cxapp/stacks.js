"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const minimatch = require("minimatch");
const contextproviders = require("../../context-providers");
const logging_1 = require("../../logging");
const cdkUtil = require("../../util");
const exec_1 = require("./exec");
/**
 * Routines to get stacks from an app
 *
 * In a class because it shares some global state
 */
class AppStacks {
    constructor(argv, configuration, aws) {
        this.argv = argv;
        this.configuration = configuration;
        this.aws = aws;
    }
    /**
     * List all stacks in the CX and return the selected ones
     *
     * It's an error if there are no stacks to select, or if one of the requested parameters
     * refers to a nonexistant stack.
     */
    async selectStacks(...selectors) {
        selectors = selectors.filter(s => s != null); // filter null/undefined
        const stacks = await this.listStacks();
        if (stacks.length === 0) {
            throw new Error('This app contains no stacks');
        }
        if (selectors.length === 0) {
            logging_1.debug('Stack name not specified, so defaulting to all available stacks: ' + listStackNames(stacks));
            return stacks;
        }
        // For every selector argument, pick stacks from the list.
        const matched = new Set();
        for (const pattern of selectors) {
            let found = false;
            for (const stack of stacks) {
                if (minimatch(stack.name, pattern)) {
                    matched.add(stack.name);
                    found = true;
                }
            }
            if (!found) {
                throw new Error(`No stack found matching '${pattern}'. Use "list" to print manifest`);
            }
        }
        return stacks.filter(s => matched.has(s.name));
    }
    async listStacks() {
        const response = await this.synthesizeStacks();
        return response.stacks;
    }
    /**
     * Synthesize a single stack
     */
    async synthesizeStack(stackName) {
        const resp = await this.synthesizeStacks();
        const stack = resp.stacks.find(s => s.name === stackName);
        if (!stack) {
            throw new Error(`Stack ${stackName} not found`);
        }
        return stack;
    }
    /**
     * Synthesize a set of stacks
     */
    async synthesizeStacks() {
        if (this.cachedResponse) {
            return this.cachedResponse;
        }
        const trackVersions = this.configuration.combined.get(['versionReporting']);
        // We may need to run the cloud executable multiple times in order to satisfy all missing context
        while (true) {
            const response = await exec_1.execProgram(this.aws, this.configuration.combined);
            const allMissing = cdkUtil.deepMerge(...response.stacks.map(s => s.missing));
            if (!cdkUtil.isEmpty(allMissing)) {
                logging_1.debug(`Some context information is missing. Fetching...`);
                await contextproviders.provideContextValues(allMissing, this.configuration.projectConfig, this.aws);
                // Cache the new context to disk
                await this.configuration.saveProjectConfig();
                continue;
            }
            const { errors, warnings } = this.processMessages(response);
            if (errors && !this.argv.ignoreErrors) {
                throw new Error('Found errors');
            }
            if (this.argv.strict && warnings) {
                throw new Error('Found warnings (--strict mode)');
            }
            if (trackVersions && response.runtime) {
                const modules = formatModules(response.runtime);
                for (const stack of response.stacks) {
                    if (!stack.template.Resources) {
                        stack.template.Resources = {};
                    }
                    if (!stack.template.Resources.CDKMetadata) {
                        stack.template.Resources.CDKMetadata = {
                            Type: 'AWS::CDK::Metadata',
                            Properties: {
                                Modules: modules
                            }
                        };
                    }
                    else {
                        logging_1.warning(`The stack ${stack.name} already includes a CDKMetadata resource`);
                    }
                }
            }
            // All good, return
            this.cachedResponse = response;
            return response;
            function formatModules(runtime) {
                const modules = new Array();
                // inject toolkit version to list of modules
                const toolkitVersion = require('../../../package.json').version;
                modules.push(`aws-cdk=${toolkitVersion}`);
                for (const key of Object.keys(runtime.libraries).sort()) {
                    modules.push(`${key}=${runtime.libraries[key]}`);
                }
                return modules.join(',');
            }
        }
    }
    /**
     * Extracts 'aws:cdk:warning|info|error' metadata entries from the stack synthesis
     */
    processMessages(stacks) {
        let warnings = false;
        let errors = false;
        for (const stack of stacks.stacks) {
            for (const id of Object.keys(stack.metadata)) {
                const metadata = stack.metadata[id];
                for (const entry of metadata) {
                    switch (entry.type) {
                        case cxapi.WARNING_METADATA_KEY:
                            warnings = true;
                            this.printMessage(logging_1.warning, 'Warning', id, entry);
                            break;
                        case cxapi.ERROR_METADATA_KEY:
                            errors = true;
                            this.printMessage(logging_1.error, 'Error', id, entry);
                            break;
                        case cxapi.INFO_METADATA_KEY:
                            this.printMessage(logging_1.print, 'Info', id, entry);
                            break;
                    }
                }
            }
        }
        return { warnings, errors };
    }
    printMessage(logFn, prefix, id, entry) {
        logFn(`[${prefix} at ${id}] ${entry.data}`);
        if (this.argv.trace || this.argv.verbose) {
            logFn(`  ${entry.trace.join('\n  ')}`);
        }
    }
}
exports.AppStacks = AppStacks;
/**
 * Combine the names of a set of stacks using a comma
 */
function listStackNames(stacks) {
    return stacks.map(s => s.name).join(', ');
}
exports.listStackNames = listStackNames;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2tzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhY2tzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTBDO0FBQzFDLHVDQUF3QztBQUV4Qyw0REFBNkQ7QUFDN0QsMkNBQTZEO0FBRTdELHNDQUF1QztBQUV2QyxpQ0FBcUM7QUFFckM7Ozs7R0FJRztBQUNILE1BQWEsU0FBUztJQU9wQixZQUE2QixJQUFxQixFQUFtQixhQUE0QixFQUFtQixHQUFRO1FBQS9GLFNBQUksR0FBSixJQUFJLENBQWlCO1FBQW1CLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQW1CLFFBQUcsR0FBSCxHQUFHLENBQUs7SUFDNUgsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLFNBQW1CO1FBQzlDLFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsd0JBQXdCO1FBRXRFLE1BQU0sTUFBTSxHQUE2QixNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNqRSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDMUIsZUFBSyxDQUFDLG1FQUFtRSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3BHLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFFRCwwREFBMEQ7UUFDMUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUNsQyxLQUFLLE1BQU0sT0FBTyxJQUFJLFNBQVMsRUFBRTtZQUMvQixJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7WUFFbEIsS0FBSyxNQUFNLEtBQUssSUFBSSxNQUFNLEVBQUU7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LENBQUMsS0FBMEIsRUFBRSxNQUFjLEVBQUUsRUFBVSxFQUFFLEtBQTBCO1FBQ3JHLEtBQUssQ0FBQyxJQUFJLE1BQU0sT0FBTyxFQUFFLEtBQUssS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFFNUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUN4QyxLQUFLLENBQUMsS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDeEM7SUFDSCxDQUFDO0NBQ0Y7QUFoTEQsOEJBZ0xDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixjQUFjLENBQUMsTUFBZ0M7SUFDN0QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRkQsd0NBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3hhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCBtaW5pbWF0Y2ggPSByZXF1aXJlKCdtaW5pbWF0Y2gnKTtcbmltcG9ydCB5YXJncyA9IHJlcXVpcmUoJ3lhcmdzJyk7XG5pbXBvcnQgY29udGV4dHByb3ZpZGVycyA9IHJlcXVpcmUoJy4uLy4uL2NvbnRleHQtcHJvdmlkZXJzJyk7XG5pbXBvcnQgeyBkZWJ1ZywgZXJyb3IsIHByaW50LCB3YXJuaW5nIH0gZnJvbSAnLi4vLi4vbG9nZ2luZyc7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uIH0gZnJvbSAnLi4vLi4vc2V0dGluZ3MnO1xuaW1wb3J0IGNka1V0aWwgPSByZXF1aXJlKCcuLi8uLi91dGlsJyk7XG5pbXBvcnQgeyBTREsgfSBmcm9tICcuLi91dGlsL3Nkayc7XG5pbXBvcnQgeyBleGVjUHJvZ3JhbSB9IGZyb20gJy4vZXhlYyc7XG5cbi8qKlxuICogUm91dGluZXMgdG8gZ2V0IHN0YWNrcyBmcm9tIGFuIGFwcFxuICpcbiAqIEluIGEgY2xhc3MgYmVjYXVzZSBpdCBzaGFyZXMgc29tZSBnbG9iYWwgc3RhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEFwcFN0YWNrcyB7XG4gIC8qKlxuICAgKiBTaW5jZSBhcHAgZXhlY3V0aW9uIGJhc2ljYWxseSBhbHdheXMgc3ludGhlc2l6ZXMgYWxsIHRoZSBzdGFja3MsXG4gICAqIHdlIGNhbiBpbnZva2UgaXQgb25jZSBhbmQgY2FjaGUgdGhlIHJlc3BvbnNlIGZvciBzdWJzZXF1ZW50IGNhbGxzLlxuICAgKi9cbiAgcHJpdmF0ZSBjYWNoZWRSZXNwb25zZT86IGN4YXBpLlN5bnRoZXNpemVSZXNwb25zZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFyZ3Y6IHlhcmdzLkFyZ3VtZW50cywgcHJpdmF0ZSByZWFkb25seSBjb25maWd1cmF0aW9uOiBDb25maWd1cmF0aW9uLCBwcml2YXRlIHJlYWRvbmx5IGF3czogU0RLKSB7XG4gIH1cblxuICAvKipcbiAgICogTGlzdCBhbGwgc3RhY2tzIGluIHRoZSBDWCBhbmQgcmV0dXJuIHRoZSBzZWxlY3RlZCBvbmVzXG4gICAqXG4gICAqIEl0J3MgYW4gZXJyb3IgaWYgdGhlcmUgYXJlIG5vIHN0YWNrcyB0byBzZWxlY3QsIG9yIGlmIG9uZSBvZiB0aGUgcmVxdWVzdGVkIHBhcmFtZXRlcnNcbiAgICogcmVmZXJzIHRvIGEgbm9uZXhpc3RhbnQgc3RhY2suXG4gICAqL1xuICBwdWJsaWMgYXN5bmMgc2VsZWN0U3RhY2tzKC4uLnNlbGVjdG9yczogc3RyaW5nW10pOiBQcm9taXNlPGN4YXBpLlN5bnRoZXNpemVkU3RhY2tbXT4ge1xuICAgIHNlbGVjdG9ycyA9IHNlbGVjdG9ycy5maWx0ZXIocyA9PiBzICE9IG51bGwpOyAvLyBmaWx0ZXIgbnVsbC91bmRlZmluZWRcblxuICAgIGNvbnN0IHN0YWNrczogY3hhcGkuU3ludGhlc2l6ZWRTdGFja1tdID0gYXdhaXQgdGhpcy5saXN0U3RhY2tzKCk7XG4gICAgaWYgKHN0YWNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBhcHAgY29udGFpbnMgbm8gc3RhY2tzJyk7XG4gICAgfVxuXG4gICAgaWYgKHNlbGVjdG9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRlYnVnKCdTdGFjayBuYW1lIG5vdCBzcGVjaWZpZWQsIHNvIGRlZmF1bHRpbmcgdG8gYWxsIGF2YWlsYWJsZSBzdGFja3M6ICcgKyBsaXN0U3RhY2tOYW1lcyhzdGFja3MpKTtcbiAgICAgIHJldHVybiBzdGFja3M7XG4gICAgfVxuXG4gICAgLy8gRm9yIGV2ZXJ5IHNlbGVjdG9yIGFyZ3VtZW50LCBwaWNrIHN0YWNrcyBmcm9tIHRoZSBsaXN0LlxuICAgIGNvbnN0IG1hdGNoZWQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICBmb3IgKGNvbnN0IHBhdHRlcm4gb2Ygc2VsZWN0b3JzKSB7XG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcblxuICAgICAgZm9yIChjb25zdCBzdGFjayBvZiBzdGFja3MpIHtcbiAgICAgICAgaWYgKG1pbmltYXRjaChzdGFjay5uYW1lLCBwYXR0ZXJuKSkge1xuICAgICAgICAgIG1hdGNoZWQuYWRkKHN0YWNrLm5hbWUpO1xuICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gc3RhY2sgZm91bmQgbWF0Y2hpbmcgJyR7cGF0dGVybn0nLiBVc2UgXCJsaXN0XCIgdG8gcHJpbnQgbWFuaWZlc3RgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3RhY2tzLmZpbHRlcihzID0+IG1hdGNoZWQuaGFzKHMubmFtZSkpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGxpc3RTdGFja3MoKTogUHJvbWlzZTxjeGFwaS5TeW50aGVzaXplZFN0YWNrW10+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc3ludGhlc2l6ZVN0YWNrcygpO1xuICAgIHJldHVybiByZXNwb25zZS5zdGFja3M7XG4gIH1cblxuICAvKipcbiAgICogU3ludGhlc2l6ZSBhIHNpbmdsZSBzdGFja1xuICAgKi9cbiAgcHVibGljIGFzeW5jIHN5bnRoZXNpemVTdGFjayhzdGFja05hbWU6IHN0cmluZyk6IFByb21pc2U8Y3hhcGkuU3ludGhlc2l6ZWRTdGFjaz4ge1xuICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLnN5bnRoZXNpemVTdGFja3MoKTtcbiAgICBjb25zdCBzdGFjayA9IHJlc3Auc3RhY2tzLmZpbmQocyA9PiBzLm5hbWUgPT09IHN0YWNrTmFtZSk7XG4gICAgaWYgKCFzdGFjaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTdGFjayAke3N0YWNrTmFtZX0gbm90IGZvdW5kYCk7XG4gICAgfVxuICAgIHJldHVybiBzdGFjaztcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW50aGVzaXplIGEgc2V0IG9mIHN0YWNrc1xuICAgKi9cbiAgcHVibGljIGFzeW5jIHN5bnRoZXNpemVTdGFja3MoKTogUHJvbWlzZTxjeGFwaS5TeW50aGVzaXplUmVzcG9uc2U+IHtcbiAgICBpZiAodGhpcy5jYWNoZWRSZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkUmVzcG9uc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhY2tWZXJzaW9uczogYm9vbGVhbiA9IHRoaXMuY29uZmlndXJhdGlvbi5jb21iaW5lZC5nZXQoWyd2ZXJzaW9uUmVwb3J0aW5nJ10pO1xuXG4gICAgLy8gV2UgbWF5IG5lZWQgdG8gcnVuIHRoZSBjbG91ZCBleGVjdXRhYmxlIG11bHRpcGxlIHRpbWVzIGluIG9yZGVyIHRvIHNhdGlzZnkgYWxsIG1pc3NpbmcgY29udGV4dFxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCByZXNwb25zZTogY3hhcGkuU3ludGhlc2l6ZVJlc3BvbnNlID0gYXdhaXQgZXhlY1Byb2dyYW0odGhpcy5hd3MsIHRoaXMuY29uZmlndXJhdGlvbi5jb21iaW5lZCk7XG4gICAgICBjb25zdCBhbGxNaXNzaW5nID0gY2RrVXRpbC5kZWVwTWVyZ2UoLi4ucmVzcG9uc2Uuc3RhY2tzLm1hcChzID0+IHMubWlzc2luZykpO1xuXG4gICAgICBpZiAoIWNka1V0aWwuaXNFbXB0eShhbGxNaXNzaW5nKSkge1xuICAgICAgICBkZWJ1ZyhgU29tZSBjb250ZXh0IGluZm9ybWF0aW9uIGlzIG1pc3NpbmcuIEZldGNoaW5nLi4uYCk7XG5cbiAgICAgICAgYXdhaXQgY29udGV4dHByb3ZpZGVycy5wcm92aWRlQ29udGV4dFZhbHVlcyhhbGxNaXNzaW5nLCB0aGlzLmNvbmZpZ3VyYXRpb24ucHJvamVjdENvbmZpZywgdGhpcy5hd3MpO1xuXG4gICAgICAgIC8vIENhY2hlIHRoZSBuZXcgY29udGV4dCB0byBkaXNrXG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlndXJhdGlvbi5zYXZlUHJvamVjdENvbmZpZygpO1xuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB7IGVycm9ycywgd2FybmluZ3MgfSA9IHRoaXMucHJvY2Vzc01lc3NhZ2VzKHJlc3BvbnNlKTtcblxuICAgICAgaWYgKGVycm9ycyAmJiAhdGhpcy5hcmd2Lmlnbm9yZUVycm9ycykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIGVycm9ycycpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hcmd2LnN0cmljdCAmJiB3YXJuaW5ncykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvdW5kIHdhcm5pbmdzICgtLXN0cmljdCBtb2RlKScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHJhY2tWZXJzaW9ucyAmJiByZXNwb25zZS5ydW50aW1lKSB7XG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBmb3JtYXRNb2R1bGVzKHJlc3BvbnNlLnJ1bnRpbWUpO1xuICAgICAgICBmb3IgKGNvbnN0IHN0YWNrIG9mIHJlc3BvbnNlLnN0YWNrcykge1xuICAgICAgICAgIGlmICghc3RhY2sudGVtcGxhdGUuUmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBzdGFjay50ZW1wbGF0ZS5SZXNvdXJjZXMgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFzdGFjay50ZW1wbGF0ZS5SZXNvdXJjZXMuQ0RLTWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHN0YWNrLnRlbXBsYXRlLlJlc291cmNlcy5DREtNZXRhZGF0YSA9IHtcbiAgICAgICAgICAgICAgVHlwZTogJ0FXUzo6Q0RLOjpNZXRhZGF0YScsXG4gICAgICAgICAgICAgIFByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICBNb2R1bGVzOiBtb2R1bGVzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm5pbmcoYFRoZSBzdGFjayAke3N0YWNrLm5hbWV9IGFscmVhZHkgaW5jbHVkZXMgYSBDREtNZXRhZGF0YSByZXNvdXJjZWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBbGwgZ29vZCwgcmV0dXJuXG4gICAgICB0aGlzLmNhY2hlZFJlc3BvbnNlID0gcmVzcG9uc2U7XG4gICAgICByZXR1cm4gcmVzcG9uc2U7XG5cbiAgICAgIGZ1bmN0aW9uIGZvcm1hdE1vZHVsZXMocnVudGltZTogY3hhcGkuQXBwUnVudGltZSk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IG1vZHVsZXMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gICAgICAgIC8vIGluamVjdCB0b29sa2l0IHZlcnNpb24gdG8gbGlzdCBvZiBtb2R1bGVzXG4gICAgICAgIGNvbnN0IHRvb2xraXRWZXJzaW9uID0gcmVxdWlyZSgnLi4vLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbjtcbiAgICAgICAgbW9kdWxlcy5wdXNoKGBhd3MtY2RrPSR7dG9vbGtpdFZlcnNpb259YCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMocnVudGltZS5saWJyYXJpZXMpLnNvcnQoKSkge1xuICAgICAgICAgIG1vZHVsZXMucHVzaChgJHtrZXl9PSR7cnVudGltZS5saWJyYXJpZXNba2V5XX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbW9kdWxlcy5qb2luKCcsJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzICdhd3M6Y2RrOndhcm5pbmd8aW5mb3xlcnJvcicgbWV0YWRhdGEgZW50cmllcyBmcm9tIHRoZSBzdGFjayBzeW50aGVzaXNcbiAgICovXG4gIHByaXZhdGUgcHJvY2Vzc01lc3NhZ2VzKHN0YWNrczogY3hhcGkuU3ludGhlc2l6ZVJlc3BvbnNlKTogeyBlcnJvcnM6IGJvb2xlYW4sIHdhcm5pbmdzOiBib29sZWFuIH0ge1xuICAgIGxldCB3YXJuaW5ncyA9IGZhbHNlO1xuICAgIGxldCBlcnJvcnMgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHN0YWNrIG9mIHN0YWNrcy5zdGFja3MpIHtcbiAgICAgIGZvciAoY29uc3QgaWQgb2YgT2JqZWN0LmtleXMoc3RhY2subWV0YWRhdGEpKSB7XG4gICAgICAgIGNvbnN0IG1ldGFkYXRhID0gc3RhY2subWV0YWRhdGFbaWRdO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIG1ldGFkYXRhKSB7XG4gICAgICAgICAgc3dpdGNoIChlbnRyeS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGN4YXBpLldBUk5JTkdfTUVUQURBVEFfS0VZOlxuICAgICAgICAgICAgICB3YXJuaW5ncyA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMucHJpbnRNZXNzYWdlKHdhcm5pbmcsICdXYXJuaW5nJywgaWQsIGVudHJ5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGN4YXBpLkVSUk9SX01FVEFEQVRBX0tFWTpcbiAgICAgICAgICAgICAgZXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5wcmludE1lc3NhZ2UoZXJyb3IsICdFcnJvcicsIGlkLCBlbnRyeSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBjeGFwaS5JTkZPX01FVEFEQVRBX0tFWTpcbiAgICAgICAgICAgICAgdGhpcy5wcmludE1lc3NhZ2UocHJpbnQsICdJbmZvJywgaWQsIGVudHJ5KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHdhcm5pbmdzLCBlcnJvcnMgfTtcbiAgfVxuXG4gIHByaXZhdGUgcHJpbnRNZXNzYWdlKGxvZ0ZuOiAoczogc3RyaW5nKSA9PiB2b2lkLCBwcmVmaXg6IHN0cmluZywgaWQ6IHN0cmluZywgZW50cnk6IGN4YXBpLk1ldGFkYXRhRW50cnkpIHtcbiAgICBsb2dGbihgWyR7cHJlZml4fSBhdCAke2lkfV0gJHtlbnRyeS5kYXRhfWApO1xuXG4gICAgaWYgKHRoaXMuYXJndi50cmFjZSB8fCB0aGlzLmFyZ3YudmVyYm9zZSkge1xuICAgICAgbG9nRm4oYCAgJHtlbnRyeS50cmFjZS5qb2luKCdcXG4gICcpfWApO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENvbWJpbmUgdGhlIG5hbWVzIG9mIGEgc2V0IG9mIHN0YWNrcyB1c2luZyBhIGNvbW1hXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaXN0U3RhY2tOYW1lcyhzdGFja3M6IGN4YXBpLlN5bnRoZXNpemVkU3RhY2tbXSk6IHN0cmluZyB7XG4gIHJldHVybiBzdGFja3MubWFwKHMgPT4gcy5uYW1lKS5qb2luKCcsICcpO1xufVxuIl19