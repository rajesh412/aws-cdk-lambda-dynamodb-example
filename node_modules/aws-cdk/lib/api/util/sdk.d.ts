import { Environment } from '@aws-cdk/cx-api';
import AWS = require('aws-sdk');
import { Mode } from '../aws-auth/credentials';
export interface SDKOptions {
    /**
     * Profile name to use
     *
     * @default No profile
     */
    profile?: string;
    /**
     * Proxy address to use
     *
     * @default No proxy
     */
    proxyAddress?: string;
    /**
     * Whether we should try instance credentials
     *
     * True/false to force/disable. Default is to guess.
     *
     * @default Automatically determine.
     */
    ec2creds?: boolean;
}
/**
 * Source for SDK client objects
 *
 * Credentials are first obtained from the SDK defaults (using environment variables and the
 * ~/.aws/{config,credentials} files).
 *
 * If those don't suffice, a list of CredentialProviderSources is interrogated for access
 * to the requested account.
 */
export declare class SDK {
    private readonly defaultAwsAccount;
    private readonly credentialsCache;
    private readonly profile?;
    constructor(options: SDKOptions);
    cloudFormation(environment: Environment, mode: Mode): Promise<AWS.CloudFormation>;
    ec2(awsAccountId: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.EC2>;
    ssm(awsAccountId: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.SSM>;
    s3(environment: Environment, mode: Mode): Promise<AWS.S3>;
    route53(awsAccountId: string | undefined, region: string | undefined, mode: Mode): Promise<AWS.Route53>;
    ecr(environment: Environment, mode: Mode): Promise<AWS.ECR>;
    defaultRegion(): Promise<string | undefined>;
    defaultAccount(): Promise<string | undefined>;
}
