"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../../logging");
const stack_status_1 = require("./cloudformation/stack-status");
/**
 * Describe a changeset in CloudFormation, regardless of it's current state.
 *
 * @param cfn       a CloudFormation client
 * @param stackName   the name of the Stack the ChangeSet belongs to
 * @param changeSetName the name of the ChangeSet
 *
 * @returns       CloudFormation information about the ChangeSet
 */
async function describeChangeSet(cfn, stackName, changeSetName) {
    const response = await cfn.describeChangeSet({ StackName: stackName, ChangeSetName: changeSetName }).promise();
    return response;
}
/**
 * Describes a stack in CloudFormation, regardless of it's current state.
 *
 * @param cfn     a CloudFormation client
 * @param stackName the name of the stack to be described
 *
 * @returns +undefined+ if the stack does not exist or is deleted, and the CloudFormation stack description otherwise
 */
async function describeStack(cfn, stackName) {
    try {
        const response = await cfn.describeStacks({ StackName: stackName }).promise();
        return response.Stacks && response.Stacks[0];
    }
    catch (e) {
        if (e.code === 'ValidationError' && e.message === `Stack with id ${stackName} does not exist`) {
            return undefined;
        }
        throw e;
    }
}
exports.describeStack = describeStack;
/**
 * Checks whether a stack exists in CloudFormation.
 *
 * @param cfn     a CloudFormation client
 * @param stackName the name of the stack to be checked for
 *
 * @returns     +true+ if the stack exists, regardless of it's current state
 */
async function stackExists(cfn, stackName) {
    const description = await describeStack(cfn, stackName);
    return description !== undefined;
}
exports.stackExists = stackExists;
/**
 * Checks whether a stack has failed creation in CloudFormation. This is identified by the current stack Status being
 * ``ROLLBACK_COMPLETE``.
 *
 * @param cfn       a CloudFormation client
 * @param stackName the name of the stack to be checked for
 *
 * @returns +true+ if the stack exists and is in failed-creation state.
 */
async function stackFailedCreating(cfn, stackName) {
    const description = await describeStack(cfn, stackName);
    return description != null && description.StackStatus === 'ROLLBACK_COMPLETE';
}
exports.stackFailedCreating = stackFailedCreating;
/**
 * Waits for a function to return non-+undefined+ before returning.
 *
 * @param valueProvider a function that will return a value that is not +undefined+ once the wait should be over
 * @param timeout     the time to wait between two calls to +valueProvider+
 *
 * @returns       the value that was returned by +valueProvider+
 */
async function waitFor(valueProvider, timeout = 5000) {
    while (true) {
        const result = await valueProvider();
        if (result === null) {
            return undefined;
        }
        else if (result !== undefined) {
            return result;
        }
        await new Promise(cb => setTimeout(cb, timeout));
    }
}
/**
 * Waits for a ChangeSet to be available for triggering a StackUpdate.
 *
 * @param cfn       a CloudFormation client
 * @param stackName   the name of the Stack that the ChangeSet belongs to
 * @param changeSetName the name of the ChangeSet
 *
 * @returns       the CloudFormation description of the ChangeSet
 */
// tslint:disable-next-line:max-line-length
async function waitForChangeSet(cfn, stackName, changeSetName) {
    logging_1.debug('Waiting for changeset %s on stack %s to finish creating...', changeSetName, stackName);
    return waitFor(async () => {
        const description = await describeChangeSet(cfn, stackName, changeSetName);
        // The following doesn't use a switch because tsc will not allow fall-through, UNLESS it is allows
        // EVERYWHERE that uses this library directly or indirectly, which is undesirable.
        if (description.Status === 'CREATE_PENDING' || description.Status === 'CREATE_IN_PROGRESS') {
            logging_1.debug('Changeset %s on stack %s is still creating', changeSetName, stackName);
            return undefined;
        }
        else if (description.Status === 'CREATE_COMPLETE') {
            return description;
        }
        else if (description.Status === 'FAILED') {
            if (description.StatusReason && description.StatusReason.startsWith('The submitted information didn\'t contain changes.')) {
                return description;
            }
        }
        // tslint:disable-next-line:max-line-length
        throw new Error(`Failed to create ChangeSet ${changeSetName} on ${stackName}: ${description.Status || 'NO_STATUS'}, ${description.StatusReason || 'no reason provided'}`);
    });
}
exports.waitForChangeSet = waitForChangeSet;
/**
 * Waits for a CloudFormation stack to stabilize in a complete/available state.
 *
 * @param cfn        a CloudFormation client
 * @param stackName      the name of the stack to wait for
 * @param failOnDeletedStack whether to fail if the awaited stack is deleted.
 *
 * @returns     the CloudFormation description of the stabilized stack
 */
async function waitForStack(cfn, stackName, failOnDeletedStack = true) {
    logging_1.debug('Waiting for stack %s to finish creating or updating...', stackName);
    return waitFor(async () => {
        const description = await describeStack(cfn, stackName);
        if (!description) {
            logging_1.debug('Stack %s does not exist', stackName);
            return null;
        }
        const status = stack_status_1.StackStatus.fromStackDescription(description);
        if (!status.isStable) {
            logging_1.debug('Stack %s is still not stable (%s)', stackName, status);
            return undefined;
        }
        if (status.isCreationFailure) {
            throw new Error(`The stack named ${stackName} failed creation, it may need to be manually deleted from the AWS console: ${status}`);
        }
        else if (!status.isSuccess) {
            throw new Error(`The stack named ${stackName} is in a failed state: ${status}`);
        }
        else if (status.isDeleted) {
            if (failOnDeletedStack) {
                throw new Error(`The stack named ${stackName} was deleted`);
            }
            return undefined;
        }
        return description;
    });
}
exports.waitForStack = waitForStack;
//# sourceMappingURL=data:application/json;base64,