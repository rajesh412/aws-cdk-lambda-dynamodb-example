"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const util = require("util");
const logging_1 = require("../../../logging");
class StackActivityMonitor {
    constructor(cfn, stackName, stack, resourcesTotal) {
        this.cfn = cfn;
        this.stackName = stackName;
        this.stack = stack;
        this.resourcesTotal = resourcesTotal;
        this.active = false;
        this.activity = {};
        /**
         * Number of ms to wait between pings
         */
        this.tickSleep = 5000;
        /**
         * Number of ms to wait between pagination calls
         */
        this.pageSleep = 500;
        /**
         * Number of ms of change absence before we tell the user about the resources that are currently in progress.
         */
        this.inProgressDelay = 30000;
        /**
         * Determines which events not to display
         */
        this.startTime = Date.now();
        /**
         * A list of resource IDs which are currently being processed
         */
        this.resourcesInProgress = new Set();
        /**
         * Count of resources that have reported a _COMPLETE status
         */
        this.resourcesDone = 0;
        /**
         * How many digits we need to represent the total count (for lining up the status reporting)
         */
        this.resourceDigits = 0;
        /**
         * Last time we printed something to the console.
         *
         * Used to measure timeout for progress reporting.
         */
        this.lastPrintTime = Date.now();
        if (this.resourcesTotal != null) {
            // +1 because the stack also emits a "COMPLETE" event at the end, and that wasn't
            // counted yet. This makes it line up with the amount of events we expect.
            this.resourcesTotal++;
            // How many digits does this number take to represent?
            this.resourceDigits = Math.ceil(Math.log10(this.resourcesTotal));
        }
        this.resourceTypeColumnWidth = calcMaxResourceTypeLength(this.stack.template);
    }
    start() {
        this.active = true;
        this.scheduleNextTick();
        return this;
    }
    async stop() {
        this.active = false;
        if (this.tickTimer) {
            clearTimeout(this.tickTimer);
        }
        if (this.readPromise) {
            // We're currently reading events, wait for it to finish and print them before continuing.
            await this.readPromise;
            this.flushEvents();
        }
    }
    scheduleNextTick() {
        if (!this.active) {
            return;
        }
        this.tickTimer = setTimeout(() => this.tick().then(), this.tickSleep);
    }
    async tick() {
        if (!this.active) {
            return;
        }
        try {
            this.readPromise = this.readEvents();
            await this.readPromise;
            this.readPromise = undefined;
            // We might have been stop()ped while the network call was in progress.
            if (!this.active) {
                return;
            }
            this.flushEvents();
        }
        catch (e) {
            logging_1.error("Error occurred while monitoring stack: %s", e);
        }
        this.scheduleNextTick();
    }
    /**
     * Flushes all unflushed events sorted by timestamp.
     */
    flushEvents() {
        Object.keys(this.activity)
            .map(a => this.activity[a])
            .filter(a => a.event.Timestamp.valueOf() > this.startTime)
            .filter(a => !a.flushed)
            .sort((lhs, rhs) => lhs.event.Timestamp.valueOf() - rhs.event.Timestamp.valueOf())
            .forEach(a => this.flushActivity(a));
        this.printInProgress();
    }
    flushActivity(activity) {
        this.rememberActivity(activity);
        this.printActivity(activity);
        activity.flushed = true;
    }
    rememberActivity(activity) {
        const status = activity.event.ResourceStatus;
        if (!status || !activity.event.LogicalResourceId) {
            return;
        }
        if (status.endsWith('_IN_PROGRESS')) {
            this.resourcesInProgress.add(activity.event.LogicalResourceId);
        }
        if (status.endsWith('_COMPLETE') || status.endsWith('_FAILED')) {
            this.resourcesInProgress.delete(activity.event.LogicalResourceId);
            this.resourcesDone++;
        }
    }
    printActivity(activity) {
        const e = activity.event;
        const color = this.colorFromStatus(e.ResourceStatus);
        const md = this.findMetadataFor(e.LogicalResourceId);
        let reasonColor = colors.cyan;
        let stackTrace = '';
        if (md && e.ResourceStatus && e.ResourceStatus.indexOf('FAILED') !== -1) {
            stackTrace = `\n\t${md.entry.trace.join('\n\t\\_ ')}`;
            reasonColor = colors.red;
        }
        let resourceName = md ? md.path.replace(/\/Resource$/, '') : (e.LogicalResourceId || '');
        resourceName = resourceName.replace(/^\//, ''); // remove "/" prefix
        // remove "<stack-name>/" prefix
        if (resourceName.startsWith(this.stackName + '/')) {
            resourceName = resourceName.substr(this.stackName.length + 1);
        }
        const logicalId = resourceName !== e.LogicalResourceId ? `(${e.LogicalResourceId}) ` : '';
        process.stderr.write(util.format(` %s | %s | %s | %s | %s %s%s%s\n`, this.progress(), new Date(e.Timestamp).toLocaleTimeString(), color(padRight(20, (e.ResourceStatus || '').substr(0, 20))), // pad left and trim
        padRight(this.resourceTypeColumnWidth, e.ResourceType || ''), color(colors.bold(resourceName)), logicalId, reasonColor(colors.bold(e.ResourceStatusReason ? e.ResourceStatusReason : '')), reasonColor(stackTrace)));
        this.lastPrintTime = Date.now();
    }
    /**
     * Report the current progress as a [34/42] string, or just [34] if the total is unknown
     */
    progress() {
        if (this.resourcesTotal == null) {
            // Don't have total, show simple count and hope the human knows
            return padLeft(3, util.format('%s', this.resourcesDone)); // max 200 resources
        }
        return util.format('%s/%s', padLeft(this.resourceDigits, this.resourcesDone.toString()), padLeft(this.resourceDigits, this.resourcesTotal != null ? this.resourcesTotal.toString() : '?'));
    }
    /**
     * If some resources are taking a while to create, notify the user about what's currently in progress
     */
    printInProgress() {
        if (Date.now() < this.lastPrintTime + this.inProgressDelay) {
            return;
        }
        if (this.resourcesInProgress.size > 0) {
            process.stderr.write(util.format('%s Currently in progress: %s\n', this.progress(), colors.bold(Array.from(this.resourcesInProgress).join(', '))));
        }
        // We cheat a bit here. To prevent printInProgress() from repeatedly triggering,
        // we set the timestamp into the future. It will be reset whenever a regular print
        // occurs, after which we can be triggered again.
        this.lastPrintTime = +Infinity;
    }
    findMetadataFor(logicalId) {
        const metadata = this.stack.metadata;
        if (!logicalId || !metadata) {
            return undefined;
        }
        for (const path of Object.keys(metadata)) {
            const entry = metadata[path].filter(e => e.type === 'aws:cdk:logicalId')
                .find(e => e.data === logicalId);
            if (entry) {
                return { entry, path };
            }
        }
        return undefined;
    }
    colorFromStatus(status) {
        if (!status) {
            return colors.reset;
        }
        if (status.indexOf('FAILED') !== -1) {
            return colors.red;
        }
        if (status.indexOf('ROLLBACK') !== -1) {
            return colors.yellow;
        }
        if (status.indexOf('COMPLETE') !== -1) {
            return colors.green;
        }
        return colors.reset;
    }
    async readEvents(nextToken) {
        const output = await this.cfn.describeStackEvents({ StackName: this.stackName, NextToken: nextToken }).promise()
            .catch(e => {
            if (e.code === 'ValidationError' && e.message === `Stack [${this.stackName}] does not exist`) {
                return undefined;
            }
            throw e;
        });
        let events = output && output.StackEvents || [];
        let allNew = true;
        // merge events into the activity and dedup by event id
        for (const e of events) {
            if (e.EventId in this.activity) {
                allNew = false;
                break;
            }
            this.activity[e.EventId] = { flushed: false, event: e };
        }
        // only read next page if all the events we read are new events. otherwise, we can rest.
        if (allNew && output && output.NextToken) {
            await new Promise(cb => setTimeout(cb, this.pageSleep));
            events = events.concat(await this.readEvents(output.NextToken));
        }
        return events;
    }
}
exports.StackActivityMonitor = StackActivityMonitor;
function padRight(n, x) {
    return x + ' '.repeat(Math.max(0, n - x.length));
}
/**
 * Infamous padLeft()
 */
function padLeft(n, x) {
    return ' '.repeat(Math.max(0, n - x.length)) + x;
}
function calcMaxResourceTypeLength(template) {
    const resources = (template && template.Resources) || {};
    let maxWidth = 0;
    for (const id of Object.keys(resources)) {
        const type = resources[id].Type || '';
        if (type.length > maxWidth) {
            maxWidth = type.length;
        }
    }
    return maxWidth;
}
//# sourceMappingURL=data:application/json;base64,