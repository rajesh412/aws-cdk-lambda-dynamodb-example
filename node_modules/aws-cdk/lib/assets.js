"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable-next-line:max-line-length
const cx_api_1 = require("@aws-cdk/cx-api");
const colors = require("colors");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const archive_1 = require("./archive");
const docker_1 = require("./docker");
const logging_1 = require("./logging");
async function prepareAssets(stack, toolkitInfo) {
    const assets = findAssets(stack.metadata);
    if (assets.length === 0) {
        return [];
    }
    if (!toolkitInfo) {
        // tslint:disable-next-line:max-line-length
        throw new Error(`This stack uses assets, so the toolkit stack must be deployed to the environment (Run "${colors.blue("cdk bootstrap " + stack.environment.name)}")`);
    }
    logging_1.debug('Preparing assets');
    let params = new Array();
    for (const asset of assets) {
        logging_1.debug(` - ${asset.path} (${asset.packaging})`);
        params = params.concat(await prepareAsset(asset, toolkitInfo));
    }
    return params;
}
exports.prepareAssets = prepareAssets;
async function prepareAsset(asset, toolkitInfo) {
    logging_1.debug('Preparing asset', JSON.stringify(asset));
    switch (asset.packaging) {
        case 'zip':
            return await prepareZipAsset(asset, toolkitInfo);
        case 'file':
            return await prepareFileAsset(asset, toolkitInfo);
        case 'container-image':
            return await docker_1.prepareContainerAsset(asset, toolkitInfo);
        default:
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unsupported packaging type: ${asset.packaging}. You might need to upgrade your aws-cdk toolkit to support this asset type.`);
    }
}
async function prepareZipAsset(asset, toolkitInfo) {
    logging_1.debug('Preparing zip asset from directory:', asset.path);
    const staging = await fs.mkdtemp(path.join(os.tmpdir(), 'cdk-assets'));
    try {
        const archiveFile = path.join(staging, 'archive.zip');
        await archive_1.zipDirectory(asset.path, archiveFile);
        logging_1.debug('zip archive:', archiveFile);
        return await prepareFileAsset(asset, toolkitInfo, archiveFile, 'application/zip');
    }
    finally {
        await fs.remove(staging);
    }
}
/**
 * @param asset The asset descriptor
 * @param toolkitInfo The toolkit stack
 * @param filePath Alternative file path to use (instead of asset.path)
 * @param contentType Content-type to use when uploading to S3 (none will be specified by default)
 */
async function prepareFileAsset(asset, toolkitInfo, filePath, contentType) {
    filePath = filePath || asset.path;
    logging_1.debug('Preparing file asset:', filePath);
    const data = await fs.readFile(filePath);
    const s3KeyPrefix = `assets/${asset.id}/`;
    const { filename, key, changed } = await toolkitInfo.uploadIfChanged(data, {
        s3KeyPrefix,
        s3KeySuffix: path.extname(filePath),
        contentType
    });
    const relativePath = path.relative(process.cwd(), asset.path);
    const s3url = `s3://${toolkitInfo.bucketName}/${key}`;
    logging_1.debug(`S3 url for ${relativePath}: ${s3url}`);
    if (changed) {
        logging_1.success(`Updated: ${colors.bold(relativePath)} (${asset.packaging})`);
    }
    else {
        logging_1.debug(`Up-to-date: ${colors.bold(relativePath)} (${asset.packaging})`);
    }
    return [
        { ParameterKey: asset.s3BucketParameter, ParameterValue: toolkitInfo.bucketName },
        { ParameterKey: asset.s3KeyParameter, ParameterValue: `${s3KeyPrefix}${cx_api_1.ASSET_PREFIX_SEPARATOR}${filename}` },
    ];
}
function findAssets(metadata) {
    const assets = new Array();
    for (const k of Object.keys(metadata)) {
        for (const entry of metadata[k]) {
            if (entry.type === cx_api_1.ASSET_METADATA) {
                assets.push(entry.data);
            }
        }
    }
    return assets;
}
//# sourceMappingURL=data:application/json;base64,