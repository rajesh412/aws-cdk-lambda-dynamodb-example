"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const os = require("os");
const fs_path = require("path");
const logging_1 = require("./logging");
const util = require("./util");
exports.DEFAULTS = 'cdk.json';
exports.PER_USER_DEFAULTS = '~/.cdk.json';
/**
 * All sources of settings combined
 */
class Configuration {
    constructor(commandLineArguments) {
        this.defaultConfig = new Settings({ versionReporting: true, pathMetadata: true });
        this.userConfig = new Settings();
        this.projectConfig = new Settings();
        this.commandLineArguments = commandLineArguments
            ? Settings.fromCommandLineArguments(commandLineArguments)
            : new Settings();
    }
    /**
     * Load all config
     */
    async load() {
        await this.userConfig.load(exports.PER_USER_DEFAULTS);
        await this.projectConfig.load(exports.DEFAULTS);
        return this;
    }
    /**
     * Save the project config
     */
    async saveProjectConfig() {
        await this.projectConfig.save(exports.DEFAULTS);
        return this;
    }
    /**
     * Log the loaded defaults
     */
    logDefaults() {
        if (!this.userConfig.empty()) {
            logging_1.debug(exports.PER_USER_DEFAULTS + ':', JSON.stringify(this.userConfig.settings, undefined, 2));
        }
        if (!this.projectConfig.empty()) {
            logging_1.debug(exports.DEFAULTS + ':', JSON.stringify(this.projectConfig.settings, undefined, 2));
        }
    }
    /**
     * Return the combined config from all config sources
     */
    get combined() {
        return this.defaultConfig.merge(this.userConfig).merge(this.projectConfig).merge(this.commandLineArguments);
    }
}
exports.Configuration = Configuration;
/**
 * A single set of settings
 */
class Settings {
    constructor(settings = {}) {
        this.settings = settings;
    }
    /**
     * Parse Settings out of CLI arguments.
     * @param argv the received CLI arguments.
     * @returns a new Settings object.
     */
    static fromCommandLineArguments(argv) {
        const context = {};
        // Turn list of KEY=VALUE strings into an object
        for (const assignment of (argv.context || [])) {
            const parts = assignment.split('=', 2);
            if (parts.length === 2) {
                logging_1.debug('CLI argument context: %s=%s', parts[0], parts[1]);
                if (parts[0].match(/^aws:.+/)) {
                    throw new Error(`User-provided context cannot use keys prefixed with 'aws:', but ${parts[0]} was provided.`);
                }
                context[parts[0]] = parts[1];
            }
            else {
                logging_1.warning('Context argument is not an assignment (key=value): %s', assignment);
            }
        }
        return new Settings({
            app: argv.app,
            browser: argv.browser,
            context,
            language: argv.language,
            pathMetadata: argv.pathMetadata,
            plugin: argv.plugin,
            requireApproval: argv.requireApproval,
            toolkitStackName: argv.toolkitStackName,
            versionReporting: argv.versionReporting,
        });
    }
    static mergeAll(...settings) {
        let ret = new Settings();
        for (const setting of settings) {
            ret = ret.merge(setting);
        }
        return ret;
    }
    async load(fileName) {
        this.settings = {};
        const expanded = expandHomeDir(fileName);
        if (await fs.pathExists(expanded)) {
            this.settings = await fs.readJson(expanded);
        }
        // See https://github.com/awslabs/aws-cdk/issues/59
        prohibitContextKey(this, 'default-account');
        prohibitContextKey(this, 'default-region');
        warnAboutContextKey(this, 'aws:');
        return this;
        function prohibitContextKey(self, key) {
            if (!self.settings.context) {
                return;
            }
            if (key in self.settings.context) {
                // tslint:disable-next-line:max-line-length
                throw new Error(`The 'context.${key}' key was found in ${fs_path.resolve(fileName)}, but it is no longer supported. Please remove it.`);
            }
        }
        function warnAboutContextKey(self, prefix) {
            if (!self.settings.context) {
                return;
            }
            for (const contextKey of Object.keys(self.settings.context)) {
                if (contextKey.startsWith(prefix)) {
                    // tslint:disable-next-line:max-line-length
                    logging_1.warning(`A reserved context key ('context.${prefix}') key was found in ${fs_path.resolve(fileName)}, it might cause surprising behavior and should be removed.`);
                }
            }
        }
    }
    async save(fileName) {
        const expanded = expandHomeDir(fileName);
        await fs.writeJson(expanded, this.settings, { spaces: 2 });
        return this;
    }
    merge(other) {
        return new Settings(util.deepMerge(this.settings, other.settings));
    }
    empty() {
        return Object.keys(this.settings).length === 0;
    }
    get(path) {
        return util.deepClone(util.deepGet(this.settings, path));
    }
    set(path, value) {
        util.deepSet(this.settings, path, value);
        return this;
    }
}
exports.Settings = Settings;
function expandHomeDir(x) {
    if (x.startsWith('~')) {
        return fs_path.join(os.homedir(), x.substr(1));
    }
    return x;
}
//# sourceMappingURL=data:application/json;base64,