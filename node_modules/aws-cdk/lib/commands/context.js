"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const logging_1 = require("../logging");
const settings_1 = require("../settings");
const util_1 = require("../util");
exports.command = 'context';
exports.describe = 'Manage cached context values';
exports.builder = {
    reset: {
        alias: 'e',
        desc: 'The context key (or its index) to reset',
        type: 'string',
        requiresArg: 'KEY'
    },
    clear: {
        desc: 'Clear all context',
        type: 'boolean',
    },
};
function handler(args) {
    args.commandHandler = realHandler;
}
exports.handler = handler;
async function realHandler(options) {
    const { configuration, args } = options;
    const context = configuration.projectConfig.get(['context']) || {};
    if (args.clear) {
        configuration.projectConfig.set(['context'], {});
        await configuration.saveProjectConfig();
        logging_1.print('All context values cleared.');
    }
    else if (args.reset) {
        invalidateContext(context, args.reset);
        configuration.projectConfig.set(['context'], context);
        await configuration.saveProjectConfig();
    }
    else {
        // List -- support '--json' flag
        if (args.json) {
            process.stdout.write(JSON.stringify(context, undefined, 2));
        }
        else {
            listContext(context);
        }
    }
    return 0;
}
exports.realHandler = realHandler;
function listContext(context) {
    const keys = contextKeys(context);
    // Print config by default
    const data = [[colors.green('#'), colors.green('Key'), colors.green('Value')]];
    for (const [i, key] of keys) {
        const jsonWithoutNewlines = JSON.stringify(context[key], undefined, 2).replace(/\s+/g, ' ');
        data.push([i, key, jsonWithoutNewlines]);
    }
    logging_1.print(`Context found in ${colors.blue(settings_1.DEFAULTS)}:\n`);
    logging_1.print(util_1.renderTable(data, { colWidths: [2, 50, 50] }));
    // tslint:disable-next-line:max-line-length
    logging_1.print(`Run ${colors.blue('cdk context --reset KEY_OR_NUMBER')} to remove a context key. It will be refreshed on the next CDK synthesis run.`);
}
function invalidateContext(context, key) {
    const i = parseInt(key, 10);
    if (`${i}` === key) {
        // Twas a number and we fully parsed it.
        key = keyByNumber(context, i);
    }
    // Unset!
    if (key in context) {
        delete context[key];
        logging_1.print(`Context value ${colors.blue(key)} reset. It will be refreshed on the next SDK synthesis run.`);
    }
    else {
        logging_1.print(`No context value with key ${colors.blue(key)}`);
    }
}
function keyByNumber(context, n) {
    for (const [i, key] of contextKeys(context)) {
        if (n === i) {
            return key;
        }
    }
    throw new Error(`No context key with number: ${n}`);
}
/**
 * Return enumerated keys in a definitive order
 */
function contextKeys(context) {
    const keys = Object.keys(context);
    keys.sort();
    return enumerate1(keys);
}
function enumerate1(xs) {
    const ret = new Array();
    let i = 1;
    for (const x of xs) {
        ret.push([i, x]);
        i += 1;
    }
    return ret;
}
//# sourceMappingURL=data:application/json;base64,