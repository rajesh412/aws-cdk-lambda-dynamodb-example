"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const childProcess = require("child_process");
const colors = require("colors/safe");
const process = require("process");
const logging_1 = require("../../lib/logging");
exports.command = 'docs';
exports.describe = 'Opens the documentation in a browser';
exports.aliases = ['doc'];
exports.builder = {
    browser: {
        alias: 'b',
        desc: 'the command to use to open the browser, using %u as a placeholder for the path of the file to open',
        type: 'string',
        default: process.platform === 'win32' ? 'start %u' : 'open %u'
    }
};
function handler(args) {
    args.commandHandler = realHandler;
}
exports.handler = handler;
async function realHandler(options) {
    const docVersion = require('../../package.json').version;
    const url = `https://awslabs.github.io/aws-cdk/versions/${docVersion}/`;
    logging_1.print(colors.green(url));
    const browserCommand = options.args.browser.replace(/%u/g, url);
    logging_1.debug(`Opening documentation ${colors.green(browserCommand)}`);
    return new Promise((resolve, _reject) => {
        childProcess.exec(browserCommand, (err, stdout, stderr) => {
            if (err) {
                logging_1.debug(`An error occurred when trying to open a browser: ${err.stack || err.message}`);
                return resolve(0);
            }
            if (stdout) {
                logging_1.debug(stdout);
            }
            if (stderr) {
                logging_1.warning(stderr);
            }
            resolve(0);
        });
    });
}
exports.realHandler = realHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw4Q0FBK0M7QUFDL0Msc0NBQXVDO0FBQ3ZDLG1DQUFvQztBQUVwQywrQ0FBMkQ7QUFHOUMsUUFBQSxPQUFPLEdBQUcsTUFBTSxDQUFDO0FBQ2pCLFFBQUEsUUFBUSxHQUFHLHNDQUFzQyxDQUFDO0FBQ2xELFFBQUEsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDbEIsUUFBQSxPQUFPLEdBQUc7SUFDckIsT0FBTyxFQUFFO1FBQ1AsS0FBSyxFQUFFLEdBQUc7UUFDVixJQUFJLEVBQUUsb0dBQW9HO1FBQzFHLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLE9BQU8sQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLFNBQVM7S0FDL0Q7Q0FDRixDQUFDO0FBTUYsU0FBZ0IsT0FBTyxDQUFDLElBQXFCO0lBQzNDLElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFDO0FBQ3BDLENBQUM7QUFGRCwwQkFFQztBQUVNLEtBQUssVUFBVSxXQUFXLENBQUMsT0FBdUI7SUFDdkQsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxDQUFDO0lBQ3pELE1BQU0sR0FBRyxHQUFHLDhDQUE4QyxVQUFVLEdBQUcsQ0FBQztJQUN4RSxlQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLE1BQU0sY0FBYyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEUsZUFBSyxDQUFDLHlCQUF5QixNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvRCxPQUFPLElBQUksT0FBTyxDQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFO1FBQzlDLFlBQVksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUN4RCxJQUFJLEdBQUcsRUFBRTtnQkFDUCxlQUFLLENBQUMsb0RBQW9ELEdBQUcsQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3RGLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ25CO1lBQ0QsSUFBSSxNQUFNLEVBQUU7Z0JBQUUsZUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQUU7WUFDOUIsSUFBSSxNQUFNLEVBQUU7Z0JBQUUsaUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUFFO1lBQ2hDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNiLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBakJELGtDQWlCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGlsZFByb2Nlc3MgPSByZXF1aXJlKCdjaGlsZF9wcm9jZXNzJyk7XG5pbXBvcnQgY29sb3JzID0gcmVxdWlyZSgnY29sb3JzL3NhZmUnKTtcbmltcG9ydCBwcm9jZXNzID0gcmVxdWlyZSgncHJvY2VzcycpO1xuaW1wb3J0IHlhcmdzID0gcmVxdWlyZSgneWFyZ3MnKTtcbmltcG9ydCB7IGRlYnVnLCAgcHJpbnQsIHdhcm5pbmcgfSBmcm9tICcuLi8uLi9saWIvbG9nZ2luZyc7XG5pbXBvcnQgeyBDb21tYW5kT3B0aW9ucyB9IGZyb20gJy4uL2NvbW1hbmQtYXBpJztcblxuZXhwb3J0IGNvbnN0IGNvbW1hbmQgPSAnZG9jcyc7XG5leHBvcnQgY29uc3QgZGVzY3JpYmUgPSAnT3BlbnMgdGhlIGRvY3VtZW50YXRpb24gaW4gYSBicm93c2VyJztcbmV4cG9ydCBjb25zdCBhbGlhc2VzID0gWydkb2MnXTtcbmV4cG9ydCBjb25zdCBidWlsZGVyID0ge1xuICBicm93c2VyOiB7XG4gICAgYWxpYXM6ICdiJyxcbiAgICBkZXNjOiAndGhlIGNvbW1hbmQgdG8gdXNlIHRvIG9wZW4gdGhlIGJyb3dzZXIsIHVzaW5nICV1IGFzIGEgcGxhY2Vob2xkZXIgZm9yIHRoZSBwYXRoIG9mIHRoZSBmaWxlIHRvIG9wZW4nLFxuICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIGRlZmF1bHQ6IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMicgPyAnc3RhcnQgJXUnIDogJ29wZW4gJXUnXG4gIH1cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXJndW1lbnRzIGV4dGVuZHMgeWFyZ3MuQXJndW1lbnRzIHtcbiAgYnJvd3Nlcjogc3RyaW5nXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYW5kbGVyKGFyZ3M6IHlhcmdzLkFyZ3VtZW50cykge1xuICBhcmdzLmNvbW1hbmRIYW5kbGVyID0gcmVhbEhhbmRsZXI7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWFsSGFuZGxlcihvcHRpb25zOiBDb21tYW5kT3B0aW9ucyk6IFByb21pc2U8bnVtYmVyPiB7XG4gIGNvbnN0IGRvY1ZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuICBjb25zdCB1cmwgPSBgaHR0cHM6Ly9hd3NsYWJzLmdpdGh1Yi5pby9hd3MtY2RrL3ZlcnNpb25zLyR7ZG9jVmVyc2lvbn0vYDtcbiAgcHJpbnQoY29sb3JzLmdyZWVuKHVybCkpO1xuICBjb25zdCBicm93c2VyQ29tbWFuZCA9IG9wdGlvbnMuYXJncy5icm93c2VyLnJlcGxhY2UoLyV1L2csIHVybCk7XG4gIGRlYnVnKGBPcGVuaW5nIGRvY3VtZW50YXRpb24gJHtjb2xvcnMuZ3JlZW4oYnJvd3NlckNvbW1hbmQpfWApO1xuICByZXR1cm4gbmV3IFByb21pc2U8bnVtYmVyPigocmVzb2x2ZSwgX3JlamVjdCkgPT4ge1xuICAgIGNoaWxkUHJvY2Vzcy5leGVjKGJyb3dzZXJDb21tYW5kLCAoZXJyLCBzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBkZWJ1ZyhgQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiB0cnlpbmcgdG8gb3BlbiBhIGJyb3dzZXI6ICR7ZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlfWApO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgwKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGRvdXQpIHsgZGVidWcoc3Rkb3V0KTsgfVxuICAgICAgaWYgKHN0ZGVycikgeyB3YXJuaW5nKHN0ZGVycik7IH1cbiAgICAgIHJlc29sdmUoMCk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19