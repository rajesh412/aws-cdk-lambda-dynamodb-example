import yargs = require('yargs');
export declare type SettingsMap = {
    [key: string]: any;
};
export declare const DEFAULTS = "cdk.json";
export declare const PER_USER_DEFAULTS = "~/.cdk.json";
/**
 * All sources of settings combined
 */
export declare class Configuration {
    readonly commandLineArguments: Settings;
    readonly defaultConfig: Settings;
    readonly userConfig: Settings;
    readonly projectConfig: Settings;
    constructor(commandLineArguments?: yargs.Arguments);
    /**
     * Load all config
     */
    load(): Promise<this>;
    /**
     * Save the project config
     */
    saveProjectConfig(): Promise<this>;
    /**
     * Log the loaded defaults
     */
    logDefaults(): void;
    /**
     * Return the combined config from all config sources
     */
    readonly combined: Settings;
}
/**
 * A single set of settings
 */
export declare class Settings {
    settings: SettingsMap;
    /**
     * Parse Settings out of CLI arguments.
     * @param argv the received CLI arguments.
     * @returns a new Settings object.
     */
    static fromCommandLineArguments(argv: yargs.Arguments): Settings;
    static mergeAll(...settings: Settings[]): Settings;
    constructor(settings?: SettingsMap);
    load(fileName: string): Promise<this>;
    save(fileName: string): Promise<this>;
    merge(other: Settings): Settings;
    empty(): boolean;
    get(path: string[]): any;
    set(path: string[], value: any): Settings;
}
