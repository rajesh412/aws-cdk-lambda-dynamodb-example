"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cxapi = require("@aws-cdk/cx-api");
const logging_1 = require("../logging");
const availability_zones_1 = require("./availability-zones");
const hosted_zones_1 = require("./hosted-zones");
const ssm_parameters_1 = require("./ssm-parameters");
const vpcs_1 = require("./vpcs");
/**
 * Iterate over the list of missing context values and invoke the appropriate providers from the map to retrieve them
 */
async function provideContextValues(missingValues, projectConfig, sdk) {
    for (const key of Object.keys(missingValues)) {
        const missingContext = missingValues[key];
        const constructor = availableContextProviders[missingContext.provider];
        if (!constructor) {
            // tslint:disable-next-line:max-line-length
            throw new Error(`Unrecognized context provider name: ${missingContext.provider}. You might need to update the toolkit to match the version of the construct library.`);
        }
        const provider = new constructor(sdk);
        const value = await provider.getValue(missingContext.props);
        projectConfig.set(['context', key], value);
        logging_1.debug(`Setting "${key}" context to ${JSON.stringify(value)}`);
    }
}
exports.provideContextValues = provideContextValues;
const availableContextProviders = {
    [cxapi.AVAILABILITY_ZONE_PROVIDER]: availability_zones_1.AZContextProviderPlugin,
    [cxapi.SSM_PARAMETER_PROVIDER]: ssm_parameters_1.SSMContextProviderPlugin,
    [cxapi.HOSTED_ZONE_PROVIDER]: hosted_zones_1.HostedZoneContextProviderPlugin,
    [cxapi.VPC_PROVIDER]: vpcs_1.VpcNetworkContextProviderPlugin,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlDQUEwQztBQUUxQyx3Q0FBbUM7QUFFbkMsNkRBQStEO0FBQy9ELGlEQUFpRTtBQUVqRSxxREFBNEQ7QUFDNUQsaUNBQXlEO0FBS3pEOztHQUVHO0FBQ0ksS0FBSyxVQUFVLG9CQUFvQixDQUN4QyxhQUFzRCxFQUN0RCxhQUF1QixFQUN2QixHQUFRO0lBQ1IsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQzVDLE1BQU0sY0FBYyxHQUFHLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQyxNQUFNLFdBQVcsR0FBRyx5QkFBeUIsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQiwyQ0FBMkM7WUFDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsY0FBYyxDQUFDLFFBQVEsdUZBQXVGLENBQUMsQ0FBQztTQUN4SztRQUVELE1BQU0sUUFBUSxHQUFHLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRDLE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQyxlQUFLLENBQUMsWUFBWSxHQUFHLGdCQUFnQixJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUMvRDtBQUNILENBQUM7QUFuQkQsb0RBbUJDO0FBRUQsTUFBTSx5QkFBeUIsR0FBZ0I7SUFDN0MsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsRUFBRSw0Q0FBdUI7SUFDM0QsQ0FBQyxLQUFLLENBQUMsc0JBQXNCLENBQUMsRUFBRSx5Q0FBd0I7SUFDeEQsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsRUFBRSw4Q0FBK0I7SUFDN0QsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsc0NBQStCO0NBQ3RELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3hhcGkgPSByZXF1aXJlKCdAYXdzLWNkay9jeC1hcGknKTtcbmltcG9ydCB7IFNESyB9IGZyb20gJy4uL2FwaS91dGlsL3Nkayc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4uL2xvZ2dpbmcnO1xuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tICcuLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBBWkNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vYXZhaWxhYmlsaXR5LXpvbmVzJztcbmltcG9ydCB7IEhvc3RlZFpvbmVDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL2hvc3RlZC16b25lcyc7XG5pbXBvcnQgeyBDb250ZXh0UHJvdmlkZXJQbHVnaW4gfSBmcm9tICcuL3Byb3ZpZGVyJztcbmltcG9ydCB7IFNTTUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vc3NtLXBhcmFtZXRlcnMnO1xuaW1wb3J0IHsgVnBjTmV0d29ya0NvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4vdnBjcyc7XG5cbnR5cGUgUHJvdmlkZXJDb25zdHJ1Y3RvciA9ICAobmV3IChzZGs6IFNESykgPT4gQ29udGV4dFByb3ZpZGVyUGx1Z2luKTtcbmV4cG9ydCB0eXBlIFByb3ZpZGVyTWFwID0ge1tuYW1lOiBzdHJpbmddOiBQcm92aWRlckNvbnN0cnVjdG9yfTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgdGhlIGxpc3Qgb2YgbWlzc2luZyBjb250ZXh0IHZhbHVlcyBhbmQgaW52b2tlIHRoZSBhcHByb3ByaWF0ZSBwcm92aWRlcnMgZnJvbSB0aGUgbWFwIHRvIHJldHJpZXZlIHRoZW1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByb3ZpZGVDb250ZXh0VmFsdWVzKFxuICBtaXNzaW5nVmFsdWVzOiB7IFtrZXk6IHN0cmluZ106IGN4YXBpLk1pc3NpbmdDb250ZXh0IH0sXG4gIHByb2plY3RDb25maWc6IFNldHRpbmdzLFxuICBzZGs6IFNESykge1xuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhtaXNzaW5nVmFsdWVzKSkge1xuICAgIGNvbnN0IG1pc3NpbmdDb250ZXh0ID0gbWlzc2luZ1ZhbHVlc1trZXldO1xuXG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBhdmFpbGFibGVDb250ZXh0UHJvdmlkZXJzW21pc3NpbmdDb250ZXh0LnByb3ZpZGVyXTtcbiAgICBpZiAoIWNvbnN0cnVjdG9yKSB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBjb250ZXh0IHByb3ZpZGVyIG5hbWU6ICR7bWlzc2luZ0NvbnRleHQucHJvdmlkZXJ9LiBZb3UgbWlnaHQgbmVlZCB0byB1cGRhdGUgdGhlIHRvb2xraXQgdG8gbWF0Y2ggdGhlIHZlcnNpb24gb2YgdGhlIGNvbnN0cnVjdCBsaWJyYXJ5LmApO1xuICAgIH1cblxuICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGNvbnN0cnVjdG9yKHNkayk7XG5cbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IHByb3ZpZGVyLmdldFZhbHVlKG1pc3NpbmdDb250ZXh0LnByb3BzKTtcbiAgICBwcm9qZWN0Q29uZmlnLnNldChbJ2NvbnRleHQnLCBrZXldLCB2YWx1ZSk7XG4gICAgZGVidWcoYFNldHRpbmcgXCIke2tleX1cIiBjb250ZXh0IHRvICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuICB9XG59XG5cbmNvbnN0IGF2YWlsYWJsZUNvbnRleHRQcm92aWRlcnM6IFByb3ZpZGVyTWFwID0ge1xuICBbY3hhcGkuQVZBSUxBQklMSVRZX1pPTkVfUFJPVklERVJdOiBBWkNvbnRleHRQcm92aWRlclBsdWdpbixcbiAgW2N4YXBpLlNTTV9QQVJBTUVURVJfUFJPVklERVJdOiBTU01Db250ZXh0UHJvdmlkZXJQbHVnaW4sXG4gIFtjeGFwaS5IT1NURURfWk9ORV9QUk9WSURFUl06IEhvc3RlZFpvbmVDb250ZXh0UHJvdmlkZXJQbHVnaW4sXG4gIFtjeGFwaS5WUENfUFJPVklERVJdOiBWcGNOZXR3b3JrQ29udGV4dFByb3ZpZGVyUGx1Z2luLFxufTtcbiJdfQ==