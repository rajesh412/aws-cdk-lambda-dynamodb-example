"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors/safe");
const logging_1 = require("./logging");
let previousTemplate = {};
async function interactive(stack, verbose, synthStackFn) {
    let template;
    try {
        template = (await synthStackFn(stack)).template;
    }
    catch (e) {
        template = { error: e };
    }
    process.stdout.write('\x1B[2J\x1B[0f');
    logging_1.data(colors.underline(colors.green(stack.name)));
    if (template.error) {
        logging_1.data(colors.red(template.error));
    }
    else {
        if (!template.Resources || Object.keys(template.Resources).length === 0) {
            logging_1.data(colors.dim(colors.white('(stack is empty)')));
        }
        else {
            for (const id of Object.keys(template.Resources).sort()) {
                const res = template.Resources[id];
                const resourceChanged = () => {
                    if (!previousTemplate.Resources || !(id in previousTemplate.Resources)) {
                        return true;
                    }
                    const prev = JSON.stringify(previousTemplate.Resources[id]);
                    const curr = JSON.stringify(res);
                    return (prev !== curr);
                };
                const globalColor = resourceChanged() ? colors.italic : (x) => x;
                logging_1.data(globalColor(`${colors.bold(colors.white(id))} ${colors.gray(res.Type)}`));
                if (verbose && res.Properties) {
                    Object.keys(res.Properties).forEach(prop => {
                        const value = res.Properties[prop];
                        logging_1.data(globalColor(`  ${colors.cyan(prop)}=${JSON.stringify(value)}`));
                    });
                }
            }
        }
    }
    previousTemplate = template;
    setTimeout(() => interactive(stack, verbose, synthStackFn), 2000);
}
exports.interactive = interactive;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJhY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbnRlcmFjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF1QztBQUN2Qyx1Q0FBaUM7QUFFakMsSUFBSSxnQkFBZ0IsR0FBUSxFQUFHLENBQUM7QUFFekIsS0FBSyxVQUFVLFdBQVcsQ0FBQyxLQUFVLEVBQUUsT0FBZ0IsRUFBRSxZQUFzQztJQUNwRyxJQUFJLFFBQVEsQ0FBQztJQUNiLElBQUk7UUFDRixRQUFRLEdBQUcsQ0FBQyxNQUFNLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQztLQUNqRDtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsUUFBUSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3pCO0lBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QyxjQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakQsSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFO1FBQ2xCLGNBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQ2xDO1NBQU07UUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3ZFLGNBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7YUFBTTtZQUNMLEtBQUssTUFBTSxFQUFFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3ZELE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBRW5DLE1BQU0sZUFBZSxHQUFHLEdBQUcsRUFBRTtvQkFDM0IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFO3dCQUN0RSxPQUFPLElBQUksQ0FBQztxQkFDYjtvQkFFRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM1RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUNqQyxPQUFPLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQUM7Z0JBRUYsTUFBTSxXQUFXLEdBQW9CLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUV2RixjQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRS9FLElBQUksT0FBTyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUU7b0JBQzdCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTt3QkFDekMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDbkMsY0FBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDdkUsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7YUFDRjtTQUNGO0tBQ0Y7SUFFRCxnQkFBZ0IsR0FBRyxRQUFRLENBQUM7SUFFNUIsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFlBQVksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3BFLENBQUM7QUEvQ0Qsa0NBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNvbG9ycyA9IHJlcXVpcmUoJ2NvbG9ycy9zYWZlJyk7XG5pbXBvcnQgeyBkYXRhIH0gZnJvbSAnLi9sb2dnaW5nJztcblxubGV0IHByZXZpb3VzVGVtcGxhdGU6IGFueSA9IHsgfTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGludGVyYWN0aXZlKHN0YWNrOiBhbnksIHZlcmJvc2U6IGJvb2xlYW4sIHN5bnRoU3RhY2tGbjogKHg6IGFueSkgPT4gUHJvbWlzZTxhbnk+KSB7XG4gIGxldCB0ZW1wbGF0ZTtcbiAgdHJ5IHtcbiAgICB0ZW1wbGF0ZSA9IChhd2FpdCBzeW50aFN0YWNrRm4oc3RhY2spKS50ZW1wbGF0ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRlbXBsYXRlID0geyBlcnJvcjogZSB9O1xuICB9XG5cbiAgcHJvY2Vzcy5zdGRvdXQud3JpdGUoJ1xceDFCWzJKXFx4MUJbMGYnKTtcbiAgZGF0YShjb2xvcnMudW5kZXJsaW5lKGNvbG9ycy5ncmVlbihzdGFjay5uYW1lKSkpO1xuXG4gIGlmICh0ZW1wbGF0ZS5lcnJvcikge1xuICAgIGRhdGEoY29sb3JzLnJlZCh0ZW1wbGF0ZS5lcnJvcikpO1xuICB9IGVsc2Uge1xuICAgIGlmICghdGVtcGxhdGUuUmVzb3VyY2VzIHx8IE9iamVjdC5rZXlzKHRlbXBsYXRlLlJlc291cmNlcykubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhKGNvbG9ycy5kaW0oY29sb3JzLndoaXRlKCcoc3RhY2sgaXMgZW1wdHkpJykpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChjb25zdCBpZCBvZiBPYmplY3Qua2V5cyh0ZW1wbGF0ZS5SZXNvdXJjZXMpLnNvcnQoKSkge1xuICAgICAgICBjb25zdCByZXMgPSB0ZW1wbGF0ZS5SZXNvdXJjZXNbaWRdO1xuXG4gICAgICAgIGNvbnN0IHJlc291cmNlQ2hhbmdlZCA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoIXByZXZpb3VzVGVtcGxhdGUuUmVzb3VyY2VzIHx8ICEoaWQgaW4gcHJldmlvdXNUZW1wbGF0ZS5SZXNvdXJjZXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwcmV2ID0gSlNPTi5zdHJpbmdpZnkocHJldmlvdXNUZW1wbGF0ZS5SZXNvdXJjZXNbaWRdKTtcbiAgICAgICAgICBjb25zdCBjdXJyID0gSlNPTi5zdHJpbmdpZnkocmVzKTtcbiAgICAgICAgICByZXR1cm4gKHByZXYgIT09IGN1cnIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGdsb2JhbENvbG9yOiAoeDogYW55KSA9PiBhbnkgPSByZXNvdXJjZUNoYW5nZWQoKSA/IGNvbG9ycy5pdGFsaWMgOiAoeDogYW55KSA9PiB4O1xuXG4gICAgICAgIGRhdGEoZ2xvYmFsQ29sb3IoYCR7Y29sb3JzLmJvbGQoY29sb3JzLndoaXRlKGlkKSl9ICR7Y29sb3JzLmdyYXkocmVzLlR5cGUpfWApKTtcblxuICAgICAgICBpZiAodmVyYm9zZSAmJiByZXMuUHJvcGVydGllcykge1xuICAgICAgICAgIE9iamVjdC5rZXlzKHJlcy5Qcm9wZXJ0aWVzKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXMuUHJvcGVydGllc1twcm9wXTtcbiAgICAgICAgICAgIGRhdGEoZ2xvYmFsQ29sb3IoYCAgJHtjb2xvcnMuY3lhbihwcm9wKX09JHtKU09OLnN0cmluZ2lmeSh2YWx1ZSl9YCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJldmlvdXNUZW1wbGF0ZSA9IHRlbXBsYXRlO1xuXG4gIHNldFRpbWVvdXQoKCkgPT4gaW50ZXJhY3RpdmUoc3RhY2ssIHZlcmJvc2UsIHN5bnRoU3RhY2tGbiksIDIwMDApO1xufVxuIl19