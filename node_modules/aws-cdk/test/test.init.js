"use strict";
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const init_1 = require("../lib/init");
const state = {};
module.exports = {
    async "setUp"(callback) {
        state.previousWorkingDir = process.cwd();
        state.tempDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
        // tslint:disable-next-line:no-console
        console.log('Temporary working directory:', state.tempDir);
        process.chdir(state.tempDir);
        callback();
    },
    async "tearDown"(callback) {
        // tslint:disable-next-line:no-console
        console.log('Switching back to', state.previousWorkingDir, 'cleaning up', state.tempDir);
        process.chdir(state.previousWorkingDir);
        await fs.remove(state.tempDir);
        callback();
    },
    async 'create a TypeScript library project'(test) {
        await init_1.cliInit('lib', 'typescript', false);
        // Check that package.json and lib/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('lib'));
        test.done();
    },
    async 'create a TypeScript app project'(test) {
        await init_1.cliInit('app', 'typescript', false);
        // Check that package.json and bin/ got created in the current directory
        test.equal(true, await fs.pathExists('package.json'));
        test.equal(true, await fs.pathExists('bin'));
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5pbml0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5pbml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwrQkFBZ0M7QUFFaEMseUJBQTBCO0FBQzFCLDZCQUE4QjtBQUM5QixzQ0FBc0M7QUFFdEMsTUFBTSxLQUFLLEdBR1AsRUFBRSxDQUFDO0FBRVAsaUJBQVM7SUFDUCxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQW9CO1FBQ2hDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDekMsS0FBSyxDQUFDLE9BQU8sR0FBRyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUN6RSxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0QsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0IsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxRQUFvQjtRQUNuQyxzQ0FBc0M7UUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsa0JBQWtCLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBbUIsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBUSxDQUFDLENBQUM7UUFFaEMsUUFBUSxFQUFFLENBQUM7SUFDYixDQUFDO0lBRUQsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLElBQVU7UUFDcEQsTUFBTSxjQUFPLENBQUMsS0FBSyxFQUFFLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUxQyx3RUFBd0U7UUFDeEUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFVO1FBQ2hELE1BQU0sY0FBTyxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFMUMsd0VBQXdFO1FBQ3hFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgeyBjbGlJbml0IH0gZnJvbSAnLi4vbGliL2luaXQnO1xuXG5jb25zdCBzdGF0ZToge1xuICBwcmV2aW91c1dvcmtpbmdEaXI/OiBzdHJpbmc7XG4gIHRlbXBEaXI/OiBzdHJpbmc7XG59ID0ge307XG5cbmV4cG9ydCA9IHtcbiAgYXN5bmMgXCJzZXRVcFwiKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgc3RhdGUucHJldmlvdXNXb3JraW5nRGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgICBzdGF0ZS50ZW1wRGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICdhd3MtY2RrLXRlc3QnKSk7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZygnVGVtcG9yYXJ5IHdvcmtpbmcgZGlyZWN0b3J5OicsIHN0YXRlLnRlbXBEaXIpO1xuICAgIHByb2Nlc3MuY2hkaXIoc3RhdGUudGVtcERpcik7XG4gICAgY2FsbGJhY2soKTtcbiAgfSxcblxuICBhc3luYyBcInRlYXJEb3duXCIoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uc29sZVxuICAgIGNvbnNvbGUubG9nKCdTd2l0Y2hpbmcgYmFjayB0bycsIHN0YXRlLnByZXZpb3VzV29ya2luZ0RpciwgJ2NsZWFuaW5nIHVwJywgc3RhdGUudGVtcERpcik7XG4gICAgcHJvY2Vzcy5jaGRpcihzdGF0ZS5wcmV2aW91c1dvcmtpbmdEaXIhKTtcbiAgICBhd2FpdCBmcy5yZW1vdmUoc3RhdGUudGVtcERpciEpO1xuXG4gICAgY2FsbGJhY2soKTtcbiAgfSxcblxuICBhc3luYyAnY3JlYXRlIGEgVHlwZVNjcmlwdCBsaWJyYXJ5IHByb2plY3QnKHRlc3Q6IFRlc3QpIHtcbiAgICBhd2FpdCBjbGlJbml0KCdsaWInLCAndHlwZXNjcmlwdCcsIGZhbHNlKTtcblxuICAgIC8vIENoZWNrIHRoYXQgcGFja2FnZS5qc29uIGFuZCBsaWIvIGdvdCBjcmVhdGVkIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeVxuICAgIHRlc3QuZXF1YWwodHJ1ZSwgYXdhaXQgZnMucGF0aEV4aXN0cygncGFja2FnZS5qc29uJykpO1xuICAgIHRlc3QuZXF1YWwodHJ1ZSwgYXdhaXQgZnMucGF0aEV4aXN0cygnbGliJykpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ2NyZWF0ZSBhIFR5cGVTY3JpcHQgYXBwIHByb2plY3QnKHRlc3Q6IFRlc3QpIHtcbiAgICBhd2FpdCBjbGlJbml0KCdhcHAnLCAndHlwZXNjcmlwdCcsIGZhbHNlKTtcblxuICAgIC8vIENoZWNrIHRoYXQgcGFja2FnZS5qc29uIGFuZCBiaW4vIGdvdCBjcmVhdGVkIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeVxuICAgIHRlc3QuZXF1YWwodHJ1ZSwgYXdhaXQgZnMucGF0aEV4aXN0cygncGFja2FnZS5qc29uJykpO1xuICAgIHRlc3QuZXF1YWwodHJ1ZSwgYXdhaXQgZnMucGF0aEV4aXN0cygnYmluJykpO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH1cbn07XG4iXX0=