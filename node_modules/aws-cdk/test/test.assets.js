"use strict";
const assets_1 = require("../lib/assets");
class FakeToolkit {
    constructor() {
        this.bucketUrl = 'https://bucket';
        this.bucketName = 'bucket';
    }
    async uploadIfChanged(_data, props) {
        const filename = `12345${props.s3KeySuffix}`;
        return {
            filename,
            changed: true,
            key: `${props.s3KeyPrefix}${filename}`
        };
    }
}
module.exports = {
    async 'prepare assets'(test) {
        // GIVEN
        const stack = {
            name: 'SomeStack',
            environment: {
                name: 'myenv',
                account: 'myaccount',
                region: 'myregion'
            },
            metadata: {
                '/SomeStack/SomeResource': [{
                        type: 'aws:cdk:asset',
                        data: {
                            path: __filename,
                            id: 'SomeStackSomeResource4567',
                            packaging: 'file',
                            s3BucketParameter: 'BucketParameter',
                            s3KeyParameter: 'KeyParameter'
                        },
                        trace: []
                    }]
            },
            template: {
                Resources: {
                    SomeResource: {
                        Type: 'AWS::Something::Something'
                    }
                }
            }
        };
        const toolkit = new FakeToolkit();
        // WHEN
        const params = await assets_1.prepareAssets(stack, toolkit);
        // THEN
        test.deepEqual(params, [
            { ParameterKey: 'BucketParameter', ParameterValue: 'bucket' },
            { ParameterKey: 'KeyParameter', ParameterValue: 'assets/SomeStackSomeResource4567/||12345.js' },
        ]);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5hc3NldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0LmFzc2V0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsMENBQThDO0FBZ0Q5QyxNQUFNLFdBQVc7SUFBakI7UUFDUyxjQUFTLEdBQVcsZ0JBQWdCLENBQUM7UUFDckMsZUFBVSxHQUFXLFFBQVEsQ0FBQztJQVV2QyxDQUFDO0lBUlEsS0FBSyxDQUFDLGVBQWUsQ0FBQyxLQUFVLEVBQUUsS0FBa0I7UUFDekQsTUFBTSxRQUFRLEdBQUcsUUFBUSxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDN0MsT0FBTztZQUNMLFFBQVE7WUFDUixPQUFPLEVBQUUsSUFBSTtZQUNiLEdBQUcsRUFBRSxHQUFHLEtBQUssQ0FBQyxXQUFXLEdBQUcsUUFBUSxFQUFFO1NBQ3ZDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUExREQsaUJBQVM7SUFDUCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBVTtRQUMvQixRQUFRO1FBQ1IsTUFBTSxLQUFLLEdBQXFCO1lBQzlCLElBQUksRUFBRSxXQUFXO1lBQ2pCLFdBQVcsRUFBRTtnQkFDWCxJQUFJLEVBQUUsT0FBTztnQkFDYixPQUFPLEVBQUUsV0FBVztnQkFDcEIsTUFBTSxFQUFFLFVBQVU7YUFDbkI7WUFDRCxRQUFRLEVBQUU7Z0JBQ1YseUJBQXlCLEVBQUUsQ0FBQzt3QkFDMUIsSUFBSSxFQUFFLGVBQWU7d0JBQ3JCLElBQUksRUFBRTs0QkFDTixJQUFJLEVBQUUsVUFBVTs0QkFDaEIsRUFBRSxFQUFFLDJCQUEyQjs0QkFDL0IsU0FBUyxFQUFFLE1BQU07NEJBQ2pCLGlCQUFpQixFQUFFLGlCQUFpQjs0QkFDcEMsY0FBYyxFQUFFLGNBQWM7eUJBQ1A7d0JBQ3ZCLEtBQUssRUFBRSxFQUFFO3FCQUNWLENBQUM7YUFDRDtZQUNELFFBQVEsRUFBRTtnQkFDVixTQUFTLEVBQUU7b0JBQ1QsWUFBWSxFQUFFO3dCQUNkLElBQUksRUFBRSwyQkFBMkI7cUJBQ2hDO2lCQUNGO2FBQ0E7U0FDRixDQUFDO1FBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUVsQyxPQUFPO1FBQ1AsTUFBTSxNQUFNLEdBQUcsTUFBTSxzQkFBYSxDQUFDLEtBQUssRUFBRSxPQUFjLENBQUMsQ0FBQztRQUUxRCxPQUFPO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUU7WUFDckIsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRTtZQUM3RCxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsY0FBYyxFQUFFLDZDQUE2QyxFQUFFO1NBQ2hHLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXRNZXRhZGF0YUVudHJ5LCBTeW50aGVzaXplZFN0YWNrIH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBVcGxvYWRlZCwgVXBsb2FkUHJvcHMgfSBmcm9tICcuLi9saWInO1xuaW1wb3J0IHsgcHJlcGFyZUFzc2V0cyB9IGZyb20gJy4uL2xpYi9hc3NldHMnO1xuXG5leHBvcnQgPSB7XG4gIGFzeW5jICdwcmVwYXJlIGFzc2V0cycodGVzdDogVGVzdCkge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3Qgc3RhY2s6IFN5bnRoZXNpemVkU3RhY2sgPSB7XG4gICAgICBuYW1lOiAnU29tZVN0YWNrJyxcbiAgICAgIGVudmlyb25tZW50OiB7XG4gICAgICAgIG5hbWU6ICdteWVudicsXG4gICAgICAgIGFjY291bnQ6ICdteWFjY291bnQnLFxuICAgICAgICByZWdpb246ICdteXJlZ2lvbidcbiAgICAgIH0sXG4gICAgICBtZXRhZGF0YToge1xuICAgICAgJy9Tb21lU3RhY2svU29tZVJlc291cmNlJzogW3tcbiAgICAgICAgdHlwZTogJ2F3czpjZGs6YXNzZXQnLFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgIHBhdGg6IF9fZmlsZW5hbWUsXG4gICAgICAgIGlkOiAnU29tZVN0YWNrU29tZVJlc291cmNlNDU2NycsXG4gICAgICAgIHBhY2thZ2luZzogJ2ZpbGUnLFxuICAgICAgICBzM0J1Y2tldFBhcmFtZXRlcjogJ0J1Y2tldFBhcmFtZXRlcicsXG4gICAgICAgIHMzS2V5UGFyYW1ldGVyOiAnS2V5UGFyYW1ldGVyJ1xuICAgICAgICB9IGFzIEFzc2V0TWV0YWRhdGFFbnRyeSxcbiAgICAgICAgdHJhY2U6IFtdXG4gICAgICB9XVxuICAgICAgfSxcbiAgICAgIHRlbXBsYXRlOiB7XG4gICAgICBSZXNvdXJjZXM6IHtcbiAgICAgICAgU29tZVJlc291cmNlOiB7XG4gICAgICAgIFR5cGU6ICdBV1M6OlNvbWV0aGluZzo6U29tZXRoaW5nJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB0b29sa2l0ID0gbmV3IEZha2VUb29sa2l0KCk7XG5cbiAgICAvLyBXSEVOXG4gICAgY29uc3QgcGFyYW1zID0gYXdhaXQgcHJlcGFyZUFzc2V0cyhzdGFjaywgdG9vbGtpdCBhcyBhbnkpO1xuXG4gICAgLy8gVEhFTlxuICAgIHRlc3QuZGVlcEVxdWFsKHBhcmFtcywgW1xuICAgICAgeyBQYXJhbWV0ZXJLZXk6ICdCdWNrZXRQYXJhbWV0ZXInLCBQYXJhbWV0ZXJWYWx1ZTogJ2J1Y2tldCcgfSxcbiAgICAgIHsgUGFyYW1ldGVyS2V5OiAnS2V5UGFyYW1ldGVyJywgUGFyYW1ldGVyVmFsdWU6ICdhc3NldHMvU29tZVN0YWNrU29tZVJlc291cmNlNDU2Ny98fDEyMzQ1LmpzJyB9LFxuICAgIF0pO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH1cbn07XG5cbmNsYXNzIEZha2VUb29sa2l0IHtcbiAgcHVibGljIGJ1Y2tldFVybDogc3RyaW5nID0gJ2h0dHBzOi8vYnVja2V0JztcbiAgcHVibGljIGJ1Y2tldE5hbWU6IHN0cmluZyA9ICdidWNrZXQnO1xuXG4gIHB1YmxpYyBhc3luYyB1cGxvYWRJZkNoYW5nZWQoX2RhdGE6IGFueSwgcHJvcHM6IFVwbG9hZFByb3BzKTogUHJvbWlzZTxVcGxvYWRlZD4ge1xuICAgIGNvbnN0IGZpbGVuYW1lID0gYDEyMzQ1JHtwcm9wcy5zM0tleVN1ZmZpeH1gO1xuICAgIHJldHVybiB7XG4gICAgICBmaWxlbmFtZSxcbiAgICAgIGNoYW5nZWQ6IHRydWUsXG4gICAgICBrZXk6IGAke3Byb3BzLnMzS2V5UHJlZml4fSR7ZmlsZW5hbWV9YFxuICAgIH07XG4gIH1cbn1cbiJdfQ==