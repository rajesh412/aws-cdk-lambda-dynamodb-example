"use strict";
const child_process_1 = require("child_process");
const fs = require("fs-extra");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const archive_1 = require("../lib/archive");
const exec = util_1.promisify(child_process_1.exec);
module.exports = {
    async 'zipDirectory can take a directory and produce a zip from it'(test) {
        const stagingDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
        const zipFile = path.join(stagingDir, 'output.zip');
        const originalDir = path.join(__dirname, 'test-archive');
        const extractDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive.extract'));
        await archive_1.zipDirectory(originalDir, zipFile);
        // unzip and verify that the resulting tree is the same
        await exec(`unzip ${zipFile}`, { cwd: extractDir });
        try {
            await exec(`diff -bur ${originalDir} ${extractDir}`);
        }
        catch (e) {
            test.ok(false, `extracted directory ${extractDir} differs from original ${originalDir}`);
        }
        await fs.remove(stagingDir);
        await fs.remove(extractDir);
        test.done();
    },
    async 'md5 hash of a zip stays consistent across invocations'(test) {
        const stagingDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
        const zipFile1 = path.join(stagingDir, 'output.zip');
        const zipFile2 = path.join(stagingDir, 'output.zip');
        const originalDir = path.join(__dirname, 'test-archive');
        await archive_1.zipDirectory(originalDir, zipFile1);
        await new Promise(ok => setTimeout(ok, 2000)); // wait 2s
        await archive_1.zipDirectory(originalDir, zipFile2);
        const hash1 = archive_1.md5hash(await fs.readFile(zipFile1));
        const hash2 = archive_1.md5hash(await fs.readFile(zipFile2));
        test.deepEqual(hash1, hash2, 'md5 hash of two zips of the same content are not the same');
        test.done();
    },
    async 'zipDirectory follows symlinks'(test) {
        const originalDir = path.join(__dirname, 'test-archive-follow', 'data');
        const stagingDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
        const zipFile = path.join(stagingDir, 'output.zip');
        const extractDir = await fs.mkdtemp(path.join(os.tmpdir(), 'test.archive.follow'));
        try {
            await archive_1.zipDirectory(originalDir, zipFile);
            await exec(`unzip ${zipFile}`, { cwd: extractDir });
            await exec(`diff -bur ${originalDir} ${extractDir}`);
        }
        catch (e) {
            test.ok(false, `extracted directory ${extractDir} differs from original ${originalDir}, symlinks not followed.`);
        }
        await fs.remove(stagingDir);
        await fs.remove(extractDir);
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5hcmNoaXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5hcmNoaXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxpREFBOEM7QUFDOUMsK0JBQWdDO0FBRWhDLHlCQUEwQjtBQUMxQiw2QkFBOEI7QUFDOUIsK0JBQWlDO0FBQ2pDLDRDQUF1RDtBQUN2RCxNQUFNLElBQUksR0FBRyxnQkFBUyxDQUFDLG9CQUFLLENBQUMsQ0FBQztBQUU5QixpQkFBUztJQUNQLEtBQUssQ0FBQyw2REFBNkQsQ0FBQyxJQUFVO1FBQzVFLE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQzVFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ3BELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ3pELE1BQU0sVUFBVSxHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDLENBQUM7UUFDcEYsTUFBTSxzQkFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUV6Qyx1REFBdUQ7UUFDdkQsTUFBTSxJQUFJLENBQUMsU0FBUyxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBRXBELElBQUk7WUFDRixNQUFNLElBQUksQ0FBQyxhQUFhLFdBQVcsSUFBSSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1NBQ3REO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSx1QkFB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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhlYyBhcyBfZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGZzID0gcmVxdWlyZSgnZnMtZXh0cmEnKTtcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgb3MgPSByZXF1aXJlKCdvcycpO1xuaW1wb3J0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcbmltcG9ydCB7IG1kNWhhc2gsIHppcERpcmVjdG9yeSB9IGZyb20gJy4uL2xpYi9hcmNoaXZlJztcbmNvbnN0IGV4ZWMgPSBwcm9taXNpZnkoX2V4ZWMpO1xuXG5leHBvcnQgPSB7XG4gIGFzeW5jICd6aXBEaXJlY3RvcnkgY2FuIHRha2UgYSBkaXJlY3RvcnkgYW5kIHByb2R1Y2UgYSB6aXAgZnJvbSBpdCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWdpbmdEaXIgPSBhd2FpdCBmcy5ta2R0ZW1wKHBhdGguam9pbihvcy50bXBkaXIoKSwgJ3Rlc3QuYXJjaGl2ZScpKTtcbiAgICBjb25zdCB6aXBGaWxlID0gcGF0aC5qb2luKHN0YWdpbmdEaXIsICdvdXRwdXQuemlwJyk7XG4gICAgY29uc3Qgb3JpZ2luYWxEaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAndGVzdC1hcmNoaXZlJyk7XG4gICAgY29uc3QgZXh0cmFjdERpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVzdC5hcmNoaXZlLmV4dHJhY3QnKSk7XG4gICAgYXdhaXQgemlwRGlyZWN0b3J5KG9yaWdpbmFsRGlyLCB6aXBGaWxlKTtcblxuICAgIC8vIHVuemlwIGFuZCB2ZXJpZnkgdGhhdCB0aGUgcmVzdWx0aW5nIHRyZWUgaXMgdGhlIHNhbWVcbiAgICBhd2FpdCBleGVjKGB1bnppcCAke3ppcEZpbGV9YCwgeyBjd2Q6IGV4dHJhY3REaXIgfSk7XG5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZXhlYyhgZGlmZiAtYnVyICR7b3JpZ2luYWxEaXJ9ICR7ZXh0cmFjdERpcn1gKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0ZXN0Lm9rKGZhbHNlLCBgZXh0cmFjdGVkIGRpcmVjdG9yeSAke2V4dHJhY3REaXJ9IGRpZmZlcnMgZnJvbSBvcmlnaW5hbCAke29yaWdpbmFsRGlyfWApO1xuICAgIH1cblxuICAgIGF3YWl0IGZzLnJlbW92ZShzdGFnaW5nRGlyKTtcbiAgICBhd2FpdCBmcy5yZW1vdmUoZXh0cmFjdERpcik7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ21kNSBoYXNoIG9mIGEgemlwIHN0YXlzIGNvbnNpc3RlbnQgYWNyb3NzIGludm9jYXRpb25zJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgc3RhZ2luZ0RpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVzdC5hcmNoaXZlJykpO1xuICAgIGNvbnN0IHppcEZpbGUxID0gcGF0aC5qb2luKHN0YWdpbmdEaXIsICdvdXRwdXQuemlwJyk7XG4gICAgY29uc3QgemlwRmlsZTIgPSBwYXRoLmpvaW4oc3RhZ2luZ0RpciwgJ291dHB1dC56aXAnKTtcbiAgICBjb25zdCBvcmlnaW5hbERpciA9IHBhdGguam9pbihfX2Rpcm5hbWUsICd0ZXN0LWFyY2hpdmUnKTtcbiAgICBhd2FpdCB6aXBEaXJlY3Rvcnkob3JpZ2luYWxEaXIsIHppcEZpbGUxKTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShvayA9PiBzZXRUaW1lb3V0KG9rLCAyMDAwKSk7IC8vIHdhaXQgMnNcbiAgICBhd2FpdCB6aXBEaXJlY3Rvcnkob3JpZ2luYWxEaXIsIHppcEZpbGUyKTtcblxuICAgIGNvbnN0IGhhc2gxID0gbWQ1aGFzaChhd2FpdCBmcy5yZWFkRmlsZSh6aXBGaWxlMSkpO1xuICAgIGNvbnN0IGhhc2gyID0gbWQ1aGFzaChhd2FpdCBmcy5yZWFkRmlsZSh6aXBGaWxlMikpO1xuXG4gICAgdGVzdC5kZWVwRXF1YWwoaGFzaDEsIGhhc2gyLCAnbWQ1IGhhc2ggb2YgdHdvIHppcHMgb2YgdGhlIHNhbWUgY29udGVudCBhcmUgbm90IHRoZSBzYW1lJyk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgYXN5bmMgJ3ppcERpcmVjdG9yeSBmb2xsb3dzIHN5bWxpbmtzJyh0ZXN0OiBUZXN0KSB7XG4gICAgY29uc3Qgb3JpZ2luYWxEaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAndGVzdC1hcmNoaXZlLWZvbGxvdycsICdkYXRhJyk7XG4gICAgY29uc3Qgc3RhZ2luZ0RpciA9IGF3YWl0IGZzLm1rZHRlbXAocGF0aC5qb2luKG9zLnRtcGRpcigpLCAndGVzdC5hcmNoaXZlJykpO1xuICAgIGNvbnN0IHppcEZpbGUgPSBwYXRoLmpvaW4oc3RhZ2luZ0RpciwgJ291dHB1dC56aXAnKTtcbiAgICBjb25zdCBleHRyYWN0RGlyID0gYXdhaXQgZnMubWtkdGVtcChwYXRoLmpvaW4ob3MudG1wZGlyKCksICd0ZXN0LmFyY2hpdmUuZm9sbG93JykpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHppcERpcmVjdG9yeShvcmlnaW5hbERpciwgemlwRmlsZSk7XG4gICAgICBhd2FpdCBleGVjKGB1bnppcCAke3ppcEZpbGV9YCwgeyBjd2Q6IGV4dHJhY3REaXIgfSk7XG4gICAgICBhd2FpdCBleGVjKGBkaWZmIC1idXIgJHtvcmlnaW5hbERpcn0gJHtleHRyYWN0RGlyfWApO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRlc3Qub2soZmFsc2UsIGBleHRyYWN0ZWQgZGlyZWN0b3J5ICR7ZXh0cmFjdERpcn0gZGlmZmVycyBmcm9tIG9yaWdpbmFsICR7b3JpZ2luYWxEaXJ9LCBzeW1saW5rcyBub3QgZm9sbG93ZWQuYCk7XG4gICAgfVxuXG4gICAgYXdhaXQgZnMucmVtb3ZlKHN0YWdpbmdEaXIpO1xuICAgIGF3YWl0IGZzLnJlbW92ZShleHRyYWN0RGlyKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfVxufTtcbiJdfQ==