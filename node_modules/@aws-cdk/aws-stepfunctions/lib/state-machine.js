"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cloudwatch = require("@aws-cdk/aws-cloudwatch");
const iam = require("@aws-cdk/aws-iam");
const cdk = require("@aws-cdk/cdk");
const state_graph_1 = require("./state-graph");
const stepfunctions_generated_1 = require("./stepfunctions.generated");
/**
 * Define a StepFunctions State Machine
 */
class StateMachine extends cdk.Construct {
    /**
     * Import a state machine
     */
    static import(parent, id, props) {
        return new ImportedStateMachine(parent, id, props);
    }
    constructor(parent, id, props) {
        super(parent, id);
        this.role = props.role || new iam.Role(this, 'Role', {
            assumedBy: new iam.ServicePrincipal(`states.${new cdk.AwsRegion()}.amazonaws.com`),
        });
        const graph = new state_graph_1.StateGraph(props.definition.startState, `State Machine ${id} definition`);
        graph.timeoutSeconds = props.timeoutSec;
        const resource = new stepfunctions_generated_1.CfnStateMachine(this, 'Resource', {
            stateMachineName: props.stateMachineName,
            roleArn: this.role.roleArn,
            definitionString: cdk.CloudFormationJSON.stringify(graph.toGraphJson()),
        });
        for (const statement of graph.policyStatements) {
            this.addToRolePolicy(statement);
        }
        this.stateMachineName = resource.stateMachineName;
        this.stateMachineArn = resource.stateMachineArn;
    }
    /**
     * Add the given statement to the role's policy
     */
    addToRolePolicy(statement) {
        this.role.addToPolicy(statement);
    }
    /**
     * Allows using state machines as event rule targets.
     */
    asEventRuleTarget(_ruleArn, _ruleId) {
        if (!this.eventsRole) {
            this.eventsRole = new iam.Role(this, 'EventsRole', {
                assumedBy: new iam.ServicePrincipal('events.amazonaws.com')
            });
            this.eventsRole.addToPolicy(new iam.PolicyStatement()
                .addAction('states:StartExecution')
                .addResource(this.stateMachineArn));
        }
        return {
            id: this.id,
            arn: this.stateMachineArn,
            roleArn: this.eventsRole.roleArn,
        };
    }
    /**
     * Return the given named metric for this State Machine's executions
     *
     * @default sum over 5 minutes
     */
    metric(metricName, props) {
        return new cloudwatch.Metric(Object.assign({ namespace: 'AWS/States', metricName, dimensions: { StateMachineArn: this.stateMachineArn }, statistic: 'sum' }, props));
    }
    /**
     * Metric for the number of executions that failed
     *
     * @default sum over 5 minutes
     */
    metricFailed(props) {
        return this.metric('ExecutionsFailed', props);
    }
    /**
     * Metric for the number of executions that were throttled
     *
     * @default sum over 5 minutes
     */
    metricThrottled(props) {
        return this.metric('ExecutionThrottled', props);
    }
    /**
     * Metric for the number of executions that were aborted
     *
     * @default sum over 5 minutes
     */
    metricAborted(props) {
        return this.metric('ExecutionsAborted', props);
    }
    /**
     * Metric for the number of executions that succeeded
     *
     * @default sum over 5 minutes
     */
    metricSucceeded(props) {
        return this.metric('ExecutionsSucceeded', props);
    }
    /**
     * Metric for the number of executions that succeeded
     *
     * @default sum over 5 minutes
     */
    metricTimedOut(props) {
        return this.metric('ExecutionsTimedOut', props);
    }
    /**
     * Metric for the number of executions that were started
     *
     * @default sum over 5 minutes
     */
    metricStarted(props) {
        return this.metric('ExecutionsStarted', props);
    }
    /**
     * Export this state machine
     */
    export() {
        return {
            stateMachineArn: new cdk.Output(this, 'StateMachineArn', { value: this.stateMachineArn }).makeImportValue().toString(),
        };
    }
}
exports.StateMachine = StateMachine;
class ImportedStateMachine extends cdk.Construct {
    constructor(parent, id, props) {
        super(parent, id);
        this.stateMachineArn = props.stateMachineArn;
    }
}
//# sourceMappingURL=data:application/json;base64,