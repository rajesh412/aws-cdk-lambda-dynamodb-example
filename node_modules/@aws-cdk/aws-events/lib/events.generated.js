"use strict";
// Copyright 2012-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// Generated from the AWS CloudFormation Resource Specification
// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html
// @cfn2ts:meta@ {"generated":"2018-12-20T13:06:02.495Z","fingerprint":"4xhyEymsUM9s4JJjSxvkQU74b53Qzw5UnA34Qv+u5bo="}
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length | This is generated code - line lengths are difficult to control
const cdk = require("@aws-cdk/cdk");
/**
 * Determine whether the given properties match those of a ``CfnEventBusPolicyProps``
 *
 * @param properties the TypeScript properties of a ``CfnEventBusPolicyProps``
 *
 * @returns the result of the validation.
 */
function CfnEventBusPolicyPropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));
    errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));
    errors.collect(cdk.propertyValidator('condition', CfnEventBusPolicy_ConditionPropertyValidator)(properties.condition));
    errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));
    errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));
    errors.collect(cdk.propertyValidator('statementId', cdk.requiredValidator)(properties.statementId));
    errors.collect(cdk.propertyValidator('statementId', cdk.validateString)(properties.statementId));
    return errors.wrap('supplied properties not correct for "CfnEventBusPolicyProps"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy`` resource
 *
 * @param properties the TypeScript properties of a ``CfnEventBusPolicyProps``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy`` resource.
 */
function cfnEventBusPolicyPropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnEventBusPolicyPropsValidator(properties).assertSuccess();
    return {
        Action: cdk.stringToCloudFormation(properties.action),
        Principal: cdk.stringToCloudFormation(properties.principal),
        StatementId: cdk.stringToCloudFormation(properties.statementId),
        Condition: cfnEventBusPolicyConditionPropertyToCloudFormation(properties.condition),
    };
}
/**
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbuspolicy.html
 */
class CfnEventBusPolicy extends cdk.Resource {
    /**
     * Creates a new ``AWS::Events::EventBusPolicy``.
     *
     * @param parent   the ``cdk.Construct`` this ``CfnEventBusPolicy`` is a part of
     * @param name     the name of the resource in the ``cdk.Construct`` tree
     * @param properties the properties of this ``CfnEventBusPolicy``
     */
    constructor(parent, name, properties) {
        super(parent, name, { type: CfnEventBusPolicy.resourceTypeName, properties });
        cdk.requireProperty(properties, 'action', this);
        cdk.requireProperty(properties, 'principal', this);
        cdk.requireProperty(properties, 'statementId', this);
        this.eventBusPolicyId = this.ref.toString();
    }
    get propertyOverrides() {
        return this.untypedPropertyOverrides;
    }
    renderProperties(properties) {
        return cfnEventBusPolicyPropsToCloudFormation(cdk.resolve(properties));
    }
}
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnEventBusPolicy.resourceTypeName = "AWS::Events::EventBusPolicy";
exports.CfnEventBusPolicy = CfnEventBusPolicy;
/**
 * Determine whether the given properties match those of a ``ConditionProperty``
 *
 * @param properties the TypeScript properties of a ``ConditionProperty``
 *
 * @returns the result of the validation.
 */
function CfnEventBusPolicy_ConditionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));
    errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
    errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));
    return errors.wrap('supplied properties not correct for "ConditionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy.Condition`` resource
 *
 * @param properties the TypeScript properties of a ``ConditionProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy.Condition`` resource.
 */
function cfnEventBusPolicyConditionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnEventBusPolicy_ConditionPropertyValidator(properties).assertSuccess();
    return {
        Key: cdk.stringToCloudFormation(properties.key),
        Type: cdk.stringToCloudFormation(properties.type),
        Value: cdk.stringToCloudFormation(properties.value),
    };
}
// legacy "cloudformation" namespace (will be deprecated soon)
var cloudformation;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``EventBusPolicyResourceProps``
     *
     * @param properties the TypeScript properties of a ``EventBusPolicyResourceProps``
     *
     * @returns the result of the validation.
     */
    function EventBusPolicyResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('action', cdk.requiredValidator)(properties.action));
        errors.collect(cdk.propertyValidator('action', cdk.validateString)(properties.action));
        errors.collect(cdk.propertyValidator('condition', EventBusPolicyResource_ConditionPropertyValidator)(properties.condition));
        errors.collect(cdk.propertyValidator('principal', cdk.requiredValidator)(properties.principal));
        errors.collect(cdk.propertyValidator('principal', cdk.validateString)(properties.principal));
        errors.collect(cdk.propertyValidator('statementId', cdk.requiredValidator)(properties.statementId));
        errors.collect(cdk.propertyValidator('statementId', cdk.validateString)(properties.statementId));
        return errors.wrap('supplied properties not correct for "EventBusPolicyResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy`` resource
     *
     * @param properties the TypeScript properties of a ``EventBusPolicyResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy`` resource.
     */
    function eventBusPolicyResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EventBusPolicyResourcePropsValidator(properties).assertSuccess();
        return {
            Action: cdk.stringToCloudFormation(properties.action),
            Principal: cdk.stringToCloudFormation(properties.principal),
            StatementId: cdk.stringToCloudFormation(properties.statementId),
            Condition: eventBusPolicyResourceConditionPropertyToCloudFormation(properties.condition),
        };
    }
    /**
     * @deprecated "cloudformation.EventBusPolicyResource" will be deprecated in a future release in favor of "CfnEventBusPolicy" (see https://github.com/awslabs/aws-cdk/issues/878)
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-eventbuspolicy.html
     */
    class EventBusPolicyResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::Events::EventBusPolicy``.
         *
         * @param parent   the ``cdk.Construct`` this ``EventBusPolicyResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``EventBusPolicyResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: EventBusPolicyResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'action', this);
            cdk.requireProperty(properties, 'principal', this);
            cdk.requireProperty(properties, 'statementId', this);
            this.eventBusPolicyId = this.ref.toString();
            this.addWarning('DEPRECATION: "cloudformation.EventBusPolicyResource" will be deprecated in a future release in favor of "CfnEventBusPolicy" (see https://github.com/awslabs/aws-cdk/issues/878)');
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return eventBusPolicyResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    EventBusPolicyResource.resourceTypeName = "AWS::Events::EventBusPolicy";
    cloudformation.EventBusPolicyResource = EventBusPolicyResource;
    /**
     * Determine whether the given properties match those of a ``ConditionProperty``
     *
     * @param properties the TypeScript properties of a ``ConditionProperty``
     *
     * @returns the result of the validation.
     */
    function EventBusPolicyResource_ConditionPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));
        errors.collect(cdk.propertyValidator('type', cdk.validateString)(properties.type));
        errors.collect(cdk.propertyValidator('value', cdk.validateString)(properties.value));
        return errors.wrap('supplied properties not correct for "ConditionProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy.Condition`` resource
     *
     * @param properties the TypeScript properties of a ``ConditionProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::EventBusPolicy.Condition`` resource.
     */
    function eventBusPolicyResourceConditionPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        EventBusPolicyResource_ConditionPropertyValidator(properties).assertSuccess();
        return {
            Key: cdk.stringToCloudFormation(properties.key),
            Type: cdk.stringToCloudFormation(properties.type),
            Value: cdk.stringToCloudFormation(properties.value),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
/**
 * Determine whether the given properties match those of a ``CfnRuleProps``
 *
 * @param properties the TypeScript properties of a ``CfnRuleProps``
 *
 * @returns the result of the validation.
 */
function CfnRulePropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
    errors.collect(cdk.propertyValidator('eventPattern', cdk.validateObject)(properties.eventPattern));
    errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
    errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));
    errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));
    errors.collect(cdk.propertyValidator('targets', cdk.listValidator(CfnRule_TargetPropertyValidator))(properties.targets));
    return errors.wrap('supplied properties not correct for "CfnRuleProps"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule`` resource
 *
 * @param properties the TypeScript properties of a ``CfnRuleProps``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule`` resource.
 */
function cfnRulePropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRulePropsValidator(properties).assertSuccess();
    return {
        Description: cdk.stringToCloudFormation(properties.description),
        EventPattern: cdk.objectToCloudFormation(properties.eventPattern),
        Name: cdk.stringToCloudFormation(properties.name),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),
        State: cdk.stringToCloudFormation(properties.state),
        Targets: cdk.listMapper(cfnRuleTargetPropertyToCloudFormation)(properties.targets),
    };
}
/**
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html
 */
class CfnRule extends cdk.Resource {
    /**
     * Creates a new ``AWS::Events::Rule``.
     *
     * @param parent   the ``cdk.Construct`` this ``CfnRule`` is a part of
     * @param name     the name of the resource in the ``cdk.Construct`` tree
     * @param properties the properties of this ``CfnRule``
     */
    constructor(parent, name, properties) {
        super(parent, name, { type: CfnRule.resourceTypeName, properties });
        this.ruleArn = this.getAtt('Arn').toString();
        this.ruleId = this.ref.toString();
    }
    get propertyOverrides() {
        return this.untypedPropertyOverrides;
    }
    renderProperties(properties) {
        return cfnRulePropsToCloudFormation(cdk.resolve(properties));
    }
}
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnRule.resourceTypeName = "AWS::Events::Rule";
exports.CfnRule = CfnRule;
/**
 * Determine whether the given properties match those of a ``EcsParametersProperty``
 *
 * @param properties the TypeScript properties of a ``EcsParametersProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_EcsParametersPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('taskCount', cdk.validateNumber)(properties.taskCount));
    errors.collect(cdk.propertyValidator('taskDefinitionArn', cdk.requiredValidator)(properties.taskDefinitionArn));
    errors.collect(cdk.propertyValidator('taskDefinitionArn', cdk.validateString)(properties.taskDefinitionArn));
    return errors.wrap('supplied properties not correct for "EcsParametersProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.EcsParameters`` resource
 *
 * @param properties the TypeScript properties of a ``EcsParametersProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.EcsParameters`` resource.
 */
function cfnRuleEcsParametersPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_EcsParametersPropertyValidator(properties).assertSuccess();
    return {
        TaskCount: cdk.numberToCloudFormation(properties.taskCount),
        TaskDefinitionArn: cdk.stringToCloudFormation(properties.taskDefinitionArn),
    };
}
/**
 * Determine whether the given properties match those of a ``InputTransformerProperty``
 *
 * @param properties the TypeScript properties of a ``InputTransformerProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_InputTransformerPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('inputPathsMap', cdk.hashValidator(cdk.validateString))(properties.inputPathsMap));
    errors.collect(cdk.propertyValidator('inputTemplate', cdk.requiredValidator)(properties.inputTemplate));
    errors.collect(cdk.propertyValidator('inputTemplate', cdk.validateString)(properties.inputTemplate));
    return errors.wrap('supplied properties not correct for "InputTransformerProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.InputTransformer`` resource
 *
 * @param properties the TypeScript properties of a ``InputTransformerProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.InputTransformer`` resource.
 */
function cfnRuleInputTransformerPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_InputTransformerPropertyValidator(properties).assertSuccess();
    return {
        InputPathsMap: cdk.hashMapper(cdk.stringToCloudFormation)(properties.inputPathsMap),
        InputTemplate: cdk.stringToCloudFormation(properties.inputTemplate),
    };
}
/**
 * Determine whether the given properties match those of a ``KinesisParametersProperty``
 *
 * @param properties the TypeScript properties of a ``KinesisParametersProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_KinesisParametersPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('partitionKeyPath', cdk.requiredValidator)(properties.partitionKeyPath));
    errors.collect(cdk.propertyValidator('partitionKeyPath', cdk.validateString)(properties.partitionKeyPath));
    return errors.wrap('supplied properties not correct for "KinesisParametersProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.KinesisParameters`` resource
 *
 * @param properties the TypeScript properties of a ``KinesisParametersProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.KinesisParameters`` resource.
 */
function cfnRuleKinesisParametersPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_KinesisParametersPropertyValidator(properties).assertSuccess();
    return {
        PartitionKeyPath: cdk.stringToCloudFormation(properties.partitionKeyPath),
    };
}
/**
 * Determine whether the given properties match those of a ``RunCommandParametersProperty``
 *
 * @param properties the TypeScript properties of a ``RunCommandParametersProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_RunCommandParametersPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('runCommandTargets', cdk.requiredValidator)(properties.runCommandTargets));
    errors.collect(cdk.propertyValidator('runCommandTargets', cdk.listValidator(CfnRule_RunCommandTargetPropertyValidator))(properties.runCommandTargets));
    return errors.wrap('supplied properties not correct for "RunCommandParametersProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandParameters`` resource
 *
 * @param properties the TypeScript properties of a ``RunCommandParametersProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandParameters`` resource.
 */
function cfnRuleRunCommandParametersPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_RunCommandParametersPropertyValidator(properties).assertSuccess();
    return {
        RunCommandTargets: cdk.listMapper(cfnRuleRunCommandTargetPropertyToCloudFormation)(properties.runCommandTargets),
    };
}
/**
 * Determine whether the given properties match those of a ``RunCommandTargetProperty``
 *
 * @param properties the TypeScript properties of a ``RunCommandTargetProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_RunCommandTargetPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));
    errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));
    errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));
    errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));
    return errors.wrap('supplied properties not correct for "RunCommandTargetProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandTarget`` resource
 *
 * @param properties the TypeScript properties of a ``RunCommandTargetProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandTarget`` resource.
 */
function cfnRuleRunCommandTargetPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_RunCommandTargetPropertyValidator(properties).assertSuccess();
    return {
        Key: cdk.stringToCloudFormation(properties.key),
        Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),
    };
}
/**
 * Determine whether the given properties match those of a ``SqsParametersProperty``
 *
 * @param properties the TypeScript properties of a ``SqsParametersProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_SqsParametersPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('messageGroupId', cdk.requiredValidator)(properties.messageGroupId));
    errors.collect(cdk.propertyValidator('messageGroupId', cdk.validateString)(properties.messageGroupId));
    return errors.wrap('supplied properties not correct for "SqsParametersProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.SqsParameters`` resource
 *
 * @param properties the TypeScript properties of a ``SqsParametersProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.SqsParameters`` resource.
 */
function cfnRuleSqsParametersPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_SqsParametersPropertyValidator(properties).assertSuccess();
    return {
        MessageGroupId: cdk.stringToCloudFormation(properties.messageGroupId),
    };
}
/**
 * Determine whether the given properties match those of a ``TargetProperty``
 *
 * @param properties the TypeScript properties of a ``TargetProperty``
 *
 * @returns the result of the validation.
 */
function CfnRule_TargetPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));
    errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
    errors.collect(cdk.propertyValidator('ecsParameters', CfnRule_EcsParametersPropertyValidator)(properties.ecsParameters));
    errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
    errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
    errors.collect(cdk.propertyValidator('input', cdk.validateString)(properties.input));
    errors.collect(cdk.propertyValidator('inputPath', cdk.validateString)(properties.inputPath));
    errors.collect(cdk.propertyValidator('inputTransformer', CfnRule_InputTransformerPropertyValidator)(properties.inputTransformer));
    errors.collect(cdk.propertyValidator('kinesisParameters', CfnRule_KinesisParametersPropertyValidator)(properties.kinesisParameters));
    errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
    errors.collect(cdk.propertyValidator('runCommandParameters', CfnRule_RunCommandParametersPropertyValidator)(properties.runCommandParameters));
    errors.collect(cdk.propertyValidator('sqsParameters', CfnRule_SqsParametersPropertyValidator)(properties.sqsParameters));
    return errors.wrap('supplied properties not correct for "TargetProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.Target`` resource
 *
 * @param properties the TypeScript properties of a ``TargetProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.Target`` resource.
 */
function cfnRuleTargetPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnRule_TargetPropertyValidator(properties).assertSuccess();
    return {
        Arn: cdk.stringToCloudFormation(properties.arn),
        EcsParameters: cfnRuleEcsParametersPropertyToCloudFormation(properties.ecsParameters),
        Id: cdk.stringToCloudFormation(properties.id),
        Input: cdk.stringToCloudFormation(properties.input),
        InputPath: cdk.stringToCloudFormation(properties.inputPath),
        InputTransformer: cfnRuleInputTransformerPropertyToCloudFormation(properties.inputTransformer),
        KinesisParameters: cfnRuleKinesisParametersPropertyToCloudFormation(properties.kinesisParameters),
        RoleArn: cdk.stringToCloudFormation(properties.roleArn),
        RunCommandParameters: cfnRuleRunCommandParametersPropertyToCloudFormation(properties.runCommandParameters),
        SqsParameters: cfnRuleSqsParametersPropertyToCloudFormation(properties.sqsParameters),
    };
}
// legacy "cloudformation" namespace (will be deprecated soon)
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``RuleResourceProps``
     *
     * @param properties the TypeScript properties of a ``RuleResourceProps``
     *
     * @returns the result of the validation.
     */
    function RuleResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('description', cdk.validateString)(properties.description));
        errors.collect(cdk.propertyValidator('eventPattern', cdk.validateObject)(properties.eventPattern));
        errors.collect(cdk.propertyValidator('name', cdk.validateString)(properties.name));
        errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
        errors.collect(cdk.propertyValidator('scheduleExpression', cdk.validateString)(properties.scheduleExpression));
        errors.collect(cdk.propertyValidator('state', cdk.validateString)(properties.state));
        errors.collect(cdk.propertyValidator('targets', cdk.listValidator(RuleResource_TargetPropertyValidator))(properties.targets));
        return errors.wrap('supplied properties not correct for "RuleResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule`` resource
     *
     * @param properties the TypeScript properties of a ``RuleResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule`` resource.
     */
    function ruleResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResourcePropsValidator(properties).assertSuccess();
        return {
            Description: cdk.stringToCloudFormation(properties.description),
            EventPattern: cdk.objectToCloudFormation(properties.eventPattern),
            Name: cdk.stringToCloudFormation(properties.name),
            RoleArn: cdk.stringToCloudFormation(properties.roleArn),
            ScheduleExpression: cdk.stringToCloudFormation(properties.scheduleExpression),
            State: cdk.stringToCloudFormation(properties.state),
            Targets: cdk.listMapper(ruleResourceTargetPropertyToCloudFormation)(properties.targets),
        };
    }
    /**
     * @deprecated "cloudformation.RuleResource" will be deprecated in a future release in favor of "CfnRule" (see https://github.com/awslabs/aws-cdk/issues/878)
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html
     */
    class RuleResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::Events::Rule``.
         *
         * @param parent   the ``cdk.Construct`` this ``RuleResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``RuleResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: RuleResource.resourceTypeName, properties });
            this.ruleArn = this.getAtt('Arn').toString();
            this.ruleId = this.ref.toString();
            this.addWarning('DEPRECATION: "cloudformation.RuleResource" will be deprecated in a future release in favor of "CfnRule" (see https://github.com/awslabs/aws-cdk/issues/878)');
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return ruleResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    RuleResource.resourceTypeName = "AWS::Events::Rule";
    cloudformation.RuleResource = RuleResource;
    /**
     * Determine whether the given properties match those of a ``EcsParametersProperty``
     *
     * @param properties the TypeScript properties of a ``EcsParametersProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_EcsParametersPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('taskCount', cdk.validateNumber)(properties.taskCount));
        errors.collect(cdk.propertyValidator('taskDefinitionArn', cdk.requiredValidator)(properties.taskDefinitionArn));
        errors.collect(cdk.propertyValidator('taskDefinitionArn', cdk.validateString)(properties.taskDefinitionArn));
        return errors.wrap('supplied properties not correct for "EcsParametersProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.EcsParameters`` resource
     *
     * @param properties the TypeScript properties of a ``EcsParametersProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.EcsParameters`` resource.
     */
    function ruleResourceEcsParametersPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_EcsParametersPropertyValidator(properties).assertSuccess();
        return {
            TaskCount: cdk.numberToCloudFormation(properties.taskCount),
            TaskDefinitionArn: cdk.stringToCloudFormation(properties.taskDefinitionArn),
        };
    }
    /**
     * Determine whether the given properties match those of a ``InputTransformerProperty``
     *
     * @param properties the TypeScript properties of a ``InputTransformerProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_InputTransformerPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('inputPathsMap', cdk.hashValidator(cdk.validateString))(properties.inputPathsMap));
        errors.collect(cdk.propertyValidator('inputTemplate', cdk.requiredValidator)(properties.inputTemplate));
        errors.collect(cdk.propertyValidator('inputTemplate', cdk.validateString)(properties.inputTemplate));
        return errors.wrap('supplied properties not correct for "InputTransformerProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.InputTransformer`` resource
     *
     * @param properties the TypeScript properties of a ``InputTransformerProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.InputTransformer`` resource.
     */
    function ruleResourceInputTransformerPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_InputTransformerPropertyValidator(properties).assertSuccess();
        return {
            InputPathsMap: cdk.hashMapper(cdk.stringToCloudFormation)(properties.inputPathsMap),
            InputTemplate: cdk.stringToCloudFormation(properties.inputTemplate),
        };
    }
    /**
     * Determine whether the given properties match those of a ``KinesisParametersProperty``
     *
     * @param properties the TypeScript properties of a ``KinesisParametersProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_KinesisParametersPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('partitionKeyPath', cdk.requiredValidator)(properties.partitionKeyPath));
        errors.collect(cdk.propertyValidator('partitionKeyPath', cdk.validateString)(properties.partitionKeyPath));
        return errors.wrap('supplied properties not correct for "KinesisParametersProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.KinesisParameters`` resource
     *
     * @param properties the TypeScript properties of a ``KinesisParametersProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.KinesisParameters`` resource.
     */
    function ruleResourceKinesisParametersPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_KinesisParametersPropertyValidator(properties).assertSuccess();
        return {
            PartitionKeyPath: cdk.stringToCloudFormation(properties.partitionKeyPath),
        };
    }
    /**
     * Determine whether the given properties match those of a ``RunCommandParametersProperty``
     *
     * @param properties the TypeScript properties of a ``RunCommandParametersProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_RunCommandParametersPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('runCommandTargets', cdk.requiredValidator)(properties.runCommandTargets));
        errors.collect(cdk.propertyValidator('runCommandTargets', cdk.listValidator(RuleResource_RunCommandTargetPropertyValidator))(properties.runCommandTargets));
        return errors.wrap('supplied properties not correct for "RunCommandParametersProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandParameters`` resource
     *
     * @param properties the TypeScript properties of a ``RunCommandParametersProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandParameters`` resource.
     */
    function ruleResourceRunCommandParametersPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_RunCommandParametersPropertyValidator(properties).assertSuccess();
        return {
            RunCommandTargets: cdk.listMapper(ruleResourceRunCommandTargetPropertyToCloudFormation)(properties.runCommandTargets),
        };
    }
    /**
     * Determine whether the given properties match those of a ``RunCommandTargetProperty``
     *
     * @param properties the TypeScript properties of a ``RunCommandTargetProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_RunCommandTargetPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('key', cdk.requiredValidator)(properties.key));
        errors.collect(cdk.propertyValidator('key', cdk.validateString)(properties.key));
        errors.collect(cdk.propertyValidator('values', cdk.requiredValidator)(properties.values));
        errors.collect(cdk.propertyValidator('values', cdk.listValidator(cdk.validateString))(properties.values));
        return errors.wrap('supplied properties not correct for "RunCommandTargetProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandTarget`` resource
     *
     * @param properties the TypeScript properties of a ``RunCommandTargetProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.RunCommandTarget`` resource.
     */
    function ruleResourceRunCommandTargetPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_RunCommandTargetPropertyValidator(properties).assertSuccess();
        return {
            Key: cdk.stringToCloudFormation(properties.key),
            Values: cdk.listMapper(cdk.stringToCloudFormation)(properties.values),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SqsParametersProperty``
     *
     * @param properties the TypeScript properties of a ``SqsParametersProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_SqsParametersPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('messageGroupId', cdk.requiredValidator)(properties.messageGroupId));
        errors.collect(cdk.propertyValidator('messageGroupId', cdk.validateString)(properties.messageGroupId));
        return errors.wrap('supplied properties not correct for "SqsParametersProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.SqsParameters`` resource
     *
     * @param properties the TypeScript properties of a ``SqsParametersProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.SqsParameters`` resource.
     */
    function ruleResourceSqsParametersPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_SqsParametersPropertyValidator(properties).assertSuccess();
        return {
            MessageGroupId: cdk.stringToCloudFormation(properties.messageGroupId),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TargetProperty``
     *
     * @param properties the TypeScript properties of a ``TargetProperty``
     *
     * @returns the result of the validation.
     */
    function RuleResource_TargetPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('arn', cdk.requiredValidator)(properties.arn));
        errors.collect(cdk.propertyValidator('arn', cdk.validateString)(properties.arn));
        errors.collect(cdk.propertyValidator('ecsParameters', RuleResource_EcsParametersPropertyValidator)(properties.ecsParameters));
        errors.collect(cdk.propertyValidator('id', cdk.requiredValidator)(properties.id));
        errors.collect(cdk.propertyValidator('id', cdk.validateString)(properties.id));
        errors.collect(cdk.propertyValidator('input', cdk.validateString)(properties.input));
        errors.collect(cdk.propertyValidator('inputPath', cdk.validateString)(properties.inputPath));
        errors.collect(cdk.propertyValidator('inputTransformer', RuleResource_InputTransformerPropertyValidator)(properties.inputTransformer));
        errors.collect(cdk.propertyValidator('kinesisParameters', RuleResource_KinesisParametersPropertyValidator)(properties.kinesisParameters));
        errors.collect(cdk.propertyValidator('roleArn', cdk.validateString)(properties.roleArn));
        errors.collect(cdk.propertyValidator('runCommandParameters', RuleResource_RunCommandParametersPropertyValidator)(properties.runCommandParameters));
        errors.collect(cdk.propertyValidator('sqsParameters', RuleResource_SqsParametersPropertyValidator)(properties.sqsParameters));
        return errors.wrap('supplied properties not correct for "TargetProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::Events::Rule.Target`` resource
     *
     * @param properties the TypeScript properties of a ``TargetProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::Events::Rule.Target`` resource.
     */
    function ruleResourceTargetPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        RuleResource_TargetPropertyValidator(properties).assertSuccess();
        return {
            Arn: cdk.stringToCloudFormation(properties.arn),
            EcsParameters: ruleResourceEcsParametersPropertyToCloudFormation(properties.ecsParameters),
            Id: cdk.stringToCloudFormation(properties.id),
            Input: cdk.stringToCloudFormation(properties.input),
            InputPath: cdk.stringToCloudFormation(properties.inputPath),
            InputTransformer: ruleResourceInputTransformerPropertyToCloudFormation(properties.inputTransformer),
            KinesisParameters: ruleResourceKinesisParametersPropertyToCloudFormation(properties.kinesisParameters),
            RoleArn: cdk.stringToCloudFormation(properties.roleArn),
            RunCommandParameters: ruleResourceRunCommandParametersPropertyToCloudFormation(properties.runCommandParameters),
            SqsParameters: ruleResourceSqsParametersPropertyToCloudFormation(properties.sqsParameters),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
//# sourceMappingURL=data:application/json;base64,