"use strict";
const cx_api_1 = require("@aws-cdk/cx-api");
const lib_1 = require("../lib");
module.exports = {
    'By default, environment region and account are not defined'(test) {
        const stack = new lib_1.Stack();
        test.ok(stack.env);
        test.equal(stack.env.account, null);
        test.equal(stack.env.region, null);
        test.done();
    },
    'Default account and region can be set in context (`aws:cdk:toolkit:default-account` and `aws:cdk:toolkit:default-region`)'(test) {
        const app = new lib_1.App();
        app.setContext(cx_api_1.DEFAULT_ACCOUNT_CONTEXT_KEY, 'my-default-account');
        app.setContext(cx_api_1.DEFAULT_REGION_CONTEXT_KEY, 'my-default-region');
        const stack = new lib_1.Stack(app, 'my-stack');
        test.equal(stack.env.account, 'my-default-account');
        test.equal(stack.env.region, 'my-default-region');
        test.done();
    },
    'If only `env.region` or `env.account` are specified, defaults will be used for the other'(test) {
        const app = new lib_1.App();
        app.setContext(cx_api_1.DEFAULT_ACCOUNT_CONTEXT_KEY, 'my-default-account');
        app.setContext(cx_api_1.DEFAULT_REGION_CONTEXT_KEY, 'my-default-region');
        const stack1 = new lib_1.Stack(app, 'S1', { env: { region: 'only-region' } });
        const stack2 = new lib_1.Stack(app, 'S2', { env: { account: 'only-account' } });
        test.equal(stack1.env.account, 'my-default-account');
        test.equal(stack1.env.region, 'only-region');
        test.equal(stack2.env.account, 'only-account');
        test.equal(stack2.env.region, 'my-default-region');
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5lbnZpcm9ubWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QuZW52aXJvbm1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUEwRjtBQUUxRixnQ0FBb0M7QUFFcEMsaUJBQVM7SUFDUCw0REFBNEQsQ0FBQyxJQUFVO1FBQ3JFLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBSyxFQUFFLENBQUM7UUFDMUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCwySEFBMkgsQ0FBQyxJQUFVO1FBQ3BJLE1BQU0sR0FBRyxHQUFHLElBQUksU0FBRyxFQUFFLENBQUM7UUFFdEIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxvQ0FBMkIsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ2xFLEdBQUcsQ0FBQyxVQUFVLENBQUMsbUNBQTBCLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUVoRSxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQUssQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztRQUVsRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsMEZBQTBGLENBQUMsSUFBVTtRQUNuRyxNQUFNLEdBQUcsR0FBRyxJQUFJLFNBQUcsRUFBRSxDQUFDO1FBRXRCLEdBQUcsQ0FBQyxVQUFVLENBQUMsb0NBQTJCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztRQUNsRSxHQUFHLENBQUMsVUFBVSxDQUFDLG1DQUEwQixFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFFaEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFMUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUMvQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLG1CQUFtQixDQUFDLENBQUM7UUFFbkQsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUZBVUxUX0FDQ09VTlRfQ09OVEVYVF9LRVksIERFRkFVTFRfUkVHSU9OX0NPTlRFWFRfS0VZIH0gZnJvbSAnQGF3cy1jZGsvY3gtYXBpJztcbmltcG9ydCB7IFRlc3QgfSBmcm9tICdub2RldW5pdCc7XG5pbXBvcnQgeyBBcHAsIFN0YWNrIH0gZnJvbSAnLi4vbGliJztcblxuZXhwb3J0ID0ge1xuICAnQnkgZGVmYXVsdCwgZW52aXJvbm1lbnQgcmVnaW9uIGFuZCBhY2NvdW50IGFyZSBub3QgZGVmaW5lZCcodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IHN0YWNrID0gbmV3IFN0YWNrKCk7XG4gICAgdGVzdC5vayhzdGFjay5lbnYpO1xuICAgIHRlc3QuZXF1YWwoc3RhY2suZW52LmFjY291bnQsIG51bGwpO1xuICAgIHRlc3QuZXF1YWwoc3RhY2suZW52LnJlZ2lvbiwgbnVsbCk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ0RlZmF1bHQgYWNjb3VudCBhbmQgcmVnaW9uIGNhbiBiZSBzZXQgaW4gY29udGV4dCAoYGF3czpjZGs6dG9vbGtpdDpkZWZhdWx0LWFjY291bnRgIGFuZCBgYXdzOmNkazp0b29sa2l0OmRlZmF1bHQtcmVnaW9uYCknKHRlc3Q6IFRlc3QpIHtcbiAgICBjb25zdCBhcHAgPSBuZXcgQXBwKCk7XG5cbiAgICBhcHAuc2V0Q29udGV4dChERUZBVUxUX0FDQ09VTlRfQ09OVEVYVF9LRVksICdteS1kZWZhdWx0LWFjY291bnQnKTtcbiAgICBhcHAuc2V0Q29udGV4dChERUZBVUxUX1JFR0lPTl9DT05URVhUX0tFWSwgJ215LWRlZmF1bHQtcmVnaW9uJyk7XG5cbiAgICBjb25zdCBzdGFjayA9IG5ldyBTdGFjayhhcHAsICdteS1zdGFjaycpO1xuXG4gICAgdGVzdC5lcXVhbChzdGFjay5lbnYuYWNjb3VudCwgJ215LWRlZmF1bHQtYWNjb3VudCcpO1xuICAgIHRlc3QuZXF1YWwoc3RhY2suZW52LnJlZ2lvbiwgJ215LWRlZmF1bHQtcmVnaW9uJyk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAnSWYgb25seSBgZW52LnJlZ2lvbmAgb3IgYGVudi5hY2NvdW50YCBhcmUgc3BlY2lmaWVkLCBkZWZhdWx0cyB3aWxsIGJlIHVzZWQgZm9yIHRoZSBvdGhlcicodGVzdDogVGVzdCkge1xuICAgIGNvbnN0IGFwcCA9IG5ldyBBcHAoKTtcblxuICAgIGFwcC5zZXRDb250ZXh0KERFRkFVTFRfQUNDT1VOVF9DT05URVhUX0tFWSwgJ215LWRlZmF1bHQtYWNjb3VudCcpO1xuICAgIGFwcC5zZXRDb250ZXh0KERFRkFVTFRfUkVHSU9OX0NPTlRFWFRfS0VZLCAnbXktZGVmYXVsdC1yZWdpb24nKTtcblxuICAgIGNvbnN0IHN0YWNrMSA9IG5ldyBTdGFjayhhcHAsICdTMScsIHsgZW52OiB7IHJlZ2lvbjogJ29ubHktcmVnaW9uJyB9IH0pO1xuICAgIGNvbnN0IHN0YWNrMiA9IG5ldyBTdGFjayhhcHAsICdTMicsIHsgZW52OiB7IGFjY291bnQ6ICdvbmx5LWFjY291bnQnIH0gfSk7XG5cbiAgICB0ZXN0LmVxdWFsKHN0YWNrMS5lbnYuYWNjb3VudCwgJ215LWRlZmF1bHQtYWNjb3VudCcpO1xuICAgIHRlc3QuZXF1YWwoc3RhY2sxLmVudi5yZWdpb24sICdvbmx5LXJlZ2lvbicpO1xuXG4gICAgdGVzdC5lcXVhbChzdGFjazIuZW52LmFjY291bnQsICdvbmx5LWFjY291bnQnKTtcbiAgICB0ZXN0LmVxdWFsKHN0YWNrMi5lbnYucmVnaW9uLCAnbXktZGVmYXVsdC1yZWdpb24nKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxufSBhcyBhbnk7XG4iXX0=