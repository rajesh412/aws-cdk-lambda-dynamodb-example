"use strict";
// Copyright 2012-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
// Generated from the AWS CloudFormation Resource Specification
// See: docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-resource-specification.html
// @cfn2ts:meta@ {"generated":"2018-12-20T13:06:38.222Z","fingerprint":"+Evid1DxTZrmtsahIQ/4iua+Og7/hu531igKPjFoWz4="}
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:max-line-length | This is generated code - line lengths are difficult to control
const cdk = require("@aws-cdk/cdk");
/**
 * Determine whether the given properties match those of a ``CfnTableProps``
 *
 * @param properties the TypeScript properties of a ``CfnTableProps``
 *
 * @returns the result of the validation.
 */
function CfnTablePropsValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('attributeDefinitions', cdk.listValidator(CfnTable_AttributeDefinitionPropertyValidator))(properties.attributeDefinitions));
    errors.collect(cdk.propertyValidator('billingMode', cdk.validateString)(properties.billingMode));
    errors.collect(cdk.propertyValidator('globalSecondaryIndexes', cdk.listValidator(CfnTable_GlobalSecondaryIndexPropertyValidator))(properties.globalSecondaryIndexes));
    errors.collect(cdk.propertyValidator('keySchema', cdk.requiredValidator)(properties.keySchema));
    errors.collect(cdk.propertyValidator('keySchema', cdk.listValidator(CfnTable_KeySchemaPropertyValidator))(properties.keySchema));
    errors.collect(cdk.propertyValidator('localSecondaryIndexes', cdk.listValidator(CfnTable_LocalSecondaryIndexPropertyValidator))(properties.localSecondaryIndexes));
    errors.collect(cdk.propertyValidator('pointInTimeRecoverySpecification', CfnTable_PointInTimeRecoverySpecificationPropertyValidator)(properties.pointInTimeRecoverySpecification));
    errors.collect(cdk.propertyValidator('provisionedThroughput', CfnTable_ProvisionedThroughputPropertyValidator)(properties.provisionedThroughput));
    errors.collect(cdk.propertyValidator('sseSpecification', CfnTable_SSESpecificationPropertyValidator)(properties.sseSpecification));
    errors.collect(cdk.propertyValidator('streamSpecification', CfnTable_StreamSpecificationPropertyValidator)(properties.streamSpecification));
    errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));
    errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
    errors.collect(cdk.propertyValidator('timeToLiveSpecification', CfnTable_TimeToLiveSpecificationPropertyValidator)(properties.timeToLiveSpecification));
    return errors.wrap('supplied properties not correct for "CfnTableProps"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table`` resource
 *
 * @param properties the TypeScript properties of a ``CfnTableProps``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table`` resource.
 */
function cfnTablePropsToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTablePropsValidator(properties).assertSuccess();
    return {
        KeySchema: cdk.listMapper(cfnTableKeySchemaPropertyToCloudFormation)(properties.keySchema),
        AttributeDefinitions: cdk.listMapper(cfnTableAttributeDefinitionPropertyToCloudFormation)(properties.attributeDefinitions),
        BillingMode: cdk.stringToCloudFormation(properties.billingMode),
        GlobalSecondaryIndexes: cdk.listMapper(cfnTableGlobalSecondaryIndexPropertyToCloudFormation)(properties.globalSecondaryIndexes),
        LocalSecondaryIndexes: cdk.listMapper(cfnTableLocalSecondaryIndexPropertyToCloudFormation)(properties.localSecondaryIndexes),
        PointInTimeRecoverySpecification: cfnTablePointInTimeRecoverySpecificationPropertyToCloudFormation(properties.pointInTimeRecoverySpecification),
        ProvisionedThroughput: cfnTableProvisionedThroughputPropertyToCloudFormation(properties.provisionedThroughput),
        SSESpecification: cfnTableSSESpecificationPropertyToCloudFormation(properties.sseSpecification),
        StreamSpecification: cfnTableStreamSpecificationPropertyToCloudFormation(properties.streamSpecification),
        TableName: cdk.stringToCloudFormation(properties.tableName),
        Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
        TimeToLiveSpecification: cfnTableTimeToLiveSpecificationPropertyToCloudFormation(properties.timeToLiveSpecification),
    };
}
/**
 * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
 */
class CfnTable extends cdk.Resource {
    /**
     * Creates a new ``AWS::DynamoDB::Table``.
     *
     * @param parent   the ``cdk.Construct`` this ``CfnTable`` is a part of
     * @param name     the name of the resource in the ``cdk.Construct`` tree
     * @param properties the properties of this ``CfnTable``
     */
    constructor(parent, name, properties) {
        super(parent, name, { type: CfnTable.resourceTypeName, properties });
        cdk.requireProperty(properties, 'keySchema', this);
        this.tableArn = this.getAtt('Arn').toString();
        this.tableStreamArn = this.getAtt('StreamArn').toString();
        this.tableName = this.ref.toString();
    }
    get propertyOverrides() {
        return this.untypedPropertyOverrides;
    }
    renderProperties(properties) {
        return cfnTablePropsToCloudFormation(cdk.resolve(properties));
    }
}
/**
 * The CloudFormation resource type name for this resource class.
 */
CfnTable.resourceTypeName = "AWS::DynamoDB::Table";
exports.CfnTable = CfnTable;
/**
 * Determine whether the given properties match those of a ``AttributeDefinitionProperty``
 *
 * @param properties the TypeScript properties of a ``AttributeDefinitionProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_AttributeDefinitionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('attributeName', cdk.requiredValidator)(properties.attributeName));
    errors.collect(cdk.propertyValidator('attributeName', cdk.validateString)(properties.attributeName));
    errors.collect(cdk.propertyValidator('attributeType', cdk.requiredValidator)(properties.attributeType));
    errors.collect(cdk.propertyValidator('attributeType', cdk.validateString)(properties.attributeType));
    return errors.wrap('supplied properties not correct for "AttributeDefinitionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.AttributeDefinition`` resource
 *
 * @param properties the TypeScript properties of a ``AttributeDefinitionProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.AttributeDefinition`` resource.
 */
function cfnTableAttributeDefinitionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_AttributeDefinitionPropertyValidator(properties).assertSuccess();
    return {
        AttributeName: cdk.stringToCloudFormation(properties.attributeName),
        AttributeType: cdk.stringToCloudFormation(properties.attributeType),
    };
}
/**
 * Determine whether the given properties match those of a ``GlobalSecondaryIndexProperty``
 *
 * @param properties the TypeScript properties of a ``GlobalSecondaryIndexProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_GlobalSecondaryIndexPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('indexName', cdk.requiredValidator)(properties.indexName));
    errors.collect(cdk.propertyValidator('indexName', cdk.validateString)(properties.indexName));
    errors.collect(cdk.propertyValidator('keySchema', cdk.requiredValidator)(properties.keySchema));
    errors.collect(cdk.propertyValidator('keySchema', cdk.listValidator(CfnTable_KeySchemaPropertyValidator))(properties.keySchema));
    errors.collect(cdk.propertyValidator('projection', cdk.requiredValidator)(properties.projection));
    errors.collect(cdk.propertyValidator('projection', CfnTable_ProjectionPropertyValidator)(properties.projection));
    errors.collect(cdk.propertyValidator('provisionedThroughput', CfnTable_ProvisionedThroughputPropertyValidator)(properties.provisionedThroughput));
    return errors.wrap('supplied properties not correct for "GlobalSecondaryIndexProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.GlobalSecondaryIndex`` resource
 *
 * @param properties the TypeScript properties of a ``GlobalSecondaryIndexProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.GlobalSecondaryIndex`` resource.
 */
function cfnTableGlobalSecondaryIndexPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_GlobalSecondaryIndexPropertyValidator(properties).assertSuccess();
    return {
        IndexName: cdk.stringToCloudFormation(properties.indexName),
        KeySchema: cdk.listMapper(cfnTableKeySchemaPropertyToCloudFormation)(properties.keySchema),
        Projection: cfnTableProjectionPropertyToCloudFormation(properties.projection),
        ProvisionedThroughput: cfnTableProvisionedThroughputPropertyToCloudFormation(properties.provisionedThroughput),
    };
}
/**
 * Determine whether the given properties match those of a ``KeySchemaProperty``
 *
 * @param properties the TypeScript properties of a ``KeySchemaProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_KeySchemaPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('attributeName', cdk.requiredValidator)(properties.attributeName));
    errors.collect(cdk.propertyValidator('attributeName', cdk.validateString)(properties.attributeName));
    errors.collect(cdk.propertyValidator('keyType', cdk.requiredValidator)(properties.keyType));
    errors.collect(cdk.propertyValidator('keyType', cdk.validateString)(properties.keyType));
    return errors.wrap('supplied properties not correct for "KeySchemaProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.KeySchema`` resource
 *
 * @param properties the TypeScript properties of a ``KeySchemaProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.KeySchema`` resource.
 */
function cfnTableKeySchemaPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_KeySchemaPropertyValidator(properties).assertSuccess();
    return {
        AttributeName: cdk.stringToCloudFormation(properties.attributeName),
        KeyType: cdk.stringToCloudFormation(properties.keyType),
    };
}
/**
 * Determine whether the given properties match those of a ``LocalSecondaryIndexProperty``
 *
 * @param properties the TypeScript properties of a ``LocalSecondaryIndexProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_LocalSecondaryIndexPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('indexName', cdk.requiredValidator)(properties.indexName));
    errors.collect(cdk.propertyValidator('indexName', cdk.validateString)(properties.indexName));
    errors.collect(cdk.propertyValidator('keySchema', cdk.requiredValidator)(properties.keySchema));
    errors.collect(cdk.propertyValidator('keySchema', cdk.listValidator(CfnTable_KeySchemaPropertyValidator))(properties.keySchema));
    errors.collect(cdk.propertyValidator('projection', cdk.requiredValidator)(properties.projection));
    errors.collect(cdk.propertyValidator('projection', CfnTable_ProjectionPropertyValidator)(properties.projection));
    return errors.wrap('supplied properties not correct for "LocalSecondaryIndexProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.LocalSecondaryIndex`` resource
 *
 * @param properties the TypeScript properties of a ``LocalSecondaryIndexProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.LocalSecondaryIndex`` resource.
 */
function cfnTableLocalSecondaryIndexPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_LocalSecondaryIndexPropertyValidator(properties).assertSuccess();
    return {
        IndexName: cdk.stringToCloudFormation(properties.indexName),
        KeySchema: cdk.listMapper(cfnTableKeySchemaPropertyToCloudFormation)(properties.keySchema),
        Projection: cfnTableProjectionPropertyToCloudFormation(properties.projection),
    };
}
/**
 * Determine whether the given properties match those of a ``PointInTimeRecoverySpecificationProperty``
 *
 * @param properties the TypeScript properties of a ``PointInTimeRecoverySpecificationProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_PointInTimeRecoverySpecificationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('pointInTimeRecoveryEnabled', cdk.validateBoolean)(properties.pointInTimeRecoveryEnabled));
    return errors.wrap('supplied properties not correct for "PointInTimeRecoverySpecificationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.PointInTimeRecoverySpecification`` resource
 *
 * @param properties the TypeScript properties of a ``PointInTimeRecoverySpecificationProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.PointInTimeRecoverySpecification`` resource.
 */
function cfnTablePointInTimeRecoverySpecificationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_PointInTimeRecoverySpecificationPropertyValidator(properties).assertSuccess();
    return {
        PointInTimeRecoveryEnabled: cdk.booleanToCloudFormation(properties.pointInTimeRecoveryEnabled),
    };
}
/**
 * Determine whether the given properties match those of a ``ProjectionProperty``
 *
 * @param properties the TypeScript properties of a ``ProjectionProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_ProjectionPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('nonKeyAttributes', cdk.listValidator(cdk.validateString))(properties.nonKeyAttributes));
    errors.collect(cdk.propertyValidator('projectionType', cdk.validateString)(properties.projectionType));
    return errors.wrap('supplied properties not correct for "ProjectionProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.Projection`` resource
 *
 * @param properties the TypeScript properties of a ``ProjectionProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.Projection`` resource.
 */
function cfnTableProjectionPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_ProjectionPropertyValidator(properties).assertSuccess();
    return {
        NonKeyAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.nonKeyAttributes),
        ProjectionType: cdk.stringToCloudFormation(properties.projectionType),
    };
}
/**
 * Determine whether the given properties match those of a ``ProvisionedThroughputProperty``
 *
 * @param properties the TypeScript properties of a ``ProvisionedThroughputProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_ProvisionedThroughputPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('readCapacityUnits', cdk.requiredValidator)(properties.readCapacityUnits));
    errors.collect(cdk.propertyValidator('readCapacityUnits', cdk.validateNumber)(properties.readCapacityUnits));
    errors.collect(cdk.propertyValidator('writeCapacityUnits', cdk.requiredValidator)(properties.writeCapacityUnits));
    errors.collect(cdk.propertyValidator('writeCapacityUnits', cdk.validateNumber)(properties.writeCapacityUnits));
    return errors.wrap('supplied properties not correct for "ProvisionedThroughputProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.ProvisionedThroughput`` resource
 *
 * @param properties the TypeScript properties of a ``ProvisionedThroughputProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.ProvisionedThroughput`` resource.
 */
function cfnTableProvisionedThroughputPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_ProvisionedThroughputPropertyValidator(properties).assertSuccess();
    return {
        ReadCapacityUnits: cdk.numberToCloudFormation(properties.readCapacityUnits),
        WriteCapacityUnits: cdk.numberToCloudFormation(properties.writeCapacityUnits),
    };
}
/**
 * Determine whether the given properties match those of a ``SSESpecificationProperty``
 *
 * @param properties the TypeScript properties of a ``SSESpecificationProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_SSESpecificationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('sseEnabled', cdk.requiredValidator)(properties.sseEnabled));
    errors.collect(cdk.propertyValidator('sseEnabled', cdk.validateBoolean)(properties.sseEnabled));
    return errors.wrap('supplied properties not correct for "SSESpecificationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.SSESpecification`` resource
 *
 * @param properties the TypeScript properties of a ``SSESpecificationProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.SSESpecification`` resource.
 */
function cfnTableSSESpecificationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_SSESpecificationPropertyValidator(properties).assertSuccess();
    return {
        SSEEnabled: cdk.booleanToCloudFormation(properties.sseEnabled),
    };
}
/**
 * Determine whether the given properties match those of a ``StreamSpecificationProperty``
 *
 * @param properties the TypeScript properties of a ``StreamSpecificationProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_StreamSpecificationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('streamViewType', cdk.requiredValidator)(properties.streamViewType));
    errors.collect(cdk.propertyValidator('streamViewType', cdk.validateString)(properties.streamViewType));
    return errors.wrap('supplied properties not correct for "StreamSpecificationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.StreamSpecification`` resource
 *
 * @param properties the TypeScript properties of a ``StreamSpecificationProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.StreamSpecification`` resource.
 */
function cfnTableStreamSpecificationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_StreamSpecificationPropertyValidator(properties).assertSuccess();
    return {
        StreamViewType: cdk.stringToCloudFormation(properties.streamViewType),
    };
}
/**
 * Determine whether the given properties match those of a ``TimeToLiveSpecificationProperty``
 *
 * @param properties the TypeScript properties of a ``TimeToLiveSpecificationProperty``
 *
 * @returns the result of the validation.
 */
function CfnTable_TimeToLiveSpecificationPropertyValidator(properties) {
    if (!cdk.canInspect(properties)) {
        return cdk.VALIDATION_SUCCESS;
    }
    const errors = new cdk.ValidationResults();
    errors.collect(cdk.propertyValidator('attributeName', cdk.requiredValidator)(properties.attributeName));
    errors.collect(cdk.propertyValidator('attributeName', cdk.validateString)(properties.attributeName));
    errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));
    errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));
    return errors.wrap('supplied properties not correct for "TimeToLiveSpecificationProperty"');
}
/**
 * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.TimeToLiveSpecification`` resource
 *
 * @param properties the TypeScript properties of a ``TimeToLiveSpecificationProperty``
 *
 * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.TimeToLiveSpecification`` resource.
 */
function cfnTableTimeToLiveSpecificationPropertyToCloudFormation(properties) {
    if (!cdk.canInspect(properties)) {
        return properties;
    }
    CfnTable_TimeToLiveSpecificationPropertyValidator(properties).assertSuccess();
    return {
        AttributeName: cdk.stringToCloudFormation(properties.attributeName),
        Enabled: cdk.booleanToCloudFormation(properties.enabled),
    };
}
// legacy "cloudformation" namespace (will be deprecated soon)
var cloudformation;
(function (cloudformation) {
    /**
     * Determine whether the given properties match those of a ``TableResourceProps``
     *
     * @param properties the TypeScript properties of a ``TableResourceProps``
     *
     * @returns the result of the validation.
     */
    function TableResourcePropsValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('attributeDefinitions', cdk.listValidator(TableResource_AttributeDefinitionPropertyValidator))(properties.attributeDefinitions));
        errors.collect(cdk.propertyValidator('billingMode', cdk.validateString)(properties.billingMode));
        errors.collect(cdk.propertyValidator('globalSecondaryIndexes', cdk.listValidator(TableResource_GlobalSecondaryIndexPropertyValidator))(properties.globalSecondaryIndexes));
        errors.collect(cdk.propertyValidator('keySchema', cdk.requiredValidator)(properties.keySchema));
        errors.collect(cdk.propertyValidator('keySchema', cdk.listValidator(TableResource_KeySchemaPropertyValidator))(properties.keySchema));
        errors.collect(cdk.propertyValidator('localSecondaryIndexes', cdk.listValidator(TableResource_LocalSecondaryIndexPropertyValidator))(properties.localSecondaryIndexes));
        errors.collect(cdk.propertyValidator('pointInTimeRecoverySpecification', TableResource_PointInTimeRecoverySpecificationPropertyValidator)(properties.pointInTimeRecoverySpecification));
        errors.collect(cdk.propertyValidator('provisionedThroughput', TableResource_ProvisionedThroughputPropertyValidator)(properties.provisionedThroughput));
        errors.collect(cdk.propertyValidator('sseSpecification', TableResource_SSESpecificationPropertyValidator)(properties.sseSpecification));
        errors.collect(cdk.propertyValidator('streamSpecification', TableResource_StreamSpecificationPropertyValidator)(properties.streamSpecification));
        errors.collect(cdk.propertyValidator('tableName', cdk.validateString)(properties.tableName));
        errors.collect(cdk.propertyValidator('tags', cdk.listValidator(cdk.validateTag))(properties.tags));
        errors.collect(cdk.propertyValidator('timeToLiveSpecification', TableResource_TimeToLiveSpecificationPropertyValidator)(properties.timeToLiveSpecification));
        return errors.wrap('supplied properties not correct for "TableResourceProps"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table`` resource
     *
     * @param properties the TypeScript properties of a ``TableResourceProps``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table`` resource.
     */
    function tableResourcePropsToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResourcePropsValidator(properties).assertSuccess();
        return {
            KeySchema: cdk.listMapper(tableResourceKeySchemaPropertyToCloudFormation)(properties.keySchema),
            AttributeDefinitions: cdk.listMapper(tableResourceAttributeDefinitionPropertyToCloudFormation)(properties.attributeDefinitions),
            BillingMode: cdk.stringToCloudFormation(properties.billingMode),
            GlobalSecondaryIndexes: cdk.listMapper(tableResourceGlobalSecondaryIndexPropertyToCloudFormation)(properties.globalSecondaryIndexes),
            LocalSecondaryIndexes: cdk.listMapper(tableResourceLocalSecondaryIndexPropertyToCloudFormation)(properties.localSecondaryIndexes),
            PointInTimeRecoverySpecification: tableResourcePointInTimeRecoverySpecificationPropertyToCloudFormation(properties.pointInTimeRecoverySpecification),
            ProvisionedThroughput: tableResourceProvisionedThroughputPropertyToCloudFormation(properties.provisionedThroughput),
            SSESpecification: tableResourceSSESpecificationPropertyToCloudFormation(properties.sseSpecification),
            StreamSpecification: tableResourceStreamSpecificationPropertyToCloudFormation(properties.streamSpecification),
            TableName: cdk.stringToCloudFormation(properties.tableName),
            Tags: cdk.listMapper(cdk.tagToCloudFormation)(properties.tags),
            TimeToLiveSpecification: tableResourceTimeToLiveSpecificationPropertyToCloudFormation(properties.timeToLiveSpecification),
        };
    }
    /**
     * @deprecated "cloudformation.TableResource" will be deprecated in a future release in favor of "CfnTable" (see https://github.com/awslabs/aws-cdk/issues/878)
     * @link http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
     */
    class TableResource extends cdk.Resource {
        /**
         * Creates a new ``AWS::DynamoDB::Table``.
         *
         * @param parent   the ``cdk.Construct`` this ``TableResource`` is a part of
         * @param name     the name of the resource in the ``cdk.Construct`` tree
         * @param properties the properties of this ``TableResource``
         */
        constructor(parent, name, properties) {
            super(parent, name, { type: TableResource.resourceTypeName, properties });
            cdk.requireProperty(properties, 'keySchema', this);
            this.tableArn = this.getAtt('Arn').toString();
            this.tableStreamArn = this.getAtt('StreamArn').toString();
            this.tableName = this.ref.toString();
            this.addWarning('DEPRECATION: "cloudformation.TableResource" will be deprecated in a future release in favor of "CfnTable" (see https://github.com/awslabs/aws-cdk/issues/878)');
        }
        get propertyOverrides() {
            return this.untypedPropertyOverrides;
        }
        renderProperties(properties) {
            return tableResourcePropsToCloudFormation(cdk.resolve(properties));
        }
    }
    /**
     * The CloudFormation resource type name for this resource class.
     */
    TableResource.resourceTypeName = "AWS::DynamoDB::Table";
    cloudformation.TableResource = TableResource;
    /**
     * Determine whether the given properties match those of a ``AttributeDefinitionProperty``
     *
     * @param properties the TypeScript properties of a ``AttributeDefinitionProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_AttributeDefinitionPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('attributeName', cdk.requiredValidator)(properties.attributeName));
        errors.collect(cdk.propertyValidator('attributeName', cdk.validateString)(properties.attributeName));
        errors.collect(cdk.propertyValidator('attributeType', cdk.requiredValidator)(properties.attributeType));
        errors.collect(cdk.propertyValidator('attributeType', cdk.validateString)(properties.attributeType));
        return errors.wrap('supplied properties not correct for "AttributeDefinitionProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.AttributeDefinition`` resource
     *
     * @param properties the TypeScript properties of a ``AttributeDefinitionProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.AttributeDefinition`` resource.
     */
    function tableResourceAttributeDefinitionPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_AttributeDefinitionPropertyValidator(properties).assertSuccess();
        return {
            AttributeName: cdk.stringToCloudFormation(properties.attributeName),
            AttributeType: cdk.stringToCloudFormation(properties.attributeType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``GlobalSecondaryIndexProperty``
     *
     * @param properties the TypeScript properties of a ``GlobalSecondaryIndexProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_GlobalSecondaryIndexPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('indexName', cdk.requiredValidator)(properties.indexName));
        errors.collect(cdk.propertyValidator('indexName', cdk.validateString)(properties.indexName));
        errors.collect(cdk.propertyValidator('keySchema', cdk.requiredValidator)(properties.keySchema));
        errors.collect(cdk.propertyValidator('keySchema', cdk.listValidator(TableResource_KeySchemaPropertyValidator))(properties.keySchema));
        errors.collect(cdk.propertyValidator('projection', cdk.requiredValidator)(properties.projection));
        errors.collect(cdk.propertyValidator('projection', TableResource_ProjectionPropertyValidator)(properties.projection));
        errors.collect(cdk.propertyValidator('provisionedThroughput', TableResource_ProvisionedThroughputPropertyValidator)(properties.provisionedThroughput));
        return errors.wrap('supplied properties not correct for "GlobalSecondaryIndexProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.GlobalSecondaryIndex`` resource
     *
     * @param properties the TypeScript properties of a ``GlobalSecondaryIndexProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.GlobalSecondaryIndex`` resource.
     */
    function tableResourceGlobalSecondaryIndexPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_GlobalSecondaryIndexPropertyValidator(properties).assertSuccess();
        return {
            IndexName: cdk.stringToCloudFormation(properties.indexName),
            KeySchema: cdk.listMapper(tableResourceKeySchemaPropertyToCloudFormation)(properties.keySchema),
            Projection: tableResourceProjectionPropertyToCloudFormation(properties.projection),
            ProvisionedThroughput: tableResourceProvisionedThroughputPropertyToCloudFormation(properties.provisionedThroughput),
        };
    }
    /**
     * Determine whether the given properties match those of a ``KeySchemaProperty``
     *
     * @param properties the TypeScript properties of a ``KeySchemaProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_KeySchemaPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('attributeName', cdk.requiredValidator)(properties.attributeName));
        errors.collect(cdk.propertyValidator('attributeName', cdk.validateString)(properties.attributeName));
        errors.collect(cdk.propertyValidator('keyType', cdk.requiredValidator)(properties.keyType));
        errors.collect(cdk.propertyValidator('keyType', cdk.validateString)(properties.keyType));
        return errors.wrap('supplied properties not correct for "KeySchemaProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.KeySchema`` resource
     *
     * @param properties the TypeScript properties of a ``KeySchemaProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.KeySchema`` resource.
     */
    function tableResourceKeySchemaPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_KeySchemaPropertyValidator(properties).assertSuccess();
        return {
            AttributeName: cdk.stringToCloudFormation(properties.attributeName),
            KeyType: cdk.stringToCloudFormation(properties.keyType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``LocalSecondaryIndexProperty``
     *
     * @param properties the TypeScript properties of a ``LocalSecondaryIndexProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_LocalSecondaryIndexPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('indexName', cdk.requiredValidator)(properties.indexName));
        errors.collect(cdk.propertyValidator('indexName', cdk.validateString)(properties.indexName));
        errors.collect(cdk.propertyValidator('keySchema', cdk.requiredValidator)(properties.keySchema));
        errors.collect(cdk.propertyValidator('keySchema', cdk.listValidator(TableResource_KeySchemaPropertyValidator))(properties.keySchema));
        errors.collect(cdk.propertyValidator('projection', cdk.requiredValidator)(properties.projection));
        errors.collect(cdk.propertyValidator('projection', TableResource_ProjectionPropertyValidator)(properties.projection));
        return errors.wrap('supplied properties not correct for "LocalSecondaryIndexProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.LocalSecondaryIndex`` resource
     *
     * @param properties the TypeScript properties of a ``LocalSecondaryIndexProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.LocalSecondaryIndex`` resource.
     */
    function tableResourceLocalSecondaryIndexPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_LocalSecondaryIndexPropertyValidator(properties).assertSuccess();
        return {
            IndexName: cdk.stringToCloudFormation(properties.indexName),
            KeySchema: cdk.listMapper(tableResourceKeySchemaPropertyToCloudFormation)(properties.keySchema),
            Projection: tableResourceProjectionPropertyToCloudFormation(properties.projection),
        };
    }
    /**
     * Determine whether the given properties match those of a ``PointInTimeRecoverySpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``PointInTimeRecoverySpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_PointInTimeRecoverySpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('pointInTimeRecoveryEnabled', cdk.validateBoolean)(properties.pointInTimeRecoveryEnabled));
        return errors.wrap('supplied properties not correct for "PointInTimeRecoverySpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.PointInTimeRecoverySpecification`` resource
     *
     * @param properties the TypeScript properties of a ``PointInTimeRecoverySpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.PointInTimeRecoverySpecification`` resource.
     */
    function tableResourcePointInTimeRecoverySpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_PointInTimeRecoverySpecificationPropertyValidator(properties).assertSuccess();
        return {
            PointInTimeRecoveryEnabled: cdk.booleanToCloudFormation(properties.pointInTimeRecoveryEnabled),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ProjectionProperty``
     *
     * @param properties the TypeScript properties of a ``ProjectionProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_ProjectionPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('nonKeyAttributes', cdk.listValidator(cdk.validateString))(properties.nonKeyAttributes));
        errors.collect(cdk.propertyValidator('projectionType', cdk.validateString)(properties.projectionType));
        return errors.wrap('supplied properties not correct for "ProjectionProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.Projection`` resource
     *
     * @param properties the TypeScript properties of a ``ProjectionProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.Projection`` resource.
     */
    function tableResourceProjectionPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_ProjectionPropertyValidator(properties).assertSuccess();
        return {
            NonKeyAttributes: cdk.listMapper(cdk.stringToCloudFormation)(properties.nonKeyAttributes),
            ProjectionType: cdk.stringToCloudFormation(properties.projectionType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``ProvisionedThroughputProperty``
     *
     * @param properties the TypeScript properties of a ``ProvisionedThroughputProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_ProvisionedThroughputPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('readCapacityUnits', cdk.requiredValidator)(properties.readCapacityUnits));
        errors.collect(cdk.propertyValidator('readCapacityUnits', cdk.validateNumber)(properties.readCapacityUnits));
        errors.collect(cdk.propertyValidator('writeCapacityUnits', cdk.requiredValidator)(properties.writeCapacityUnits));
        errors.collect(cdk.propertyValidator('writeCapacityUnits', cdk.validateNumber)(properties.writeCapacityUnits));
        return errors.wrap('supplied properties not correct for "ProvisionedThroughputProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.ProvisionedThroughput`` resource
     *
     * @param properties the TypeScript properties of a ``ProvisionedThroughputProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.ProvisionedThroughput`` resource.
     */
    function tableResourceProvisionedThroughputPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_ProvisionedThroughputPropertyValidator(properties).assertSuccess();
        return {
            ReadCapacityUnits: cdk.numberToCloudFormation(properties.readCapacityUnits),
            WriteCapacityUnits: cdk.numberToCloudFormation(properties.writeCapacityUnits),
        };
    }
    /**
     * Determine whether the given properties match those of a ``SSESpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``SSESpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_SSESpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('sseEnabled', cdk.requiredValidator)(properties.sseEnabled));
        errors.collect(cdk.propertyValidator('sseEnabled', cdk.validateBoolean)(properties.sseEnabled));
        return errors.wrap('supplied properties not correct for "SSESpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.SSESpecification`` resource
     *
     * @param properties the TypeScript properties of a ``SSESpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.SSESpecification`` resource.
     */
    function tableResourceSSESpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_SSESpecificationPropertyValidator(properties).assertSuccess();
        return {
            SSEEnabled: cdk.booleanToCloudFormation(properties.sseEnabled),
        };
    }
    /**
     * Determine whether the given properties match those of a ``StreamSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``StreamSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_StreamSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('streamViewType', cdk.requiredValidator)(properties.streamViewType));
        errors.collect(cdk.propertyValidator('streamViewType', cdk.validateString)(properties.streamViewType));
        return errors.wrap('supplied properties not correct for "StreamSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.StreamSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``StreamSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.StreamSpecification`` resource.
     */
    function tableResourceStreamSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_StreamSpecificationPropertyValidator(properties).assertSuccess();
        return {
            StreamViewType: cdk.stringToCloudFormation(properties.streamViewType),
        };
    }
    /**
     * Determine whether the given properties match those of a ``TimeToLiveSpecificationProperty``
     *
     * @param properties the TypeScript properties of a ``TimeToLiveSpecificationProperty``
     *
     * @returns the result of the validation.
     */
    function TableResource_TimeToLiveSpecificationPropertyValidator(properties) {
        if (!cdk.canInspect(properties)) {
            return cdk.VALIDATION_SUCCESS;
        }
        const errors = new cdk.ValidationResults();
        errors.collect(cdk.propertyValidator('attributeName', cdk.requiredValidator)(properties.attributeName));
        errors.collect(cdk.propertyValidator('attributeName', cdk.validateString)(properties.attributeName));
        errors.collect(cdk.propertyValidator('enabled', cdk.requiredValidator)(properties.enabled));
        errors.collect(cdk.propertyValidator('enabled', cdk.validateBoolean)(properties.enabled));
        return errors.wrap('supplied properties not correct for "TimeToLiveSpecificationProperty"');
    }
    /**
     * Renders the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.TimeToLiveSpecification`` resource
     *
     * @param properties the TypeScript properties of a ``TimeToLiveSpecificationProperty``
     *
     * @returns the AWS CloudFormation properties of an ``AWS::DynamoDB::Table.TimeToLiveSpecification`` resource.
     */
    function tableResourceTimeToLiveSpecificationPropertyToCloudFormation(properties) {
        if (!cdk.canInspect(properties)) {
            return properties;
        }
        TableResource_TimeToLiveSpecificationPropertyValidator(properties).assertSuccess();
        return {
            AttributeName: cdk.stringToCloudFormation(properties.attributeName),
            Enabled: cdk.booleanToCloudFormation(properties.enabled),
        };
    }
})(cloudformation = exports.cloudformation || (exports.cloudformation = {}));
//# sourceMappingURL=data:application/json;base64,