import iam = require('@aws-cdk/aws-iam');
import { Construct, Tags } from '@aws-cdk/cdk';
import { EnableScalingProps, IScalableTableAttribute } from './scalable-attribute-api';
export interface Attribute {
    /**
     * The name of an attribute.
     */
    name: string;
    /**
     * The data type of an attribute.
     */
    type: AttributeType;
}
export interface TableProps {
    /**
     * The read capacity for the table. Careful if you add Global Secondary Indexes, as
     * those will share the table's provisioned throughput.
     *
     * Can only be provided if billingMode is Provisioned.
     *
     * @default 5
     */
    readCapacity?: number;
    /**
     * The write capacity for the table. Careful if you add Global Secondary Indexes, as
     * those will share the table's provisioned throughput.
     *
     * Can only be provided if billingMode is Provisioned.
     *
     * @default 5
     */
    writeCapacity?: number;
    /**
     * Specify how you are charged for read and write throughput and how you manage capacity.
     * @default Provisioned
     */
    billingMode?: BillingMode;
    /**
     * Enforces a particular physical table name.
     * @default <generated>
     */
    tableName?: string;
    /**
     * Whether point-in-time recovery is enabled.
     * @default undefined, point-in-time recovery is disabled
     */
    pitrEnabled?: boolean;
    /**
     * Whether server-side encryption is enabled.
     * @default undefined, server-side encryption is disabled
     */
    sseEnabled?: boolean;
    /**
     * When an item in the table is modified, StreamViewType determines what information
     * is written to the stream for this table. Valid values for StreamViewType are:
     * @default undefined, streams are disabled
     */
    streamSpecification?: StreamViewType;
    /**
     * The AWS resource tags to associate with the table.
     * @default undefined
     */
    tags?: Tags;
    /**
     * The name of TTL attribute.
     * @default undefined, TTL is disabled
     */
    ttlAttributeName?: string;
    /**
     * Partition key attribute definition. This is eventually required, but you
     * can also use `addPartitionKey` to specify the partition key at a later stage.
     */
    partitionKey?: Attribute;
    /**
     * Table sort key attribute definition. You can also use `addSortKey` to set
     * this up later.
     */
    sortKey?: Attribute;
}
export interface SecondaryIndexProps {
    /**
     * The name of the secondary index.
     */
    indexName: string;
    /**
     * The set of attributes that are projected into the secondary index.
     * @default ALL
     */
    projectionType?: ProjectionType;
    /**
     * The non-key attributes that are projected into the secondary index.
     * @default undefined
     */
    nonKeyAttributes?: string[];
}
export interface GlobalSecondaryIndexProps extends SecondaryIndexProps {
    /**
     * The attribute of a partition key for the global secondary index.
     */
    partitionKey: Attribute;
    /**
     * The attribute of a sort key for the global secondary index.
     * @default undefined
     */
    sortKey?: Attribute;
    /**
     * The read capacity for the global secondary index.
     *
     * Can only be provided if table billingMode is Provisioned or undefined.
     *
     * @default 5
     */
    readCapacity?: number;
    /**
     * The write capacity for the global secondary index.
     *
     * Can only be provided if table billingMode is Provisioned or undefined.
     *
     * @default 5
     */
    writeCapacity?: number;
}
export interface LocalSecondaryIndexProps extends SecondaryIndexProps {
    /**
     * The attribute of a sort key for the local secondary index.
     */
    sortKey: Attribute;
}
/**
 * Provides a DynamoDB table.
 */
export declare class Table extends Construct {
    readonly tableArn: string;
    readonly tableName: string;
    readonly tableStreamArn: string;
    private readonly table;
    private readonly keySchema;
    private readonly attributeDefinitions;
    private readonly globalSecondaryIndexes;
    private readonly localSecondaryIndexes;
    private readonly secondaryIndexNames;
    private readonly nonKeyAttributes;
    private tablePartitionKey?;
    private tableSortKey?;
    private readonly billingMode;
    private readonly tableScaling;
    private readonly indexScaling;
    private readonly scalingRole;
    constructor(parent: Construct, name: string, props?: TableProps);
    /**
     * Add a partition key of table.
     *
     * @param attribute the partition key attribute of table
     * @returns a reference to this object so that method calls can be chained together
     */
    addPartitionKey(attribute: Attribute): this;
    /**
     * Add a sort key of table.
     *
     * @param attribute the sort key of table
     * @returns a reference to this object so that method calls can be chained together
     */
    addSortKey(attribute: Attribute): this;
    /**
     * Add a global secondary index of table.
     *
     * @param props the property of global secondary index
     */
    addGlobalSecondaryIndex(props: GlobalSecondaryIndexProps): void;
    /**
     * Add a local secondary index of table.
     *
     * @param props the property of local secondary index
     */
    addLocalSecondaryIndex(props: LocalSecondaryIndexProps): void;
    /**
     * Enable read capacity scaling for this table
     *
     * @returns An object to configure additional AutoScaling settings
     */
    autoScaleReadCapacity(props: EnableScalingProps): IScalableTableAttribute;
    /**
     * Enable write capacity scaling for this table
     *
     * @returns An object to configure additional AutoScaling settings for this attribute
     */
    autoScaleWriteCapacity(props: EnableScalingProps): IScalableTableAttribute;
    /**
     * Enable read capacity scaling for the given GSI
     *
     * @returns An object to configure additional AutoScaling settings for this attribute
     */
    autoScaleGlobalSecondaryIndexReadCapacity(indexName: string, props: EnableScalingProps): IScalableTableAttribute;
    /**
     * Enable write capacity scaling for the given GSI
     *
     * @returns An object to configure additional AutoScaling settings for this attribute
     */
    autoScaleGlobalSecondaryIndexWriteCapacity(indexName: string, props: EnableScalingProps): IScalableTableAttribute;
    /**
     * Adds an IAM policy statement associated with this table to an IAM
     * principal's policy.
     * @param principal The principal (no-op if undefined)
     * @param actions The set of actions to allow (i.e. "dynamodb:PutItem", "dynamodb:GetItem", ...)
     */
    grant(principal?: iam.IPrincipal, ...actions: string[]): void;
    /**
     * Permits an IAM principal all data read operations from this table:
     * BatchGetItem, GetRecords, GetShardIterator, Query, GetItem, Scan.
     * @param principal The principal to grant access to
     */
    grantReadData(principal?: iam.IPrincipal): void;
    /**
     * Permits an IAM principal all data write operations to this table:
     * BatchWriteItem, PutItem, UpdateItem, DeleteItem.
     * @param principal The principal to grant access to
     */
    grantWriteData(principal?: iam.IPrincipal): void;
    /**
     * Permits an IAM principal to all data read/write operations to this table.
     * BatchGetItem, GetRecords, GetShardIterator, Query, GetItem, Scan,
     * BatchWriteItem, PutItem, UpdateItem, DeleteItem
     * @param principal The principal to grant access to
     */
    grantReadWriteData(principal?: iam.IPrincipal): void;
    /**
     * Permits all DynamoDB operations ("dynamodb:*") to an IAM principal.
     * @param principal The principal to grant access to
     */
    grantFullAccess(principal?: iam.IPrincipal): void;
    /**
     * Validate the table construct.
     *
     * @returns an array of validation error message
     */
    validate(): string[];
    /**
     * Validate read and write capacity are not specified for on-demand tables (billing mode PAY_PER_REQUEST).
     *
     * @param props read and write capacity properties
     */
    private validateProvisioning;
    /**
     * Validate index name to check if a duplicate name already exists.
     *
     * @param indexName a name of global or local secondary index
     */
    private validateIndexName;
    /**
     * Validate non-key attributes by checking limits within secondary index, which may vary in future.
     *
     * @param nonKeyAttributes a list of non-key attribute names
     */
    private validateNonKeyAttributes;
    private buildIndexKeySchema;
    private buildIndexProjection;
    private findKey;
    private addKey;
    /**
     * Register the key attribute of table or secondary index to assemble attribute definitions of TableResourceProps.
     *
     * @param attribute the key attribute of table or secondary index
     */
    private registerAttribute;
    /**
     * Return the role that will be used for AutoScaling
     */
    private makeScalingRole;
}
export declare enum AttributeType {
    Binary = "B",
    Number = "N",
    String = "S"
}
/**
 * DyanmoDB's Read/Write capacity modes.
 */
export declare enum BillingMode {
    /**
     * Pay only for what you use. You don't configure Read/Write capacity units.
     */
    PayPerRequest = "PAY_PER_REQUEST",
    /**
     * Explicitly specified Read/Write capacity units.
     */
    Provisioned = "PROVISIONED"
}
export declare enum ProjectionType {
    KeysOnly = "KEYS_ONLY",
    Include = "INCLUDE",
    All = "ALL"
}
/**
 * When an item in the table is modified, StreamViewType determines what information
 * is written to the stream for this table. Valid values for StreamViewType are:
 * @link https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_StreamSpecification.html
 * @enum {string}
 */
export declare enum StreamViewType {
    /** The entire item, as it appears after it was modified, is written to the stream. */
    NewImage = "NEW_IMAGE",
    /** The entire item, as it appeared before it was modified, is written to the stream. */
    OldImage = "OLD_IMAGE",
    /** Both the new and the old item images of the item are written to the stream. */
    NewAndOldImages = "NEW_AND_OLD_IMAGES",
    /** Only the key attributes of the modified item are written to the stream. */
    KeysOnly = "KEYS_ONLY"
}
