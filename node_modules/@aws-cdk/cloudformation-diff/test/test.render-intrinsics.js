"use strict";
const render_intrinsics_1 = require("../lib/render-intrinsics");
module.exports = {
    'resolves Ref'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ Ref: 'SomeLogicalId' }), '${SomeLogicalId}');
        test.done();
    },
    'resolves Fn::GetAtt'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::GetAtt': ['SomeLogicalId', 'Attribute'] }), '${SomeLogicalId.Attribute}');
        test.done();
    },
    'resolves Fn::Join'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::Join': ['/', ['a', 'b', 'c']] }), 'a/b/c');
        test.done();
    },
    'does not resolve Fn::Join if the second argument is not a list literal'(test) {
        test.equals(render_intrinsics_1.renderIntrinsics({ 'Fn::Join': ['/', { Ref: 'ListParameter' }] }), '{"Fn::Join":["/","${ListParameter}"]}');
        test.done();
    },
    'deep resolves intrinsics in object'(test) {
        test.deepEqual(render_intrinsics_1.renderIntrinsics({
            Deeper1: { Ref: 'SomeLogicalId' },
            Deeper2: 'Do not replace',
        }), {
            Deeper1: '${SomeLogicalId}',
            Deeper2: 'Do not replace',
        });
        test.done();
    },
    'deep resolves intrinsics in array'(test) {
        test.deepEqual(render_intrinsics_1.renderIntrinsics([
            { Ref: 'SomeLogicalId' },
            'Do not replace',
        ]), [
            '${SomeLogicalId}',
            'Do not replace',
        ]);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5yZW5kZXItaW50cmluc2ljcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInRlc3QucmVuZGVyLWludHJpbnNpY3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGdFQUE0RDtBQUU1RCxpQkFBUztJQUNQLGNBQWMsQ0FBQyxJQUFVO1FBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQ1Qsb0NBQWdCLENBQUMsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLENBQUMsRUFDMUMsa0JBQWtCLENBQ25CLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQscUJBQXFCLENBQUMsSUFBVTtRQUM5QixJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxFQUFFLENBQUMsRUFDbEUsNEJBQTRCLENBQzdCLENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsbUJBQW1CLENBQUMsSUFBVTtRQUM1QixJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDeEQsT0FBTyxDQUNSLENBQUM7UUFFRixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsd0VBQXdFLENBQUMsSUFBVTtRQUNqRixJQUFJLENBQUMsTUFBTSxDQUNULG9DQUFnQixDQUFDLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUNqRSx1Q0FBdUMsQ0FDeEMsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxvQ0FBb0MsQ0FBQyxJQUFVO1FBQzdDLElBQUksQ0FBQyxTQUFTLENBQ1osb0NBQWdCLENBQUM7WUFDZixPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFO1lBQ2pDLE9BQU8sRUFBRSxnQkFBZ0I7U0FDMUIsQ0FBQyxFQUNGO1lBQ0UsT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixPQUFPLEVBQUUsZ0JBQWdCO1NBQzFCLENBQ0YsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRCxtQ0FBbUMsQ0FBQyxJQUFVO1FBQzVDLElBQUksQ0FBQyxTQUFTLENBQ1osb0NBQWdCLENBQUM7WUFDZixFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUU7WUFDeEIsZ0JBQWdCO1NBQ2pCLENBQUMsRUFDRjtZQUNFLGtCQUFrQjtZQUNsQixnQkFBZ0I7U0FDakIsQ0FDRixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgcmVuZGVySW50cmluc2ljcyB9IGZyb20gJy4uL2xpYi9yZW5kZXItaW50cmluc2ljcyc7XG5cbmV4cG9ydCA9IHtcbiAgJ3Jlc29sdmVzIFJlZicodGVzdDogVGVzdCkge1xuICAgIHRlc3QuZXF1YWxzKFxuICAgICAgcmVuZGVySW50cmluc2ljcyh7IFJlZjogJ1NvbWVMb2dpY2FsSWQnIH0pLFxuICAgICAgJyR7U29tZUxvZ2ljYWxJZH0nXG4gICAgKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAncmVzb2x2ZXMgRm46OkdldEF0dCcodGVzdDogVGVzdCkge1xuICAgIHRlc3QuZXF1YWxzKFxuICAgICAgcmVuZGVySW50cmluc2ljcyh7ICdGbjo6R2V0QXR0JzogWydTb21lTG9naWNhbElkJywgJ0F0dHJpYnV0ZSddIH0pLFxuICAgICAgJyR7U29tZUxvZ2ljYWxJZC5BdHRyaWJ1dGV9J1xuICAgICk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ3Jlc29sdmVzIEZuOjpKb2luJyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5lcXVhbHMoXG4gICAgICByZW5kZXJJbnRyaW5zaWNzKHsgJ0ZuOjpKb2luJzogWycvJywgWydhJywgJ2InLCAnYyddXSB9KSxcbiAgICAgICdhL2IvYydcbiAgICApO1xuXG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG5cbiAgJ2RvZXMgbm90IHJlc29sdmUgRm46OkpvaW4gaWYgdGhlIHNlY29uZCBhcmd1bWVudCBpcyBub3QgYSBsaXN0IGxpdGVyYWwnKHRlc3Q6IFRlc3QpIHtcbiAgICB0ZXN0LmVxdWFscyhcbiAgICAgIHJlbmRlckludHJpbnNpY3MoeyAnRm46OkpvaW4nOiBbJy8nLCB7IFJlZjogJ0xpc3RQYXJhbWV0ZXInIH1dIH0pLFxuICAgICAgJ3tcIkZuOjpKb2luXCI6W1wiL1wiLFwiJHtMaXN0UGFyYW1ldGVyfVwiXX0nXG4gICAgKTtcblxuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdkZWVwIHJlc29sdmVzIGludHJpbnNpY3MgaW4gb2JqZWN0Jyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5kZWVwRXF1YWwoXG4gICAgICByZW5kZXJJbnRyaW5zaWNzKHtcbiAgICAgICAgRGVlcGVyMTogeyBSZWY6ICdTb21lTG9naWNhbElkJyB9LFxuICAgICAgICBEZWVwZXIyOiAnRG8gbm90IHJlcGxhY2UnLFxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIERlZXBlcjE6ICcke1NvbWVMb2dpY2FsSWR9JyxcbiAgICAgICAgRGVlcGVyMjogJ0RvIG5vdCByZXBsYWNlJyxcbiAgICAgIH1cbiAgICApO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICdkZWVwIHJlc29sdmVzIGludHJpbnNpY3MgaW4gYXJyYXknKHRlc3Q6IFRlc3QpIHtcbiAgICB0ZXN0LmRlZXBFcXVhbChcbiAgICAgIHJlbmRlckludHJpbnNpY3MoW1xuICAgICAgICB7IFJlZjogJ1NvbWVMb2dpY2FsSWQnIH0sXG4gICAgICAgICdEbyBub3QgcmVwbGFjZScsXG4gICAgICBdKSxcbiAgICAgIFtcbiAgICAgICAgJyR7U29tZUxvZ2ljYWxJZH0nLFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UnLFxuICAgICAgXVxuICAgICk7XG4gICAgdGVzdC5kb25lKCk7XG4gIH0sXG59O1xuIl19