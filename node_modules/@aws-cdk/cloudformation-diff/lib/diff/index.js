"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cfnspec = require("@aws-cdk/cfnspec");
const types = require("./types");
const util_1 = require("./util");
function diffAttribute(oldValue, newValue) {
    return new types.Difference(_asString(oldValue), _asString(newValue));
}
exports.diffAttribute = diffAttribute;
function diffCondition(oldValue, newValue) {
    return new types.ConditionDifference(oldValue, newValue);
}
exports.diffCondition = diffCondition;
function diffMapping(oldValue, newValue) {
    return new types.MappingDifference(oldValue, newValue);
}
exports.diffMapping = diffMapping;
function diffMetadata(oldValue, newValue) {
    return new types.MetadataDifference(oldValue, newValue);
}
exports.diffMetadata = diffMetadata;
function diffOutput(oldValue, newValue) {
    return new types.OutputDifference(oldValue, newValue);
}
exports.diffOutput = diffOutput;
function diffParameter(oldValue, newValue) {
    return new types.ParameterDifference(oldValue, newValue);
}
exports.diffParameter = diffParameter;
function diffResource(oldValue, newValue) {
    const resourceType = {
        oldType: oldValue && oldValue.Type,
        newType: newValue && newValue.Type
    };
    let propertyUpdates = {};
    let otherChanges = {};
    if (resourceType.oldType !== undefined && resourceType.oldType === resourceType.newType) {
        // Only makes sense to inspect deeper if the types stayed the same
        const typeSpec = cfnspec.filteredSpecification(resourceType.oldType);
        const impl = typeSpec.ResourceTypes[resourceType.oldType];
        propertyUpdates = util_1.diffKeyedEntities(oldValue.Properties, newValue.Properties, (oldVal, newVal, key) => _diffProperty(oldVal, newVal, key, impl));
        otherChanges = util_1.diffKeyedEntities(oldValue, newValue, _diffOther);
        delete otherChanges.Properties;
    }
    return new types.ResourceDifference(oldValue, newValue, {
        resourceType, propertyUpdates, otherChanges,
        oldProperties: oldValue && oldValue.Properties,
        newProperties: newValue && newValue.Properties,
    });
    function _diffProperty(oldV, newV, key, resourceSpec) {
        let changeImpact;
        const spec = resourceSpec && resourceSpec.Properties && resourceSpec.Properties[key];
        if (spec) {
            switch (spec.UpdateType) {
                case 'Immutable':
                    changeImpact = types.ResourceImpact.WILL_REPLACE;
                    break;
                case 'Conditional':
                    changeImpact = types.ResourceImpact.MAY_REPLACE;
                    break;
                default:
                    // In those cases, whatever is the current value is what we should keep
                    changeImpact = types.ResourceImpact.WILL_UPDATE;
            }
        }
        return new types.PropertyDifference(oldV, newV, { changeImpact });
    }
    function _diffOther(oldV, newV) {
        return new types.Difference(oldV, newV);
    }
}
exports.diffResource = diffResource;
function diffUnknown(oldValue, newValue) {
    return new types.Difference(oldValue, newValue);
}
exports.diffUnknown = diffUnknown;
/**
 * Coerces a given value to +string | undefined+.
 *
 * @param value the value to be coerced.
 *
 * @returns +undefined+ if +value+ is +null+ or +undefined+,
 *      +value+ if it is a +string+,
 *      a compact JSON representation of +value+ otherwise.
 */
function _asString(value) {
    if (value == null) {
        return undefined;
    }
    if (typeof value === 'string') {
        return value;
    }
    return JSON.stringify(value);
}
//# sourceMappingURL=data:application/json;base64,