"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Turn CloudFormation intrinsics into strings
 *
 * ------
 *
 * This stringification is not intended to be mechanically reversible! It's intended
 * to be understood by humans!
 *
 * ------
 *
 * Turns Fn::GetAtt and Fn::Ref objects into the same strings that can be
 * parsed by Fn::Sub, but without the surrounding intrinsics.
 *
 * Evaluates Fn::Join directly if the second argument is a literal list of strings.
 *
 * For other intrinsics we choose a string representation that CloudFormation
 * cannot actually parse, but is comprehensible to humans.
 */
function renderIntrinsics(x) {
    if (Array.isArray(x)) {
        return x.map(renderIntrinsics);
    }
    const intrinsic = getIntrinsic(x);
    if (intrinsic) {
        if (intrinsic.fn === 'Ref') {
            return '${' + intrinsic.args + '}';
        }
        if (intrinsic.fn === 'Fn::GetAtt') {
            return '${' + intrinsic.args[0] + '.' + intrinsic.args[1] + '}';
        }
        if (intrinsic.fn === 'Fn::Join') {
            return unCloudFormationFnJoin(intrinsic.args[0], intrinsic.args[1]);
        }
        return stringifyIntrinsic(intrinsic.fn, intrinsic.args);
    }
    if (typeof x === 'object' && x !== null) {
        const ret = {};
        for (const [key, value] of Object.entries(x)) {
            ret[key] = renderIntrinsics(value);
        }
        return ret;
    }
    return x;
}
exports.renderIntrinsics = renderIntrinsics;
function unCloudFormationFnJoin(separator, args) {
    if (Array.isArray(args)) {
        return args.map(renderIntrinsics).join(separator);
    }
    return stringifyIntrinsic('Fn::Join', [separator, args]);
}
function stringifyIntrinsic(fn, args) {
    return JSON.stringify({ [fn]: renderIntrinsics(args) });
}
function getIntrinsic(x) {
    if (x === undefined || x === null || Array.isArray(x)) {
        return undefined;
    }
    if (typeof x !== 'object') {
        return undefined;
    }
    const keys = Object.keys(x);
    return keys.length === 1 && (keys[0] === 'Ref' || keys[0].startsWith('Fn::')) ? { fn: keys[0], args: x[keys[0]] } : undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLWludHJpbnNpY3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZW5kZXItaW50cmluc2ljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILFNBQWdCLGdCQUFnQixDQUFDLENBQU07SUFDckMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BCLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQ2hDO0lBRUQsTUFBTSxTQUFTLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksU0FBUyxFQUFFO1FBQ2IsSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLEtBQUssRUFBRTtZQUFFLE9BQU8sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO1NBQUU7UUFDbkUsSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLFlBQVksRUFBRTtZQUFFLE9BQU8sSUFBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1NBQUU7UUFDdkcsSUFBSSxTQUFTLENBQUMsRUFBRSxLQUFLLFVBQVUsRUFBRTtZQUFFLE9BQU8sc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FBRTtRQUN6RyxPQUFPLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRTtRQUN2QyxNQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDNUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsT0FBTyxHQUFHLENBQUM7S0FDWjtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQztBQXJCRCw0Q0FxQkM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLFNBQWlCLEVBQUUsSUFBUztJQUMxRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdkIsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0tBQ25EO0lBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBRUQsU0FBUyxrQkFBa0IsQ0FBQyxFQUFVLEVBQUUsSUFBUztJQUMvQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRUQsU0FBUyxZQUFZLENBQUMsQ0FBTTtJQUMxQixJQUFJLENBQUMsS0FBSyxTQUFTLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQUUsT0FBTyxTQUFTLENBQUM7S0FBRTtJQUM1RSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUFFLE9BQU8sU0FBUyxDQUFDO0tBQUU7SUFDaEQsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QixPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztBQUNoSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUdXJuIENsb3VkRm9ybWF0aW9uIGludHJpbnNpY3MgaW50byBzdHJpbmdzXG4gKlxuICogLS0tLS0tXG4gKlxuICogVGhpcyBzdHJpbmdpZmljYXRpb24gaXMgbm90IGludGVuZGVkIHRvIGJlIG1lY2hhbmljYWxseSByZXZlcnNpYmxlISBJdCdzIGludGVuZGVkXG4gKiB0byBiZSB1bmRlcnN0b29kIGJ5IGh1bWFucyFcbiAqXG4gKiAtLS0tLS1cbiAqXG4gKiBUdXJucyBGbjo6R2V0QXR0IGFuZCBGbjo6UmVmIG9iamVjdHMgaW50byB0aGUgc2FtZSBzdHJpbmdzIHRoYXQgY2FuIGJlXG4gKiBwYXJzZWQgYnkgRm46OlN1YiwgYnV0IHdpdGhvdXQgdGhlIHN1cnJvdW5kaW5nIGludHJpbnNpY3MuXG4gKlxuICogRXZhbHVhdGVzIEZuOjpKb2luIGRpcmVjdGx5IGlmIHRoZSBzZWNvbmQgYXJndW1lbnQgaXMgYSBsaXRlcmFsIGxpc3Qgb2Ygc3RyaW5ncy5cbiAqXG4gKiBGb3Igb3RoZXIgaW50cmluc2ljcyB3ZSBjaG9vc2UgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gdGhhdCBDbG91ZEZvcm1hdGlvblxuICogY2Fubm90IGFjdHVhbGx5IHBhcnNlLCBidXQgaXMgY29tcHJlaGVuc2libGUgdG8gaHVtYW5zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVuZGVySW50cmluc2ljcyh4OiBhbnkpOiBhbnkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh4KSkge1xuICAgIHJldHVybiB4Lm1hcChyZW5kZXJJbnRyaW5zaWNzKTtcbiAgfVxuXG4gIGNvbnN0IGludHJpbnNpYyA9IGdldEludHJpbnNpYyh4KTtcbiAgaWYgKGludHJpbnNpYykge1xuICAgIGlmIChpbnRyaW5zaWMuZm4gPT09ICdSZWYnKSB7IHJldHVybiAnJHsnICsgaW50cmluc2ljLmFyZ3MgKyAnfSc7IH1cbiAgICBpZiAoaW50cmluc2ljLmZuID09PSAnRm46OkdldEF0dCcpIHsgcmV0dXJuICckeycgKyBpbnRyaW5zaWMuYXJnc1swXSArICcuJyArIGludHJpbnNpYy5hcmdzWzFdICsgJ30nOyB9XG4gICAgaWYgKGludHJpbnNpYy5mbiA9PT0gJ0ZuOjpKb2luJykgeyByZXR1cm4gdW5DbG91ZEZvcm1hdGlvbkZuSm9pbihpbnRyaW5zaWMuYXJnc1swXSwgaW50cmluc2ljLmFyZ3NbMV0pOyB9XG4gICAgcmV0dXJuIHN0cmluZ2lmeUludHJpbnNpYyhpbnRyaW5zaWMuZm4sIGludHJpbnNpYy5hcmdzKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCkge1xuICAgIGNvbnN0IHJldDogYW55ID0ge307XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoeCkpIHtcbiAgICAgIHJldFtrZXldID0gcmVuZGVySW50cmluc2ljcyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIHVuQ2xvdWRGb3JtYXRpb25GbkpvaW4oc2VwYXJhdG9yOiBzdHJpbmcsIGFyZ3M6IGFueSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgIHJldHVybiBhcmdzLm1hcChyZW5kZXJJbnRyaW5zaWNzKS5qb2luKHNlcGFyYXRvcik7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ2lmeUludHJpbnNpYygnRm46OkpvaW4nLCBbc2VwYXJhdG9yLCBhcmdzXSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUludHJpbnNpYyhmbjogc3RyaW5nLCBhcmdzOiBhbnkpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHsgW2ZuXTogcmVuZGVySW50cmluc2ljcyhhcmdzKSB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW50cmluc2ljKHg6IGFueSk6IEludHJpbnNpYyB8IHVuZGVmaW5lZCB7XG4gIGlmICh4ID09PSB1bmRlZmluZWQgfHwgeCA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KHgpKSB7IHJldHVybiB1bmRlZmluZWQ7IH1cbiAgaWYgKHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh4KTtcbiAgcmV0dXJuIGtleXMubGVuZ3RoID09PSAxICYmIChrZXlzWzBdID09PSAnUmVmJyB8fCBrZXlzWzBdLnN0YXJ0c1dpdGgoJ0ZuOjonKSkgPyB7IGZuOiBrZXlzWzBdLCBhcmdzOiB4W2tleXNbMF1dIH0gOiB1bmRlZmluZWQ7XG59XG5cbmludGVyZmFjZSBJbnRyaW5zaWMge1xuICBmbjogc3RyaW5nO1xuICBhcmdzOiBhbnk7XG59Il19