"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_iam_1 = require("@aws-cdk/aws-iam");
const cdk_1 = require("@aws-cdk/cdk");
const alias_1 = require("./alias");
const kms_generated_1 = require("./kms.generated");
class EncryptionKeyRef extends cdk_1.Construct {
    /**
     * Defines an imported encryption key.
     *
     * `ref` can be obtained either via a call to `key.export()` or using
     * literals.
     *
     * For example:
     *
     *   const keyRefProps = key.export();
     *   const keyRef1 = EncryptionKeyRef.import(this, 'MyImportedKey1', keyRefProps);
     *   const keyRef2 = EncryptionKeyRef.import(this, 'MyImportedKey2', {
     *     keyArn: new KeyArn('arn:aws:kms:...')
     *   });
     *
     * @param parent The parent construct.
     * @param name The name of the construct.
     * @param props The key reference.
     */
    static import(parent, name, props) {
        return new EncryptionKeyRefImport(parent, name, props);
    }
    /**
     * Defines a new alias for the key.
     */
    addAlias(alias) {
        return new alias_1.EncryptionKeyAlias(this, 'Alias', { alias, key: this });
    }
    /**
     * Adds a statement to the KMS key resource policy.
     * @param statement The policy statement to add
     * @param allowNoOp If this is set to `false` and there is no policy
     * defined (i.e. external key), the operation will fail. Otherwise, it will
     * no-op.
     */
    addToResourcePolicy(statement, allowNoOp = true) {
        if (!this.policy) {
            if (allowNoOp) {
                return;
            }
            throw new Error(`Unable to add statement to IAM resource policy for KMS key: ${JSON.stringify(cdk_1.resolve(this.keyArn))}`);
        }
        this.policy.addStatement(statement);
    }
    /**
     * Exports this key from the current stack.
     * @returns a key ref which can be used in a call to `EncryptionKey.import(ref)`.
     */
    export() {
        return {
            keyArn: new cdk_1.Output(this, 'KeyArn', { value: this.keyArn }).makeImportValue().toString()
        };
    }
}
exports.EncryptionKeyRef = EncryptionKeyRef;
/**
 * Defines a KMS key.
 */
class EncryptionKey extends EncryptionKeyRef {
    constructor(parent, name, props = {}) {
        super(parent, name);
        if (props.policy) {
            this.policy = props.policy;
        }
        else {
            this.policy = new aws_iam_1.PolicyDocument();
            this.allowAccountToAdmin();
        }
        const resource = new kms_generated_1.CfnKey(this, 'Resource', {
            description: props.description,
            enableKeyRotation: props.enableKeyRotation,
            enabled: props.enabled,
            keyPolicy: this.policy
        });
        this.keyArn = resource.keyArn;
        resource.options.deletionPolicy = cdk_1.DeletionPolicy.Retain;
    }
    /**
     * Let users from this account admin this key.
     * @link https://aws.amazon.com/premiumsupport/knowledge-center/update-key-policy-future/
     */
    allowAccountToAdmin() {
        const actions = [
            "kms:Create*",
            "kms:Describe*",
            "kms:Enable*",
            "kms:List*",
            "kms:Put*",
            "kms:Update*",
            "kms:Revoke*",
            "kms:Disable*",
            "kms:Get*",
            "kms:Delete*",
            "kms:ScheduleKeyDeletion",
            "kms:CancelKeyDeletion"
        ];
        this.addToResourcePolicy(new aws_iam_1.PolicyStatement()
            .addAllResources()
            .addActions(...actions)
            .addAccountRootPrincipal());
    }
}
exports.EncryptionKey = EncryptionKey;
class EncryptionKeyRefImport extends EncryptionKeyRef {
    constructor(parent, name, props) {
        super(parent, name);
        this.policy = undefined; // no policy associated with an imported key
        this.keyArn = props.keyArn;
    }
}
//# sourceMappingURL=data:application/json;base64,