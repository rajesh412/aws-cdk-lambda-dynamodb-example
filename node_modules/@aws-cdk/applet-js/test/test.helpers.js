"use strict";
const cdk = require("@aws-cdk/cdk");
const applet_helpers_1 = require("../lib/applet-helpers");
module.exports = {
    'test that refactoring Stack didn\'t break Stack detection'(test) {
        test.equals(true, applet_helpers_1.isStackConstructor(cdk.Stack));
        test.done();
    },
    'test package name extraction'(test) {
        test.equals('my-package', applet_helpers_1.extractModuleName('my-package'));
        test.equals('my-package', applet_helpers_1.extractModuleName('my-package@1.0'));
        test.equals('@scope/my-package', applet_helpers_1.extractModuleName('@scope/my-package'));
        test.equals('@scope/my-package', applet_helpers_1.extractModuleName('@scope/my-package@1.0'));
        test.done();
    },
    'test applet name extraction'(test) {
        test.deepEqual(applet_helpers_1.parseApplet('applet'), {
            moduleName: 'applet',
            className: 'Applet'
        });
        test.deepEqual(applet_helpers_1.parseApplet('applet:Class'), {
            moduleName: 'applet',
            className: 'Class'
        });
        test.deepEqual(applet_helpers_1.parseApplet('npm://applet:Class'), {
            npmPackage: 'applet',
            moduleName: 'applet',
            className: 'Class'
        });
        test.deepEqual(applet_helpers_1.parseApplet('npm://applet@1.0:Class'), {
            npmPackage: 'applet@1.0',
            moduleName: 'applet',
            className: 'Class'
        });
        test.deepEqual(applet_helpers_1.parseApplet('npm://applet@1.0'), {
            npmPackage: 'applet@1.0',
            moduleName: 'applet',
            className: 'Applet'
        });
        test.deepEqual(applet_helpers_1.parseApplet('npm://@scope/applet@1.0'), {
            npmPackage: '@scope/applet@1.0',
            moduleName: '@scope/applet',
            className: 'Applet'
        });
        test.done();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5oZWxwZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidGVzdC5oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvQ0FBcUM7QUFFckMsMERBQTJGO0FBRTNGLGlCQUFTO0lBQ1AsMkRBQTJELENBQUMsSUFBVTtRQUNwRSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxtQ0FBa0IsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsOEJBQThCLENBQUMsSUFBVTtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxrQ0FBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLGtDQUFpQixDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLGtDQUFpQixDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQztRQUN6RSxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFLGtDQUFpQixDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQztRQUM3RSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsNkJBQTZCLENBQUMsSUFBVTtRQUN0QyxJQUFJLENBQUMsU0FBUyxDQUFDLDRCQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDcEMsVUFBVSxFQUFFLFFBQVE7WUFDcEIsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyw0QkFBVyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQzFDLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFNBQVMsRUFBRSxPQUFPO1NBQ25CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsNEJBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQ2hELFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFNBQVMsRUFBRSxPQUFPO1NBQ25CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsNEJBQVcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO1lBQ3BELFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFNBQVMsRUFBRSxPQUFPO1NBQ25CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsNEJBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQzlDLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLFNBQVMsRUFBRSxRQUFRO1NBQ3BCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxTQUFTLENBQUMsNEJBQVcsQ0FBQyx5QkFBeUIsQ0FBQyxFQUFFO1lBQ3JELFVBQVUsRUFBRSxtQkFBbUI7WUFDL0IsVUFBVSxFQUFFLGVBQWU7WUFDM0IsU0FBUyxFQUFFLFFBQVE7U0FDcEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2RrID0gcmVxdWlyZSgnQGF3cy1jZGsvY2RrJyk7XG5pbXBvcnQgeyBUZXN0IH0gZnJvbSAnbm9kZXVuaXQnO1xuaW1wb3J0IHsgZXh0cmFjdE1vZHVsZU5hbWUsIGlzU3RhY2tDb25zdHJ1Y3RvciwgcGFyc2VBcHBsZXQgfSBmcm9tICcuLi9saWIvYXBwbGV0LWhlbHBlcnMnO1xuXG5leHBvcnQgPSB7XG4gICd0ZXN0IHRoYXQgcmVmYWN0b3JpbmcgU3RhY2sgZGlkblxcJ3QgYnJlYWsgU3RhY2sgZGV0ZWN0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5lcXVhbHModHJ1ZSwgaXNTdGFja0NvbnN0cnVjdG9yKGNkay5TdGFjaykpO1xuICAgIHRlc3QuZG9uZSgpO1xuICB9LFxuXG4gICd0ZXN0IHBhY2thZ2UgbmFtZSBleHRyYWN0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5lcXVhbHMoJ215LXBhY2thZ2UnLCBleHRyYWN0TW9kdWxlTmFtZSgnbXktcGFja2FnZScpKTtcbiAgICB0ZXN0LmVxdWFscygnbXktcGFja2FnZScsIGV4dHJhY3RNb2R1bGVOYW1lKCdteS1wYWNrYWdlQDEuMCcpKTtcbiAgICB0ZXN0LmVxdWFscygnQHNjb3BlL215LXBhY2thZ2UnLCBleHRyYWN0TW9kdWxlTmFtZSgnQHNjb3BlL215LXBhY2thZ2UnKSk7XG4gICAgdGVzdC5lcXVhbHMoJ0BzY29wZS9teS1wYWNrYWdlJywgZXh0cmFjdE1vZHVsZU5hbWUoJ0BzY29wZS9teS1wYWNrYWdlQDEuMCcpKTtcbiAgICB0ZXN0LmRvbmUoKTtcbiAgfSxcblxuICAndGVzdCBhcHBsZXQgbmFtZSBleHRyYWN0aW9uJyh0ZXN0OiBUZXN0KSB7XG4gICAgdGVzdC5kZWVwRXF1YWwocGFyc2VBcHBsZXQoJ2FwcGxldCcpLCB7XG4gICAgICBtb2R1bGVOYW1lOiAnYXBwbGV0JyxcbiAgICAgIGNsYXNzTmFtZTogJ0FwcGxldCdcbiAgICB9KTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKHBhcnNlQXBwbGV0KCdhcHBsZXQ6Q2xhc3MnKSwge1xuICAgICAgbW9kdWxlTmFtZTogJ2FwcGxldCcsXG4gICAgICBjbGFzc05hbWU6ICdDbGFzcydcbiAgICB9KTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKHBhcnNlQXBwbGV0KCducG06Ly9hcHBsZXQ6Q2xhc3MnKSwge1xuICAgICAgbnBtUGFja2FnZTogJ2FwcGxldCcsXG4gICAgICBtb2R1bGVOYW1lOiAnYXBwbGV0JyxcbiAgICAgIGNsYXNzTmFtZTogJ0NsYXNzJ1xuICAgIH0pO1xuXG4gICAgdGVzdC5kZWVwRXF1YWwocGFyc2VBcHBsZXQoJ25wbTovL2FwcGxldEAxLjA6Q2xhc3MnKSwge1xuICAgICAgbnBtUGFja2FnZTogJ2FwcGxldEAxLjAnLFxuICAgICAgbW9kdWxlTmFtZTogJ2FwcGxldCcsXG4gICAgICBjbGFzc05hbWU6ICdDbGFzcydcbiAgICB9KTtcblxuICAgIHRlc3QuZGVlcEVxdWFsKHBhcnNlQXBwbGV0KCducG06Ly9hcHBsZXRAMS4wJyksIHtcbiAgICAgIG5wbVBhY2thZ2U6ICdhcHBsZXRAMS4wJyxcbiAgICAgIG1vZHVsZU5hbWU6ICdhcHBsZXQnLFxuICAgICAgY2xhc3NOYW1lOiAnQXBwbGV0J1xuICAgIH0pO1xuXG4gICAgdGVzdC5kZWVwRXF1YWwocGFyc2VBcHBsZXQoJ25wbTovL0BzY29wZS9hcHBsZXRAMS4wJyksIHtcbiAgICAgIG5wbVBhY2thZ2U6ICdAc2NvcGUvYXBwbGV0QDEuMCcsXG4gICAgICBtb2R1bGVOYW1lOiAnQHNjb3BlL2FwcGxldCcsXG4gICAgICBjbGFzc05hbWU6ICdBcHBsZXQnXG4gICAgfSk7XG5cbiAgICB0ZXN0LmRvbmUoKTtcbiAgfVxufTsiXX0=