"use strict";
const child_process = require("child_process");
const fs = require("fs");
const os = require("os");
const path = require("path");
function expectMatch(test, expectedFile, stack) {
    try {
        const expected = JSON.parse(fs.readFileSync(expectedFile, { encoding: 'utf-8' }));
        test.deepEqual(stack, expected);
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            // tslint:disable-next-line:no-console
            console.log(JSON.stringify(stack, undefined, 2));
            throw new Error(`Make a file ${expectedFile} with the previous contents`);
        }
    }
}
function synthesizeApplet(yamlFile, direct = false) {
    // Can't depend on aws-cdk here, so we're reimplementing cx-api.
    // tslint:disable-next-line:no-console
    console.log('Writing to ', os.tmpdir());
    const command = direct ? yamlFile : 'cdk-applet-js';
    const args = direct ? [] : [yamlFile];
    child_process.execFileSync(command, args, {
        env: Object.assign({}, process.env, { CDK_OUTDIR: os.tmpdir(), PATH: 'bin:' + process.env.PATH })
    });
    return JSON.parse(fs.readFileSync(path.join(os.tmpdir(), 'cdk.out'), { encoding: 'utf-8' }));
}
function getStack(stackName, allStacks) {
    for (const stack of allStacks.stacks) {
        if (stack.name === stackName) {
            return stripStackMetadata(stack);
        }
    }
    // tslint:disable-next-line:no-console
    console.log(allStacks);
    throw new Error('Could not find stack: ' + stackName);
}
function stripStackMetadata(stack) {
    for (const key of Object.keys(stack.metadata)) {
        if (!stack.metadata[key]) {
            continue;
        }
        for (const entry of stack.metadata[key]) {
            if (entry.trace) {
                entry.trace = ['**REDACTED**'];
            }
        }
    }
    delete stack.environment;
    return stack;
}
module.exports = {
    'basic test 1'(test) {
        expectMatch(test, 'test/expected1.json', getStack('TestApplet', synthesizeApplet('test/test1.yaml')));
        test.done();
    },
    'basic test 2'(test) {
        expectMatch(test, 'test/expected2.json', getStack('TestApplet', synthesizeApplet('test/test2.yaml')));
        test.done();
    },
    'can use shebang'(test) {
        fs.chmodSync('test/test3.yaml', 0o755);
        expectMatch(test, 'test/expected3.json', getStack('Applet', synthesizeApplet('test/test3.yaml', true)));
        test.done();
    },
    'test non stack construct'(test) {
        expectMatch(test, 'test/test-nonstack-expected.json', getStack('NoStackApplet', synthesizeApplet('test/test-nonstack.yaml')));
        test.done();
    },
    'test multiple stacks'(test) {
        expectMatch(test, 'test/test-multistack-expected.json', getStack('Stack2', synthesizeApplet('test/test-multistack.yaml')));
        test.done();
    },
    'expect failure 4'(test) {
        test.throws(() => {
            synthesizeApplet('test/negative-test4.yaml');
        }, /but it must be in the form/);
        test.done();
    },
    'expect failure 5'(test) {
        test.throws(() => {
            synthesizeApplet('test/negative-test5.yaml');
        }, /Cannot find module/);
        test.done();
    },
    'expect failure 6'(test) {
        test.throws(() => {
            synthesizeApplet('test/negative-test6.yaml');
        }, /Cannot find applet class/);
        test.done();
    },
    'expect failure 7'(test) {
        test.throws(() => {
            synthesizeApplet('test/negative-test7.yaml');
        }, /but it must be in the form/);
        test.done();
    },
};
//# sourceMappingURL=data:application/json;base64,