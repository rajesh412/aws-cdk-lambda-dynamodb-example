"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Determine whether this constructorFunction is going to create an object that inherits from Stack
 *
 * We do structural typing.
 */
function isStackConstructor(constructorFn) {
    // Test for a public method that Stack has
    return constructorFn.prototype.findResource !== undefined;
}
exports.isStackConstructor = isStackConstructor;
/**
 * Extract module name from a NPM package specification
 */
function extractModuleName(packageSpec) {
    const m = /^((?:@[a-zA-Z-]+\/)?[a-zA-Z-]+)/i.exec(packageSpec);
    if (!m) {
        throw new Error(`Could not find package name in ${packageSpec}`);
    }
    return m[1];
}
exports.extractModuleName = extractModuleName;
function parseApplet(applet) {
    const m = /^(npm:\/\/)?([a-z0-9_@./-]+)(:[a-z_0-9]+)?$/i.exec(applet);
    if (!m) {
        throw new Error(`"applet" value is "${applet}" but it must be in the form "[npm://]<js-module>[:<applet-class>]".
      If <applet-class> is not specified, "Applet" is the default`);
    }
    if (m[1] === 'npm://') {
        return {
            npmPackage: m[2],
            moduleName: extractModuleName(m[2]),
            className: className(m[3]),
        };
    }
    else {
        return {
            moduleName: m[2],
            className: className(m[3]),
        };
    }
    function className(s) {
        if (s) {
            return s.substr(1);
        }
        return 'Applet';
    }
}
exports.parseApplet = parseApplet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwbGV0LWhlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhcHBsZXQtaGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0dBSUc7QUFDSCxTQUFnQixrQkFBa0IsQ0FBQyxhQUFrQjtJQUNuRCwwQ0FBMEM7SUFDMUMsT0FBTyxhQUFhLENBQUMsU0FBUyxDQUFDLFlBQVksS0FBSyxTQUFTLENBQUM7QUFDNUQsQ0FBQztBQUhELGdEQUdDO0FBRUQ7O0dBRUc7QUFDSCxTQUFnQixpQkFBaUIsQ0FBQyxXQUFtQjtJQUNqRCxNQUFNLENBQUMsR0FBRyxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDL0QsSUFBSSxDQUFDLENBQUMsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLFdBQVcsRUFBRSxDQUFDLENBQUM7S0FBRTtJQUM3RSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixDQUFDO0FBSkQsOENBSUM7QUFFRCxTQUFnQixXQUFXLENBQUMsTUFBYztJQUN4QyxNQUFNLENBQUMsR0FBRyw4Q0FBOEMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEUsSUFBSSxDQUFDLENBQUMsRUFBRTtRQUNOLE1BQU0sSUFBSSxLQUFLLENBQUMsc0JBQXNCLE1BQU07a0VBQ2tCLENBQUMsQ0FBQztLQUNqRTtJQUVELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNyQixPQUFPO1lBQ0wsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDaEIsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuQyxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQixDQUFDO0tBQ0g7U0FBTTtRQUNMLE9BQU87WUFDTCxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzQixDQUFDO0tBQ0g7SUFFRCxTQUFTLFNBQVMsQ0FBQyxDQUFxQjtRQUN0QyxJQUFJLENBQUMsRUFBRTtZQUNMLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7QUFDSCxDQUFDO0FBMUJELGtDQTBCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBjb25zdHJ1Y3RvckZ1bmN0aW9uIGlzIGdvaW5nIHRvIGNyZWF0ZSBhbiBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIFN0YWNrXG4gKlxuICogV2UgZG8gc3RydWN0dXJhbCB0eXBpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YWNrQ29uc3RydWN0b3IoY29uc3RydWN0b3JGbjogYW55KSB7XG4gIC8vIFRlc3QgZm9yIGEgcHVibGljIG1ldGhvZCB0aGF0IFN0YWNrIGhhc1xuICByZXR1cm4gY29uc3RydWN0b3JGbi5wcm90b3R5cGUuZmluZFJlc291cmNlICE9PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogRXh0cmFjdCBtb2R1bGUgbmFtZSBmcm9tIGEgTlBNIHBhY2thZ2Ugc3BlY2lmaWNhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdE1vZHVsZU5hbWUocGFja2FnZVNwZWM6IHN0cmluZykge1xuICAgIGNvbnN0IG0gPSAvXigoPzpAW2EtekEtWi1dK1xcLyk/W2EtekEtWi1dKykvaS5leGVjKHBhY2thZ2VTcGVjKTtcbiAgICBpZiAoIW0pIHsgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCBwYWNrYWdlIG5hbWUgaW4gJHtwYWNrYWdlU3BlY31gKTsgfVxuICAgIHJldHVybiBtWzFdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBcHBsZXQoYXBwbGV0OiBzdHJpbmcpOiBBcHBsZXRTcGVjIHtcbiAgY29uc3QgbSA9IC9eKG5wbTpcXC9cXC8pPyhbYS16MC05X0AuLy1dKykoOlthLXpfMC05XSspPyQvaS5leGVjKGFwcGxldCk7XG4gIGlmICghbSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgXCJhcHBsZXRcIiB2YWx1ZSBpcyBcIiR7YXBwbGV0fVwiIGJ1dCBpdCBtdXN0IGJlIGluIHRoZSBmb3JtIFwiW25wbTovL108anMtbW9kdWxlPls6PGFwcGxldC1jbGFzcz5dXCIuXG4gICAgICBJZiA8YXBwbGV0LWNsYXNzPiBpcyBub3Qgc3BlY2lmaWVkLCBcIkFwcGxldFwiIGlzIHRoZSBkZWZhdWx0YCk7XG4gIH1cblxuICBpZiAobVsxXSA9PT0gJ25wbTovLycpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbnBtUGFja2FnZTogbVsyXSxcbiAgICAgIG1vZHVsZU5hbWU6IGV4dHJhY3RNb2R1bGVOYW1lKG1bMl0pLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUobVszXSksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgbW9kdWxlTmFtZTogbVsyXSxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lKG1bM10pLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBjbGFzc05hbWUoczogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKHMpIHtcbiAgICAgIHJldHVybiBzLnN1YnN0cigxKTtcbiAgICB9XG4gICAgcmV0dXJuICdBcHBsZXQnO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBwbGV0U3BlYyB7XG4gIG5wbVBhY2thZ2U/OiBzdHJpbmc7XG4gIG1vZHVsZU5hbWU6IHN0cmluZztcbiAgY2xhc3NOYW1lOiBzdHJpbmc7XG59Il19