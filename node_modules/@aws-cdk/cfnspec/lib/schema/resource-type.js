"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function isPrimitiveAttribute(spec) {
    return !!spec.PrimitiveType;
}
exports.isPrimitiveAttribute = isPrimitiveAttribute;
function isListAttribute(spec) {
    return spec.Type === 'List';
}
exports.isListAttribute = isListAttribute;
function isPrimitiveListAttribute(spec) {
    return isListAttribute(spec) && !!spec.PrimitiveItemType;
}
exports.isPrimitiveListAttribute = isPrimitiveListAttribute;
function isComplexListAttribute(spec) {
    return isListAttribute(spec) && !!spec.ItemType;
}
exports.isComplexListAttribute = isComplexListAttribute;
/**
 * Type declaration for special values of the "Ref" attribute represents.
 *
 * The attribute can take on more values than these, but these are treated specially.
 */
var SpecialRefKind;
(function (SpecialRefKind) {
    /**
     * No '.ref' member is generated for this type, because it doesn't have a meaningful value.
     */
    SpecialRefKind["None"] = "None";
    /**
     * The generated class will inherit from the built-in 'Arn' type.
     */
    SpecialRefKind["Arn"] = "Arn";
})(SpecialRefKind = exports.SpecialRefKind || (exports.SpecialRefKind = {}));
var ResourceScrutinyType;
(function (ResourceScrutinyType) {
    /**
     * No additional scrutiny
     */
    ResourceScrutinyType["None"] = "None";
    /**
     * An externally attached policy document to a resource
     *
     * (Common for SQS, SNS, S3, ...)
     */
    ResourceScrutinyType["ResourcePolicyResource"] = "ResourcePolicyResource";
    /**
     * This is an IAM policy on an identity resource
     *
     * (Basically saying: this is AWS::IAM::Policy)
     */
    ResourceScrutinyType["IdentityPolicyResource"] = "IdentityPolicyResource";
    /**
     * This is a Lambda Permission policy
     */
    ResourceScrutinyType["LambdaPermission"] = "LambdaPermission";
    /**
     * An ingress rule object
     */
    ResourceScrutinyType["IngressRuleResource"] = "IngressRuleResource";
    /**
     * A set of egress rules
     */
    ResourceScrutinyType["EgressRuleResource"] = "EgressRuleResource";
})(ResourceScrutinyType = exports.ResourceScrutinyType || (exports.ResourceScrutinyType = {}));
function isResourceScrutinyType(str) {
    return ResourceScrutinyType[str] !== undefined;
}
exports.isResourceScrutinyType = isResourceScrutinyType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UtdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInJlc291cmNlLXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFnREEsU0FBZ0Isb0JBQW9CLENBQUMsSUFBZTtJQUNsRCxPQUFPLENBQUMsQ0FBRSxJQUEyQixDQUFDLGFBQWEsQ0FBQztBQUN0RCxDQUFDO0FBRkQsb0RBRUM7QUFFRCxTQUFnQixlQUFlLENBQUMsSUFBZTtJQUM3QyxPQUFRLElBQXNCLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQztBQUNqRCxDQUFDO0FBRkQsMENBRUM7QUFFRCxTQUFnQix3QkFBd0IsQ0FBQyxJQUFlO0lBQ3RELE9BQU8sZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBRSxJQUErQixDQUFDLGlCQUFpQixDQUFDO0FBQ3ZGLENBQUM7QUFGRCw0REFFQztBQUVELFNBQWdCLHNCQUFzQixDQUFDLElBQWU7SUFDcEQsT0FBTyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFFLElBQTZCLENBQUMsUUFBUSxDQUFDO0FBQzVFLENBQUM7QUFGRCx3REFFQztBQUVEOzs7O0dBSUc7QUFDSCxJQUFZLGNBVVg7QUFWRCxXQUFZLGNBQWM7SUFDeEI7O09BRUc7SUFDSCwrQkFBYSxDQUFBO0lBRWI7O09BRUc7SUFDSCw2QkFBVyxDQUFBO0FBQ2IsQ0FBQyxFQVZXLGNBQWMsR0FBZCxzQkFBYyxLQUFkLHNCQUFjLFFBVXpCO0FBRUQsSUFBWSxvQkFrQ1g7QUFsQ0QsV0FBWSxvQkFBb0I7SUFDOUI7O09BRUc7SUFDSCxxQ0FBYSxDQUFBO0lBRWI7Ozs7T0FJRztJQUNILHlFQUFpRCxDQUFBO0lBRWpEOzs7O09BSUc7SUFDSCx5RUFBaUQsQ0FBQTtJQUVqRDs7T0FFRztJQUNILDZEQUFxQyxDQUFBO0lBRXJDOztPQUVHO0lBQ0gsbUVBQTJDLENBQUE7SUFFM0M7O09BRUc7SUFDSCxpRUFBeUMsQ0FBQTtBQUMzQyxDQUFDLEVBbENXLG9CQUFvQixHQUFwQiw0QkFBb0IsS0FBcEIsNEJBQW9CLFFBa0MvQjtBQUVELFNBQWdCLHNCQUFzQixDQUFDLEdBQVc7SUFDaEQsT0FBUSxvQkFBNEIsQ0FBQyxHQUFHLENBQUMsS0FBSyxTQUFTLENBQUM7QUFDMUQsQ0FBQztBQUZELHdEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRG9jdW1lbnRlZCwgUHJpbWl0aXZlVHlwZSB9IGZyb20gJy4vYmFzZS10eXBlcyc7XG5pbXBvcnQgeyBQcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydHknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc291cmNlVHlwZSBleHRlbmRzIERvY3VtZW50ZWQge1xuICAvKipcbiAgICogVGhlIGF0dHJpYnV0ZXMgZXhwb3NlZCBieSB0aGUgcmVzb3VyY2UgdHlwZSwgaWYgYW55LlxuICAgKi9cbiAgQXR0cmlidXRlcz86IHsgW25hbWU6IHN0cmluZ106IEF0dHJpYnV0ZSB9O1xuICAvKipcbiAgICogVGhlIHByb3BlcnRpZXMgYWNjZXB0ZWQgYnkgdGhlIHJlc291cmNlIHR5cGUsIGlmIGFueS5cbiAgICovXG4gIFByb3BlcnRpZXM/OiB7IFtuYW1lOiBzdHJpbmddOiBQcm9wZXJ0eSB9O1xuICAvKipcbiAgICogVGhlIGBgVHJhbnNmb3JtYGAgcmVxdWlyZWQgYnkgdGhlIHJlc291cmNlIHR5cGUsIGlmIGFueS5cbiAgICovXG4gIFJlcXVpcmVkVHJhbnNmb3JtPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBXaGF0IGtpbmQgb2YgdmFsdWUgdGhlICdSZWYnIG9wZXJhdG9yIHJlZmVycyB0bywgaWYgYW55LlxuICAgKi9cbiAgUmVmS2luZD86IHN0cmluZztcblxuICAvKipcbiAgICogRHVyaW5nIGEgc3RhY2sgdXBkYXRlLCB3aGF0IGtpbmQgb2YgYWRkaXRpb25hbCBzY3J1dGlueSBjaGFuZ2VzIHRvIHRoaXMgcmVzb3VyY2Ugc2hvdWxkIGJlIHN1YmplY3RlZCB0b1xuICAgKlxuICAgKiBAZGVmYXVsdCBOb25lXG4gICAqL1xuICBTY3J1dGlueVR5cGU/OiBSZXNvdXJjZVNjcnV0aW55VHlwZTtcbn1cblxuZXhwb3J0IHR5cGUgQXR0cmlidXRlID0gUHJpbWl0aXZlQXR0cmlidXRlIHwgTGlzdEF0dHJpYnV0ZTtcblxuZXhwb3J0IGludGVyZmFjZSBQcmltaXRpdmVBdHRyaWJ1dGUge1xuICBQcmltaXRpdmVUeXBlOiBQcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgdHlwZSBMaXN0QXR0cmlidXRlID0gUHJpbWl0aXZlTGlzdEF0dHJpYnV0ZSB8IENvbXBsZXhMaXN0QXR0cmlidXRlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByaW1pdGl2ZUxpc3RBdHRyaWJ1dGUge1xuICBUeXBlOiAnTGlzdCc7XG4gIFByaW1pdGl2ZUl0ZW1UeXBlOiBQcmltaXRpdmVUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBsZXhMaXN0QXR0cmlidXRlIHtcbiAgVHlwZTogJ0xpc3QnO1xuICBJdGVtVHlwZTogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQcmltaXRpdmVBdHRyaWJ1dGUoc3BlYzogQXR0cmlidXRlKTogc3BlYyBpcyBQcmltaXRpdmVBdHRyaWJ1dGUge1xuICByZXR1cm4gISEoc3BlYyBhcyBQcmltaXRpdmVBdHRyaWJ1dGUpLlByaW1pdGl2ZVR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xpc3RBdHRyaWJ1dGUoc3BlYzogQXR0cmlidXRlKTogc3BlYyBpcyBMaXN0QXR0cmlidXRlIHtcbiAgcmV0dXJuIChzcGVjIGFzIExpc3RBdHRyaWJ1dGUpLlR5cGUgPT09ICdMaXN0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlTGlzdEF0dHJpYnV0ZShzcGVjOiBBdHRyaWJ1dGUpOiBzcGVjIGlzIFByaW1pdGl2ZUxpc3RBdHRyaWJ1dGUge1xuICByZXR1cm4gaXNMaXN0QXR0cmlidXRlKHNwZWMpICYmICEhKHNwZWMgYXMgUHJpbWl0aXZlTGlzdEF0dHJpYnV0ZSkuUHJpbWl0aXZlSXRlbVR5cGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBsZXhMaXN0QXR0cmlidXRlKHNwZWM6IEF0dHJpYnV0ZSk6IHNwZWMgaXMgQ29tcGxleExpc3RBdHRyaWJ1dGUge1xuICByZXR1cm4gaXNMaXN0QXR0cmlidXRlKHNwZWMpICYmICEhKHNwZWMgYXMgQ29tcGxleExpc3RBdHRyaWJ1dGUpLkl0ZW1UeXBlO1xufVxuXG4vKipcbiAqIFR5cGUgZGVjbGFyYXRpb24gZm9yIHNwZWNpYWwgdmFsdWVzIG9mIHRoZSBcIlJlZlwiIGF0dHJpYnV0ZSByZXByZXNlbnRzLlxuICpcbiAqIFRoZSBhdHRyaWJ1dGUgY2FuIHRha2Ugb24gbW9yZSB2YWx1ZXMgdGhhbiB0aGVzZSwgYnV0IHRoZXNlIGFyZSB0cmVhdGVkIHNwZWNpYWxseS5cbiAqL1xuZXhwb3J0IGVudW0gU3BlY2lhbFJlZktpbmQge1xuICAvKipcbiAgICogTm8gJy5yZWYnIG1lbWJlciBpcyBnZW5lcmF0ZWQgZm9yIHRoaXMgdHlwZSwgYmVjYXVzZSBpdCBkb2Vzbid0IGhhdmUgYSBtZWFuaW5nZnVsIHZhbHVlLlxuICAgKi9cbiAgTm9uZSA9ICdOb25lJyxcblxuICAvKipcbiAgICogVGhlIGdlbmVyYXRlZCBjbGFzcyB3aWxsIGluaGVyaXQgZnJvbSB0aGUgYnVpbHQtaW4gJ0FybicgdHlwZS5cbiAgICovXG4gIEFybiA9ICdBcm4nXG59XG5cbmV4cG9ydCBlbnVtIFJlc291cmNlU2NydXRpbnlUeXBlIHtcbiAgLyoqXG4gICAqIE5vIGFkZGl0aW9uYWwgc2NydXRpbnlcbiAgICovXG4gIE5vbmUgPSAnTm9uZScsXG5cbiAgLyoqXG4gICAqIEFuIGV4dGVybmFsbHkgYXR0YWNoZWQgcG9saWN5IGRvY3VtZW50IHRvIGEgcmVzb3VyY2VcbiAgICpcbiAgICogKENvbW1vbiBmb3IgU1FTLCBTTlMsIFMzLCAuLi4pXG4gICAqL1xuICBSZXNvdXJjZVBvbGljeVJlc291cmNlID0gJ1Jlc291cmNlUG9saWN5UmVzb3VyY2UnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGFuIElBTSBwb2xpY3kgb24gYW4gaWRlbnRpdHkgcmVzb3VyY2VcbiAgICpcbiAgICogKEJhc2ljYWxseSBzYXlpbmc6IHRoaXMgaXMgQVdTOjpJQU06OlBvbGljeSlcbiAgICovXG4gIElkZW50aXR5UG9saWN5UmVzb3VyY2UgPSAnSWRlbnRpdHlQb2xpY3lSZXNvdXJjZScsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYSBMYW1iZGEgUGVybWlzc2lvbiBwb2xpY3lcbiAgICovXG4gIExhbWJkYVBlcm1pc3Npb24gPSAnTGFtYmRhUGVybWlzc2lvbicsXG5cbiAgLyoqXG4gICAqIEFuIGluZ3Jlc3MgcnVsZSBvYmplY3RcbiAgICovXG4gIEluZ3Jlc3NSdWxlUmVzb3VyY2UgPSAnSW5ncmVzc1J1bGVSZXNvdXJjZScsXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGVncmVzcyBydWxlc1xuICAgKi9cbiAgRWdyZXNzUnVsZVJlc291cmNlID0gJ0VncmVzc1J1bGVSZXNvdXJjZScsXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc291cmNlU2NydXRpbnlUeXBlKHN0cjogc3RyaW5nKTogc3RyIGlzIFJlc291cmNlU2NydXRpbnlUeXBlIHtcbiAgcmV0dXJuIChSZXNvdXJjZVNjcnV0aW55VHlwZSBhcyBhbnkpW3N0cl0gIT09IHVuZGVmaW5lZDtcbn0iXX0=