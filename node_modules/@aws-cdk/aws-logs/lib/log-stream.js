"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/cdk");
const logs_generated_1 = require("./logs.generated");
/**
 * A Log Stream in a Log Group
 */
class LogStreamRef extends cdk.Construct {
    /**
     * Import an existing LogGroup
     */
    static import(parent, id, props) {
        return new ImportedLogStream(parent, id, props);
    }
    /**
     * Export this LogStream
     */
    export() {
        return {
            logStreamName: new cdk.Output(this, 'LogStreamName', { value: this.logStreamName }).makeImportValue().toString()
        };
    }
}
exports.LogStreamRef = LogStreamRef;
/**
 * Define a Log Stream in a Log Group
 */
class LogStream extends LogStreamRef {
    constructor(parent, id, props) {
        super(parent, id);
        const resource = new logs_generated_1.CfnLogStream(this, 'Resource', {
            logGroupName: props.logGroup.logGroupName,
            logStreamName: props.logStreamName
        });
        if (props.retainLogStream !== false) {
            resource.options.deletionPolicy = cdk.DeletionPolicy.Retain;
        }
        this.logStreamName = resource.logStreamName;
    }
}
exports.LogStream = LogStream;
/**
 * An imported LogStream
 */
class ImportedLogStream extends LogStreamRef {
    constructor(parent, id, props) {
        super(parent, id);
        this.logStreamName = props.logStreamName;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nLXN0cmVhbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImxvZy1zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvQ0FBcUM7QUFFckMscURBQWdEO0FBU2hEOztHQUVHO0FBQ0gsTUFBc0IsWUFBYSxTQUFRLEdBQUcsQ0FBQyxTQUFTO0lBQ3REOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFxQixFQUFFLEVBQVUsRUFBRSxLQUF3QjtRQUM5RSxPQUFPLElBQUksaUJBQWlCLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBT0Q7O09BRUc7SUFDSSxNQUFNO1FBQ1gsT0FBTztZQUNMLGFBQWEsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLGVBQWUsRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLEVBQUU7U0FDakgsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXJCRCxvQ0FxQkM7QUFrQ0Q7O0dBRUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxZQUFZO0lBTXpDLFlBQVksTUFBcUIsRUFBRSxFQUFVLEVBQUUsS0FBcUI7UUFDbEUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVsQixNQUFNLFFBQVEsR0FBRyxJQUFJLDZCQUFZLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNsRCxZQUFZLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZO1lBQ3pDLGFBQWEsRUFBRSxLQUFLLENBQUMsYUFBYTtTQUNuQyxDQUFDLENBQUM7UUFFSCxJQUFJLEtBQUssQ0FBQyxlQUFlLEtBQUssS0FBSyxFQUFFO1lBQ25DLFFBQVEsQ0FBQyxPQUFPLENBQUMsY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDO1NBQzdEO1FBRUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQXBCRCw4QkFvQkM7QUFFRDs7R0FFRztBQUNILE1BQU0saUJBQWtCLFNBQVEsWUFBWTtJQU0xQyxZQUFZLE1BQXFCLEVBQUUsRUFBVSxFQUFFLEtBQXdCO1FBQ3JFLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDO0lBQzNDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjZGsgPSByZXF1aXJlKCdAYXdzLWNkay9jZGsnKTtcbmltcG9ydCB7IExvZ0dyb3VwUmVmIH0gZnJvbSAnLi9sb2ctZ3JvdXAnO1xuaW1wb3J0IHsgQ2ZuTG9nU3RyZWFtIH0gZnJvbSAnLi9sb2dzLmdlbmVyYXRlZCc7XG5cbi8qKlxuICogUHJvcGVydGllcyBmb3IgaW1wb3J0aW5nIGEgTG9nU3RyZWFtXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9nU3RyZWFtUmVmUHJvcHMge1xuICBsb2dTdHJlYW1OYW1lOiBzdHJpbmc7XG59XG5cbi8qKlxuICogQSBMb2cgU3RyZWFtIGluIGEgTG9nIEdyb3VwXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMb2dTdHJlYW1SZWYgZXh0ZW5kcyBjZGsuQ29uc3RydWN0IHtcbiAgLyoqXG4gICAqIEltcG9ydCBhbiBleGlzdGluZyBMb2dHcm91cFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpbXBvcnQocGFyZW50OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTG9nU3RyZWFtUmVmUHJvcHMpOiBMb2dTdHJlYW1SZWYge1xuICAgIHJldHVybiBuZXcgSW1wb3J0ZWRMb2dTdHJlYW0ocGFyZW50LCBpZCwgcHJvcHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgbG9nIHN0cmVhbVxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGxvZ1N0cmVhbU5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogRXhwb3J0IHRoaXMgTG9nU3RyZWFtXG4gICAqL1xuICBwdWJsaWMgZXhwb3J0KCk6IExvZ1N0cmVhbVJlZlByb3BzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9nU3RyZWFtTmFtZTogbmV3IGNkay5PdXRwdXQodGhpcywgJ0xvZ1N0cmVhbU5hbWUnLCB7IHZhbHVlOiB0aGlzLmxvZ1N0cmVhbU5hbWUgfSkubWFrZUltcG9ydFZhbHVlKCkudG9TdHJpbmcoKVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIGZvciBhIExvZ1N0cmVhbVxuICovXG5leHBvcnQgaW50ZXJmYWNlIExvZ1N0cmVhbVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBsb2cgZ3JvdXAgdG8gY3JlYXRlIGEgbG9nIHN0cmVhbSBmb3IuXG4gICAqL1xuICBsb2dHcm91cDogTG9nR3JvdXBSZWY7XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBsb2cgc3RyZWFtIHRvIGNyZWF0ZS5cbiAgICpcbiAgICogVGhlIG5hbWUgbXVzdCBiZSB1bmlxdWUgd2l0aGluIHRoZSBsb2cgZ3JvdXAuXG4gICAqXG4gICAqIEBkZWZhdWx0IEF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkXG4gICAqL1xuICBsb2dTdHJlYW1OYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXRhaW4gdGhlIGxvZyBzdHJlYW0gaWYgdGhlIHN0YWNrIG9yIGNvbnRhaW5pbmcgY29uc3RydWN0IGNlYXNlcyB0byBleGlzdFxuICAgKlxuICAgKiBOb3JtYWxseSB5b3Ugd2FudCB0byByZXRhaW4gdGhlIGxvZyBzdHJlYW0gc28geW91IGNhbiBkaWFnbm9zZSBpc3N1ZXNcbiAgICogZnJvbSBsb2dzIGV2ZW4gYWZ0ZXIgYSBkZXBsb3ltZW50IHRoYXQgbm8gbG9uZ2VyIGluY2x1ZGVzIHRoZSBsb2cgc3RyZWFtLlxuICAgKlxuICAgKiBUaGUgZGF0ZS1iYXNlZCByZXRlbnRpb24gcG9saWN5IG9mIHlvdXIgbG9nIGdyb3VwIHdpbGwgYWdlIG91dCB0aGUgbG9nc1xuICAgKiBhZnRlciBhIGNlcnRhaW4gdGltZS5cbiAgICpcbiAgICogQGRlZmF1bHQgdHJ1ZVxuICAgKi9cbiAgcmV0YWluTG9nU3RyZWFtPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBMb2cgU3RyZWFtIGluIGEgTG9nIEdyb3VwXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dTdHJlYW0gZXh0ZW5kcyBMb2dTdHJlYW1SZWYge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhpcyBsb2cgc3RyZWFtXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgbG9nU3RyZWFtTmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IExvZ1N0cmVhbVByb3BzKSB7XG4gICAgc3VwZXIocGFyZW50LCBpZCk7XG5cbiAgICBjb25zdCByZXNvdXJjZSA9IG5ldyBDZm5Mb2dTdHJlYW0odGhpcywgJ1Jlc291cmNlJywge1xuICAgICAgbG9nR3JvdXBOYW1lOiBwcm9wcy5sb2dHcm91cC5sb2dHcm91cE5hbWUsXG4gICAgICBsb2dTdHJlYW1OYW1lOiBwcm9wcy5sb2dTdHJlYW1OYW1lXG4gICAgfSk7XG5cbiAgICBpZiAocHJvcHMucmV0YWluTG9nU3RyZWFtICE9PSBmYWxzZSkge1xuICAgICAgcmVzb3VyY2Uub3B0aW9ucy5kZWxldGlvblBvbGljeSA9IGNkay5EZWxldGlvblBvbGljeS5SZXRhaW47XG4gICAgfVxuXG4gICAgdGhpcy5sb2dTdHJlYW1OYW1lID0gcmVzb3VyY2UubG9nU3RyZWFtTmFtZTtcbiAgfVxufVxuXG4vKipcbiAqIEFuIGltcG9ydGVkIExvZ1N0cmVhbVxuICovXG5jbGFzcyBJbXBvcnRlZExvZ1N0cmVhbSBleHRlbmRzIExvZ1N0cmVhbVJlZiB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGlzIGxvZyBzdHJlYW1cbiAgICovXG4gIHB1YmxpYyByZWFkb25seSBsb2dTdHJlYW1OYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocGFyZW50OiBjZGsuQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTG9nU3RyZWFtUmVmUHJvcHMpIHtcbiAgICBzdXBlcihwYXJlbnQsIGlkKTtcblxuICAgIHRoaXMubG9nU3RyZWFtTmFtZSA9IHByb3BzLmxvZ1N0cmVhbU5hbWU7XG4gIH1cbn1cbiJdfQ==