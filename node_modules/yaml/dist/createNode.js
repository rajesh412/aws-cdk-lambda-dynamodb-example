"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createNode;

var _Map = _interopRequireDefault(require("./schema/Map"));

var _Pair = _interopRequireDefault(require("./schema/Pair"));

var _Scalar = _interopRequireDefault(require("./schema/Scalar"));

var _Seq = _interopRequireDefault(require("./schema/Seq"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createMapNode(iterable, wrapScalars) {
  const map = new _Map.default();
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = iterable[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      const it = _step.value;
      if (!Array.isArray(it) || it.length !== 2) throw new TypeError(`Expected [key, value] tuple: ${it}`);
      const k = createNode(it[0], wrapScalars);
      const v = createNode(it[1], wrapScalars);
      map.items.push(new _Pair.default(k, v));
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return map;
}

function createNode(value, wrapScalars = true) {
  if (value == null) return new _Scalar.default(null);
  if (typeof value.toJSON === 'function') value = value.toJSON();
  if (typeof value !== 'object') return wrapScalars ? new _Scalar.default(value) : value;

  if (Array.isArray(value)) {
    const seq = new _Seq.default();
    seq.items = value.map(v => createNode(v, wrapScalars));
    return seq;
  } else if (typeof Symbol !== 'undefined' && value[Symbol.iterator]) {
    if (value instanceof Map) return createMapNode(value, wrapScalars);
    const seq = new _Seq.default();
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = value[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const it = _step2.value;
        const v = createNode(it, wrapScalars);
        seq.items.push(v);
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return seq;
  } else {
    const map = new _Map.default();
    map.items = Object.keys(value).map(key => {
      const k = createNode(key, wrapScalars);
      const v = createNode(value[key], wrapScalars);
      return new _Pair.default(k, v);
    });
    return map;
  }
}

module.exports = exports.default;
module.exports.default = exports.default;